
stm32f302r8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e34  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005fbc  08005fbc  00015fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ff4  08005ff4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005ff4  08005ff4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ff4  08005ff4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ff4  08005ff4  00015ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ff8  08005ff8  00015ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  2000000c  08006008  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08006008  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb49  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022b7  00000000  00000000  0002fb85  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fa0  00000000  00000000  00031e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e88  00000000  00000000  00032de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b2eb  00000000  00000000  00033c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c014  00000000  00000000  0004ef53  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00092981  00000000  00000000  0005af67  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ed8e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000414c  00000000  00000000  000ed964  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005fa4 	.word	0x08005fa4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005fa4 	.word	0x08005fa4

080001c8 <_ZN5Phase5StartEv>:
{
public:
    Phase(uint16_t channel): channel_(channel)
    {}

    void Start()
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
    {
        //Starts the PWM signal generation
        if (HAL_TIM_PWM_Start(getTIM1(), channel_) != HAL_OK)
 80001d0:	f000 f98e 	bl	80004f0 <getTIM1>
 80001d4:	4602      	mov	r2, r0
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	685b      	ldr	r3, [r3, #4]
 80001da:	4619      	mov	r1, r3
 80001dc:	4610      	mov	r0, r2
 80001de:	f003 ffeb 	bl	80041b8 <HAL_TIM_PWM_Start>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	bf14      	ite	ne
 80001e8:	2301      	movne	r3, #1
 80001ea:	2300      	moveq	r3, #0
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d001      	beq.n	80001f6 <_ZN5Phase5StartEv+0x2e>
        {
            /* PWM Generation Error */
            Error_Handler();
 80001f2:	f000 fdb5 	bl	8000d60 <Error_Handler>
        }
    }
 80001f6:	bf00      	nop
 80001f8:	3708      	adds	r7, #8
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}

080001fe <_ZN5Phase7SetDutyEf>:
            /* PWM Generation Error */
            Error_Handler();
        }
    }

    void SetDuty(float duty)
 80001fe:	b580      	push	{r7, lr}
 8000200:	b082      	sub	sp, #8
 8000202:	af00      	add	r7, sp, #0
 8000204:	6078      	str	r0, [r7, #4]
 8000206:	ed87 0a00 	vstr	s0, [r7]
    {
        duty_ = duty;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	683a      	ldr	r2, [r7, #0]
 800020e:	609a      	str	r2, [r3, #8]
        if ( enable_)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d002      	beq.n	800021e <_ZN5Phase7SetDutyEf+0x20>
        {
            ApplyDuty();
 8000218:	6878      	ldr	r0, [r7, #4]
 800021a:	f000 f81f 	bl	800025c <_ZN5Phase9ApplyDutyEv>
        }
    }
 800021e:	bf00      	nop
 8000220:	3708      	adds	r7, #8
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}

08000226 <_ZN5Phase6EnableEv>:

    void Enable() { enable_ = true; };
 8000226:	b480      	push	{r7}
 8000228:	b083      	sub	sp, #12
 800022a:	af00      	add	r7, sp, #0
 800022c:	6078      	str	r0, [r7, #4]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2201      	movs	r2, #1
 8000232:	701a      	strb	r2, [r3, #0]
 8000234:	bf00      	nop
 8000236:	370c      	adds	r7, #12
 8000238:	46bd      	mov	sp, r7
 800023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023e:	4770      	bx	lr

08000240 <_ZN5Phase7DisableEv>:
    void Disable() { enable_ = false;  ApplyDuty(); };
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	2200      	movs	r2, #0
 800024c:	701a      	strb	r2, [r3, #0]
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f000 f804 	bl	800025c <_ZN5Phase9ApplyDutyEv>
 8000254:	bf00      	nop
 8000256:	3708      	adds	r7, #8
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}

0800025c <_ZN5Phase9ApplyDutyEv>:

    bool IsEnable() { return enable_; }
    float GetDuty() { return duty_; }

private:
    void ApplyDuty()
 800025c:	b480      	push	{r7}
 800025e:	b085      	sub	sp, #20
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
    {
        uint32_t pulse_width = 0;
 8000264:	2300      	movs	r3, #0
 8000266:	60fb      	str	r3, [r7, #12]

        if ( enable_ )
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d00f      	beq.n	8000290 <_ZN5Phase9ApplyDutyEv+0x34>
        {
            pulse_width = (uint32_t)(1440 * duty_ / 100);
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	edd3 7a02 	vldr	s15, [r3, #8]
 8000276:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8000330 <_ZN5Phase9ApplyDutyEv+0xd4>
 800027a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800027e:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8000334 <_ZN5Phase9ApplyDutyEv+0xd8>
 8000282:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800028a:	ee17 3a90 	vmov	r3, s15
 800028e:	60fb      	str	r3, [r7, #12]
        }

        switch (channel_)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	685b      	ldr	r3, [r3, #4]
 8000294:	2b0c      	cmp	r3, #12
 8000296:	d845      	bhi.n	8000324 <_ZN5Phase9ApplyDutyEv+0xc8>
 8000298:	a201      	add	r2, pc, #4	; (adr r2, 80002a0 <_ZN5Phase9ApplyDutyEv+0x44>)
 800029a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800029e:	bf00      	nop
 80002a0:	080002d5 	.word	0x080002d5
 80002a4:	08000325 	.word	0x08000325
 80002a8:	08000325 	.word	0x08000325
 80002ac:	08000325 	.word	0x08000325
 80002b0:	080002e9 	.word	0x080002e9
 80002b4:	08000325 	.word	0x08000325
 80002b8:	08000325 	.word	0x08000325
 80002bc:	08000325 	.word	0x08000325
 80002c0:	080002fd 	.word	0x080002fd
 80002c4:	08000325 	.word	0x08000325
 80002c8:	08000325 	.word	0x08000325
 80002cc:	08000325 	.word	0x08000325
 80002d0:	08000311 	.word	0x08000311
        {
        case TIM_CHANNEL_1:
            TIM1->CCR1 = pulse_width;
 80002d4:	4a18      	ldr	r2, [pc, #96]	; (8000338 <_ZN5Phase9ApplyDutyEv+0xdc>)
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	6353      	str	r3, [r2, #52]	; 0x34
            TIM1->CCMR1 |= TIM_CCMR1_OC1PE;
 80002da:	4b17      	ldr	r3, [pc, #92]	; (8000338 <_ZN5Phase9ApplyDutyEv+0xdc>)
 80002dc:	699b      	ldr	r3, [r3, #24]
 80002de:	4a16      	ldr	r2, [pc, #88]	; (8000338 <_ZN5Phase9ApplyDutyEv+0xdc>)
 80002e0:	f043 0308 	orr.w	r3, r3, #8
 80002e4:	6193      	str	r3, [r2, #24]
            break;
 80002e6:	e01d      	b.n	8000324 <_ZN5Phase9ApplyDutyEv+0xc8>
        case TIM_CHANNEL_2:
            TIM1->CCR2 = pulse_width;
 80002e8:	4a13      	ldr	r2, [pc, #76]	; (8000338 <_ZN5Phase9ApplyDutyEv+0xdc>)
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	6393      	str	r3, [r2, #56]	; 0x38
            TIM1->CCMR1 |= TIM_CCMR1_OC2PE;
 80002ee:	4b12      	ldr	r3, [pc, #72]	; (8000338 <_ZN5Phase9ApplyDutyEv+0xdc>)
 80002f0:	699b      	ldr	r3, [r3, #24]
 80002f2:	4a11      	ldr	r2, [pc, #68]	; (8000338 <_ZN5Phase9ApplyDutyEv+0xdc>)
 80002f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002f8:	6193      	str	r3, [r2, #24]
            break;
 80002fa:	e013      	b.n	8000324 <_ZN5Phase9ApplyDutyEv+0xc8>
        case TIM_CHANNEL_3:
            TIM1->CCR3 = pulse_width;
 80002fc:	4a0e      	ldr	r2, [pc, #56]	; (8000338 <_ZN5Phase9ApplyDutyEv+0xdc>)
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	63d3      	str	r3, [r2, #60]	; 0x3c
            TIM1->CCMR2 |= TIM_CCMR2_OC3PE;
 8000302:	4b0d      	ldr	r3, [pc, #52]	; (8000338 <_ZN5Phase9ApplyDutyEv+0xdc>)
 8000304:	69db      	ldr	r3, [r3, #28]
 8000306:	4a0c      	ldr	r2, [pc, #48]	; (8000338 <_ZN5Phase9ApplyDutyEv+0xdc>)
 8000308:	f043 0308 	orr.w	r3, r3, #8
 800030c:	61d3      	str	r3, [r2, #28]
            break;
 800030e:	e009      	b.n	8000324 <_ZN5Phase9ApplyDutyEv+0xc8>
        case TIM_CHANNEL_4:
            TIM1->CCR4 = pulse_width;
 8000310:	4a09      	ldr	r2, [pc, #36]	; (8000338 <_ZN5Phase9ApplyDutyEv+0xdc>)
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	6413      	str	r3, [r2, #64]	; 0x40
            TIM1->CCMR2 |= TIM_CCMR2_OC4PE;
 8000316:	4b08      	ldr	r3, [pc, #32]	; (8000338 <_ZN5Phase9ApplyDutyEv+0xdc>)
 8000318:	69db      	ldr	r3, [r3, #28]
 800031a:	4a07      	ldr	r2, [pc, #28]	; (8000338 <_ZN5Phase9ApplyDutyEv+0xdc>)
 800031c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000320:	61d3      	str	r3, [r2, #28]
            break;
 8000322:	bf00      	nop
        }
    }
 8000324:	bf00      	nop
 8000326:	3714      	adds	r7, #20
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	44b40000 	.word	0x44b40000
 8000334:	42c80000 	.word	0x42c80000
 8000338:	40012c00 	.word	0x40012c00

0800033c <_ZN12PhaseHandler4InitEv>:
#include "PhasesControl.hpp"


void PhaseHandler::Init()
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++)
 8000344:	2300      	movs	r3, #0
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	2b02      	cmp	r3, #2
 800034c:	dc0c      	bgt.n	8000368 <_ZN12PhaseHandler4InitEv+0x2c>
    {
        sequence_[i]->Start();
 800034e:	687a      	ldr	r2, [r7, #4]
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	3308      	adds	r3, #8
 8000354:	009b      	lsls	r3, r3, #2
 8000356:	4413      	add	r3, r2
 8000358:	685b      	ldr	r3, [r3, #4]
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff ff34 	bl	80001c8 <_ZN5Phase5StartEv>
    for (int i = 0; i < 3; i++)
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	3301      	adds	r3, #1
 8000364:	60fb      	str	r3, [r7, #12]
 8000366:	e7ef      	b.n	8000348 <_ZN12PhaseHandler4InitEv+0xc>
    }
}
 8000368:	bf00      	nop
 800036a:	3710      	adds	r7, #16
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}

08000370 <_ZN12PhaseHandler5StartEv>:

void PhaseHandler::Start()
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
    sequence_[index_]->Enable();
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037c:	687a      	ldr	r2, [r7, #4]
 800037e:	3308      	adds	r3, #8
 8000380:	009b      	lsls	r3, r3, #2
 8000382:	4413      	add	r3, r2
 8000384:	685b      	ldr	r3, [r3, #4]
 8000386:	4618      	mov	r0, r3
 8000388:	f7ff ff4d 	bl	8000226 <_ZN5Phase6EnableEv>
    sequence_[index_]->SetDuty(duty_);
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000390:	687a      	ldr	r2, [r7, #4]
 8000392:	3308      	adds	r3, #8
 8000394:	009b      	lsls	r3, r3, #2
 8000396:	4413      	add	r3, r2
 8000398:	685a      	ldr	r2, [r3, #4]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80003a0:	eeb0 0a67 	vmov.f32	s0, s15
 80003a4:	4610      	mov	r0, r2
 80003a6:	f7ff ff2a 	bl	80001fe <_ZN5Phase7SetDutyEf>
}
 80003aa:	bf00      	nop
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}

080003b2 <_ZN12PhaseHandler11SetDutyStepEf>:


void PhaseHandler::SetDutyStep(float duty)
{
 80003b2:	b580      	push	{r7, lr}
 80003b4:	b082      	sub	sp, #8
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	6078      	str	r0, [r7, #4]
 80003ba:	ed87 0a00 	vstr	s0, [r7]
    duty_ = duty;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	683a      	ldr	r2, [r7, #0]
 80003c2:	635a      	str	r2, [r3, #52]	; 0x34
    Start();
 80003c4:	6878      	ldr	r0, [r7, #4]
 80003c6:	f7ff ffd3 	bl	8000370 <_ZN12PhaseHandler5StartEv>
}
 80003ca:	bf00      	nop
 80003cc:	3708      	adds	r7, #8
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
	...

080003d4 <_ZN12PhaseHandler10SwitchStepEv>:


void PhaseHandler::SwitchStep()
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
    index_ = (index_ + 1) % 3;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e0:	1c59      	adds	r1, r3, #1
 80003e2:	4b0a      	ldr	r3, [pc, #40]	; (800040c <_ZN12PhaseHandler10SwitchStepEv+0x38>)
 80003e4:	fba3 2301 	umull	r2, r3, r3, r1
 80003e8:	085a      	lsrs	r2, r3, #1
 80003ea:	4613      	mov	r3, r2
 80003ec:	005b      	lsls	r3, r3, #1
 80003ee:	4413      	add	r3, r2
 80003f0:	1aca      	subs	r2, r1, r3
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	631a      	str	r2, [r3, #48]	; 0x30
    DisableAll();
 80003f6:	6878      	ldr	r0, [r7, #4]
 80003f8:	f000 f818 	bl	800042c <_ZN12PhaseHandler10DisableAllEv>
    Start();
 80003fc:	6878      	ldr	r0, [r7, #4]
 80003fe:	f7ff ffb7 	bl	8000370 <_ZN12PhaseHandler5StartEv>
}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	aaaaaaab 	.word	0xaaaaaaab

08000410 <_ZN12PhaseHandler5ResetEv>:

void PhaseHandler::Reset()
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
    index_ = 0;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	2200      	movs	r2, #0
 800041c:	631a      	str	r2, [r3, #48]	; 0x30
    DisableAll();
 800041e:	6878      	ldr	r0, [r7, #4]
 8000420:	f000 f804 	bl	800042c <_ZN12PhaseHandler10DisableAllEv>
}
 8000424:	bf00      	nop
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <_ZN12PhaseHandler10DisableAllEv>:

void PhaseHandler::DisableAll()
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++)
 8000434:	2300      	movs	r3, #0
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	2b02      	cmp	r3, #2
 800043c:	dc0c      	bgt.n	8000458 <_ZN12PhaseHandler10DisableAllEv+0x2c>
    {
        sequence_[i]->Disable();
 800043e:	687a      	ldr	r2, [r7, #4]
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	3308      	adds	r3, #8
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	4413      	add	r3, r2
 8000448:	685b      	ldr	r3, [r3, #4]
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff fef8 	bl	8000240 <_ZN5Phase7DisableEv>
    for (int i = 0; i < 3; i++)
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	3301      	adds	r3, #1
 8000454:	60fb      	str	r3, [r7, #12]
 8000456:	e7ef      	b.n	8000438 <_ZN12PhaseHandler10DisableAllEv+0xc>
    }
}
 8000458:	bf00      	nop
 800045a:	3710      	adds	r7, #16
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <_ZN5PhaseC1Et>:
#include "main.h"

class Phase
{
public:
    Phase(uint16_t channel): channel_(channel)
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	460b      	mov	r3, r1
 800046a:	807b      	strh	r3, [r7, #2]
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	2200      	movs	r2, #0
 8000470:	701a      	strb	r2, [r3, #0]
 8000472:	887a      	ldrh	r2, [r7, #2]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	605a      	str	r2, [r3, #4]
    {}
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4618      	mov	r0, r3
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr

08000486 <_ZN12PhaseHandlerC1Ev>:


class PhaseHandler
{
public:
    PhaseHandler():
 8000486:	b580      	push	{r7, lr}
 8000488:	b082      	sub	sp, #8
 800048a:	af00      	add	r7, sp, #0
 800048c:	6078      	str	r0, [r7, #4]
        phaseA_(TIM_CHANNEL_1),
        phaseB_(TIM_CHANNEL_2),
        phaseC_(TIM_CHANNEL_3)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	2100      	movs	r1, #0
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff ffe4 	bl	8000460 <_ZN5PhaseC1Et>
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	330c      	adds	r3, #12
 800049c:	2104      	movs	r1, #4
 800049e:	4618      	mov	r0, r3
 80004a0:	f7ff ffde 	bl	8000460 <_ZN5PhaseC1Et>
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	3318      	adds	r3, #24
 80004a8:	2108      	movs	r1, #8
 80004aa:	4618      	mov	r0, r3
 80004ac:	f7ff ffd8 	bl	8000460 <_ZN5PhaseC1Et>

    Phase phaseA_;
    Phase phaseB_;
    Phase phaseC_;

    Phase* sequence_[3] {&phaseA_, &phaseB_, &phaseC_};
 80004b0:	687a      	ldr	r2, [r7, #4]
        phaseC_(TIM_CHANNEL_3)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	625a      	str	r2, [r3, #36]	; 0x24
    Phase* sequence_[3] {&phaseA_, &phaseB_, &phaseC_};
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	f103 020c 	add.w	r2, r3, #12
        phaseC_(TIM_CHANNEL_3)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	629a      	str	r2, [r3, #40]	; 0x28
    Phase* sequence_[3] {&phaseA_, &phaseB_, &phaseC_};
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	f103 0218 	add.w	r2, r3, #24
        phaseC_(TIM_CHANNEL_3)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	2200      	movs	r2, #0
 80004ce:	631a      	str	r2, [r3, #48]	; 0x30
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	f04f 0200 	mov.w	r2, #0
 80004d6:	635a      	str	r2, [r3, #52]	; 0x34
        Reset();
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f7ff ff99 	bl	8000410 <_ZN12PhaseHandler5ResetEv>
        Init();
 80004de:	6878      	ldr	r0, [r7, #4]
 80004e0:	f7ff ff2c 	bl	800033c <_ZN12PhaseHandler4InitEv>
    }
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4618      	mov	r0, r3
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
	...

080004f0 <getTIM1>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

TIM_HandleTypeDef* getTIM1()
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
    return &htim1;
 80004f4:	4b02      	ldr	r3, [pc, #8]	; (8000500 <getTIM1+0x10>)
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	200000bc 	.word	0x200000bc

08000504 <toggleLED>:
    /* Enable the output compare 1 Preload */
    TIM->CCMR1 |= TIM_CCMR1_OC1PE;
}

void toggleLED()
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000508:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800050c:	4802      	ldr	r0, [pc, #8]	; (8000518 <toggleLED+0x14>)
 800050e:	f002 f9f5 	bl	80028fc <HAL_GPIO_TogglePin>
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	48000400 	.word	0x48000400

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08e      	sub	sp, #56	; 0x38
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000522:	f000 fed9 	bl	80012d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000526:	f000 f877 	bl	8000618 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052a:	f000 fb83 	bl	8000c34 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800052e:	f000 fb63 	bl	8000bf8 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8000532:	f000 f8ed 	bl	8000710 <_ZL12MX_ADC1_Initv>
  MX_TIM1_Init();
 8000536:	f000 f951 	bl	80007dc <_ZL12MX_TIM1_Initv>
  MX_USART1_UART_Init();
 800053a:	f000 fb29 	bl	8000b90 <_ZL19MX_USART1_UART_Initv>
  MX_TIM2_Init();
 800053e:	f000 fa3d 	bl	80009bc <_ZL12MX_TIM2_Initv>
  MX_TIM6_Init();
 8000542:	f000 fae3 	bl	8000b0c <_ZL12MX_TIM6_Initv>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000546:	f000 f8d6 	bl	80006f6 <_ZL12MX_NVIC_Initv>
  /* USER CODE BEGIN 2 */

  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 800054a:	2100      	movs	r1, #0
 800054c:	482a      	ldr	r0, [pc, #168]	; (80005f8 <main+0xdc>)
 800054e:	f004 fec5 	bl	80052dc <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 8000552:	2104      	movs	r1, #4
 8000554:	4828      	ldr	r0, [pc, #160]	; (80005f8 <main+0xdc>)
 8000556:	f004 fec1 	bl	80052dc <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 800055a:	2108      	movs	r1, #8
 800055c:	4826      	ldr	r0, [pc, #152]	; (80005f8 <main+0xdc>)
 800055e:	f004 febd 	bl	80052dc <HAL_TIMEx_PWMN_Start>
  //HAL_TIM_OC_Start_IT(&htim1,TIM_CHANNEL_1);
  //HAL_TIM_OC_Start_IT(&htim1,TIM_CHANNEL_2);
  //HAL_TIM_OC_Start_IT(&htim1,TIM_CHANNEL_3);
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_4);
 8000562:	210c      	movs	r1, #12
 8000564:	4824      	ldr	r0, [pc, #144]	; (80005f8 <main+0xdc>)
 8000566:	f003 fd63 	bl	8004030 <HAL_TIM_OC_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim1);
  HAL_TIM_Base_Start_IT(&htim6);
 800056a:	4824      	ldr	r0, [pc, #144]	; (80005fc <main+0xe0>)
 800056c:	f003 fd00 	bl	8003f70 <HAL_TIM_Base_Start_IT>

  PhaseHandler ph;
 8000570:	463b      	mov	r3, r7
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff ff87 	bl	8000486 <_ZN12PhaseHandlerC1Ev>
  ph.Start();
 8000578:	463b      	mov	r3, r7
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff fef8 	bl	8000370 <_ZN12PhaseHandler5StartEv>
  ph.SetDutyStep(50.0f);
 8000580:	463b      	mov	r3, r7
 8000582:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8000600 <main+0xe4>
 8000586:	4618      	mov	r0, r3
 8000588:	f7ff ff13 	bl	80003b2 <_ZN12PhaseHandler11SetDutyStepEf>

  HAL_TIM_Base_Start_IT(&htim2);
 800058c:	481d      	ldr	r0, [pc, #116]	; (8000604 <main+0xe8>)
 800058e:	f003 fcef 	bl	8003f70 <HAL_TIM_Base_Start_IT>

  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)//Starts the PWM signal generation
 8000592:	2100      	movs	r1, #0
 8000594:	481b      	ldr	r0, [pc, #108]	; (8000604 <main+0xe8>)
 8000596:	f003 fe0f 	bl	80041b8 <HAL_TIM_PWM_Start>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	bf14      	ite	ne
 80005a0:	2301      	movne	r3, #1
 80005a2:	2300      	moveq	r3, #0
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <main+0x92>
  {
    /* PWM Generation Error */
    Error_Handler();
 80005aa:	f000 fbd9 	bl	8000d60 <Error_Handler>
  }


  HAL_ADC_Start_DMA(&hadc1, pData, Length);
 80005ae:	2201      	movs	r2, #1
 80005b0:	4915      	ldr	r1, [pc, #84]	; (8000608 <main+0xec>)
 80005b2:	4816      	ldr	r0, [pc, #88]	; (800060c <main+0xf0>)
 80005b4:	f001 f8bc 	bl	8001730 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      static float duty = 0.0F;
      duty += 10.0F;
 80005b8:	4b15      	ldr	r3, [pc, #84]	; (8000610 <main+0xf4>)
 80005ba:	edd3 7a00 	vldr	s15, [r3]
 80005be:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80005c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80005c6:	4b12      	ldr	r3, [pc, #72]	; (8000610 <main+0xf4>)
 80005c8:	edc3 7a00 	vstr	s15, [r3]
      if (duty > 100.0F)
 80005cc:	4b10      	ldr	r3, [pc, #64]	; (8000610 <main+0xf4>)
 80005ce:	edd3 7a00 	vldr	s15, [r3]
 80005d2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000614 <main+0xf8>
 80005d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005de:	dd03      	ble.n	80005e8 <main+0xcc>
          duty = 0.0F;
 80005e0:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <main+0xf4>)
 80005e2:	f04f 0200 	mov.w	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]

      //ph.SetDutyStep(duty);
      ph.SwitchStep();
 80005e8:	463b      	mov	r3, r7
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff fef2 	bl	80003d4 <_ZN12PhaseHandler10SwitchStepEv>
      HAL_Delay(50);
 80005f0:	2032      	movs	r0, #50	; 0x32
 80005f2:	f000 fed7 	bl	80013a4 <HAL_Delay>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  }
 80005f6:	e7df      	b.n	80005b8 <main+0x9c>
 80005f8:	200000bc 	.word	0x200000bc
 80005fc:	2000013c 	.word	0x2000013c
 8000600:	42480000 	.word	0x42480000
 8000604:	200000fc 	.word	0x200000fc
 8000608:	200001fc 	.word	0x200001fc
 800060c:	20000028 	.word	0x20000028
 8000610:	20000200 	.word	0x20000200
 8000614:	42c80000 	.word	0x42c80000

08000618 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b09c      	sub	sp, #112	; 0x70
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000622:	2228      	movs	r2, #40	; 0x28
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f005 fcb4 	bl	8005f94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800063c:	463b      	mov	r3, r7
 800063e:	2234      	movs	r2, #52	; 0x34
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f005 fca6 	bl	8005f94 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000648:	2301      	movs	r3, #1
 800064a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800064c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000650:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000656:	2301      	movs	r3, #1
 8000658:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000662:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000664:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000668:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800066e:	4618      	mov	r0, r3
 8000670:	f002 f982 	bl	8002978 <HAL_RCC_OscConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	bf14      	ite	ne
 800067a:	2301      	movne	r3, #1
 800067c:	2300      	moveq	r3, #0
 800067e:	b2db      	uxtb	r3, r3
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8000684:	f000 fb6c 	bl	8000d60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2302      	movs	r3, #2
 800068e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000698:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800069e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006a2:	2102      	movs	r1, #2
 80006a4:	4618      	mov	r0, r3
 80006a6:	f003 f86f 	bl	8003788 <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	bf14      	ite	ne
 80006b0:	2301      	movne	r3, #1
 80006b2:	2300      	moveq	r3, #0
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 80006ba:	f000 fb51 	bl	8000d60 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 80006be:	f241 0381 	movw	r3, #4225	; 0x1081
 80006c2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80006c8:	2300      	movs	r3, #0
 80006ca:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 80006cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006d0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d2:	463b      	mov	r3, r7
 80006d4:	4618      	mov	r0, r3
 80006d6:	f003 fa8d 	bl	8003bf4 <HAL_RCCEx_PeriphCLKConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	bf14      	ite	ne
 80006e0:	2301      	movne	r3, #1
 80006e2:	2300      	moveq	r3, #0
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 80006ea:	f000 fb39 	bl	8000d60 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3770      	adds	r7, #112	; 0x70
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <_ZL12MX_NVIC_Initv>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 80006fa:	2202      	movs	r2, #2
 80006fc:	2100      	movs	r1, #0
 80006fe:	201c      	movs	r0, #28
 8000700:	f001 fd67 	bl	80021d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000704:	201c      	movs	r0, #28
 8000706:	f001 fd80 	bl	800220a <HAL_NVIC_EnableIRQ>
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
	...

08000710 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000716:	463b      	mov	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
 8000724:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000726:	4b2c      	ldr	r3, [pc, #176]	; (80007d8 <_ZL12MX_ADC1_Initv+0xc8>)
 8000728:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800072c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800072e:	4b2a      	ldr	r3, [pc, #168]	; (80007d8 <_ZL12MX_ADC1_Initv+0xc8>)
 8000730:	2200      	movs	r2, #0
 8000732:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000734:	4b28      	ldr	r3, [pc, #160]	; (80007d8 <_ZL12MX_ADC1_Initv+0xc8>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800073a:	4b27      	ldr	r3, [pc, #156]	; (80007d8 <_ZL12MX_ADC1_Initv+0xc8>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000740:	4b25      	ldr	r3, [pc, #148]	; (80007d8 <_ZL12MX_ADC1_Initv+0xc8>)
 8000742:	2201      	movs	r2, #1
 8000744:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000746:	4b24      	ldr	r3, [pc, #144]	; (80007d8 <_ZL12MX_ADC1_Initv+0xc8>)
 8000748:	2200      	movs	r2, #0
 800074a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800074e:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <_ZL12MX_ADC1_Initv+0xc8>)
 8000750:	2200      	movs	r2, #0
 8000752:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000754:	4b20      	ldr	r3, [pc, #128]	; (80007d8 <_ZL12MX_ADC1_Initv+0xc8>)
 8000756:	2201      	movs	r2, #1
 8000758:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800075a:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <_ZL12MX_ADC1_Initv+0xc8>)
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000760:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <_ZL12MX_ADC1_Initv+0xc8>)
 8000762:	2201      	movs	r2, #1
 8000764:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000766:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <_ZL12MX_ADC1_Initv+0xc8>)
 8000768:	2201      	movs	r2, #1
 800076a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800076e:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <_ZL12MX_ADC1_Initv+0xc8>)
 8000770:	2204      	movs	r2, #4
 8000772:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000774:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <_ZL12MX_ADC1_Initv+0xc8>)
 8000776:	2200      	movs	r2, #0
 8000778:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <_ZL12MX_ADC1_Initv+0xc8>)
 800077c:	2200      	movs	r2, #0
 800077e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000780:	4815      	ldr	r0, [pc, #84]	; (80007d8 <_ZL12MX_ADC1_Initv+0xc8>)
 8000782:	f000 fe4f 	bl	8001424 <HAL_ADC_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	bf14      	ite	ne
 800078c:	2301      	movne	r3, #1
 800078e:	2300      	moveq	r3, #0
 8000790:	b2db      	uxtb	r3, r3
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <_ZL12MX_ADC1_Initv+0x8a>
  {
    Error_Handler();
 8000796:	f000 fae3 	bl	8000d60 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800079a:	2301      	movs	r3, #1
 800079c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800079e:	2301      	movs	r3, #1
 80007a0:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b2:	463b      	mov	r3, r7
 80007b4:	4619      	mov	r1, r3
 80007b6:	4808      	ldr	r0, [pc, #32]	; (80007d8 <_ZL12MX_ADC1_Initv+0xc8>)
 80007b8:	f001 f856 	bl	8001868 <HAL_ADC_ConfigChannel>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	bf14      	ite	ne
 80007c2:	2301      	movne	r3, #1
 80007c4:	2300      	moveq	r3, #0
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 80007cc:	f000 fac8 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	3718      	adds	r7, #24
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000028 	.word	0x20000028

080007dc <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b096      	sub	sp, #88	; 0x58
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]
 80007fe:	615a      	str	r2, [r3, #20]
 8000800:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	222c      	movs	r2, #44	; 0x2c
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f005 fbc3 	bl	8005f94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800080e:	4b69      	ldr	r3, [pc, #420]	; (80009b4 <_ZL12MX_TIM1_Initv+0x1d8>)
 8000810:	4a69      	ldr	r2, [pc, #420]	; (80009b8 <_ZL12MX_TIM1_Initv+0x1dc>)
 8000812:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000814:	4b67      	ldr	r3, [pc, #412]	; (80009b4 <_ZL12MX_TIM1_Initv+0x1d8>)
 8000816:	2200      	movs	r2, #0
 8000818:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081a:	4b66      	ldr	r3, [pc, #408]	; (80009b4 <_ZL12MX_TIM1_Initv+0x1d8>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1440;
 8000820:	4b64      	ldr	r3, [pc, #400]	; (80009b4 <_ZL12MX_TIM1_Initv+0x1d8>)
 8000822:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8000826:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000828:	4b62      	ldr	r3, [pc, #392]	; (80009b4 <_ZL12MX_TIM1_Initv+0x1d8>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800082e:	4b61      	ldr	r3, [pc, #388]	; (80009b4 <_ZL12MX_TIM1_Initv+0x1d8>)
 8000830:	2200      	movs	r2, #0
 8000832:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000834:	4b5f      	ldr	r3, [pc, #380]	; (80009b4 <_ZL12MX_TIM1_Initv+0x1d8>)
 8000836:	2280      	movs	r2, #128	; 0x80
 8000838:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800083a:	485e      	ldr	r0, [pc, #376]	; (80009b4 <_ZL12MX_TIM1_Initv+0x1d8>)
 800083c:	f003 fc90 	bl	8004160 <HAL_TIM_PWM_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	bf14      	ite	ne
 8000846:	2301      	movne	r3, #1
 8000848:	2300      	moveq	r3, #0
 800084a:	b2db      	uxtb	r3, r3
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <_ZL12MX_TIM1_Initv+0x78>
  {
    Error_Handler();
 8000850:	f000 fa86 	bl	8000d60 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000854:	4857      	ldr	r0, [pc, #348]	; (80009b4 <_ZL12MX_TIM1_Initv+0x1d8>)
 8000856:	f003 fbb5 	bl	8003fc4 <HAL_TIM_OC_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	bf14      	ite	ne
 8000860:	2301      	movne	r3, #1
 8000862:	2300      	moveq	r3, #0
 8000864:	b2db      	uxtb	r3, r3
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <_ZL12MX_TIM1_Initv+0x92>
  {
    Error_Handler();
 800086a:	f000 fa79 	bl	8000d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800086e:	2370      	movs	r3, #112	; 0x70
 8000870:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC4REF;
 8000872:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 8000876:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800087c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000880:	4619      	mov	r1, r3
 8000882:	484c      	ldr	r0, [pc, #304]	; (80009b4 <_ZL12MX_TIM1_Initv+0x1d8>)
 8000884:	f004 fd5a 	bl	800533c <HAL_TIMEx_MasterConfigSynchronization>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	bf14      	ite	ne
 800088e:	2301      	movne	r3, #1
 8000890:	2300      	moveq	r3, #0
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <_ZL12MX_TIM1_Initv+0xc0>
  {
    Error_Handler();
 8000898:	f000 fa62 	bl	8000d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800089c:	2360      	movs	r3, #96	; 0x60
 800089e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a4:	2300      	movs	r3, #0
 80008a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008a8:	2300      	movs	r3, #0
 80008aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008b0:	2300      	movs	r3, #0
 80008b2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008b4:	2300      	movs	r3, #0
 80008b6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008bc:	2200      	movs	r2, #0
 80008be:	4619      	mov	r1, r3
 80008c0:	483c      	ldr	r0, [pc, #240]	; (80009b4 <_ZL12MX_TIM1_Initv+0x1d8>)
 80008c2:	f003 fe69 	bl	8004598 <HAL_TIM_PWM_ConfigChannel>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	bf14      	ite	ne
 80008cc:	2301      	movne	r3, #1
 80008ce:	2300      	moveq	r3, #0
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 80008d6:	f000 fa43 	bl	8000d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008de:	2204      	movs	r2, #4
 80008e0:	4619      	mov	r1, r3
 80008e2:	4834      	ldr	r0, [pc, #208]	; (80009b4 <_ZL12MX_TIM1_Initv+0x1d8>)
 80008e4:	f003 fe58 	bl	8004598 <HAL_TIM_PWM_ConfigChannel>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	bf14      	ite	ne
 80008ee:	2301      	movne	r3, #1
 80008f0:	2300      	moveq	r3, #0
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 80008f8:	f000 fa32 	bl	8000d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000900:	2208      	movs	r2, #8
 8000902:	4619      	mov	r1, r3
 8000904:	482b      	ldr	r0, [pc, #172]	; (80009b4 <_ZL12MX_TIM1_Initv+0x1d8>)
 8000906:	f003 fe47 	bl	8004598 <HAL_TIM_PWM_ConfigChannel>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	bf14      	ite	ne
 8000910:	2301      	movne	r3, #1
 8000912:	2300      	moveq	r3, #0
 8000914:	b2db      	uxtb	r3, r3
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <_ZL12MX_TIM1_Initv+0x142>
  {
    Error_Handler();
 800091a:	f000 fa21 	bl	8000d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800091e:	2330      	movs	r3, #48	; 0x30
 8000920:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000922:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000926:	220c      	movs	r2, #12
 8000928:	4619      	mov	r1, r3
 800092a:	4822      	ldr	r0, [pc, #136]	; (80009b4 <_ZL12MX_TIM1_Initv+0x1d8>)
 800092c:	f003 fdb6 	bl	800449c <HAL_TIM_OC_ConfigChannel>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	bf14      	ite	ne
 8000936:	2301      	movne	r3, #1
 8000938:	2300      	moveq	r3, #0
 800093a:	b2db      	uxtb	r3, r3
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <_ZL12MX_TIM1_Initv+0x168>
  {
    Error_Handler();
 8000940:	f000 fa0e 	bl	8000d60 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <_ZL12MX_TIM1_Initv+0x1d8>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	69da      	ldr	r2, [r3, #28]
 800094a:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <_ZL12MX_TIM1_Initv+0x1d8>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000952:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 10;
 8000960:	230a      	movs	r3, #10
 8000962:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800096c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000976:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000980:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000984:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	4619      	mov	r1, r3
 800098a:	480a      	ldr	r0, [pc, #40]	; (80009b4 <_ZL12MX_TIM1_Initv+0x1d8>)
 800098c:	f004 fd3c 	bl	8005408 <HAL_TIMEx_ConfigBreakDeadTime>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	bf14      	ite	ne
 8000996:	2301      	movne	r3, #1
 8000998:	2300      	moveq	r3, #0
 800099a:	b2db      	uxtb	r3, r3
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <_ZL12MX_TIM1_Initv+0x1c8>
  {
    Error_Handler();
 80009a0:	f000 f9de 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009a4:	4803      	ldr	r0, [pc, #12]	; (80009b4 <_ZL12MX_TIM1_Initv+0x1d8>)
 80009a6:	f000 faed 	bl	8000f84 <HAL_TIM_MspPostInit>

}
 80009aa:	bf00      	nop
 80009ac:	3758      	adds	r7, #88	; 0x58
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200000bc 	.word	0x200000bc
 80009b8:	40012c00 	.word	0x40012c00

080009bc <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b094      	sub	sp, #80	; 0x50
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e0:	f107 0320 	add.w	r3, r7, #32
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]
 80009fa:	615a      	str	r2, [r3, #20]
 80009fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009fe:	4b42      	ldr	r3, [pc, #264]	; (8000b08 <_ZL12MX_TIM2_Initv+0x14c>)
 8000a00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a06:	4b40      	ldr	r3, [pc, #256]	; (8000b08 <_ZL12MX_TIM2_Initv+0x14c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0c:	4b3e      	ldr	r3, [pc, #248]	; (8000b08 <_ZL12MX_TIM2_Initv+0x14c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1368;
 8000a12:	4b3d      	ldr	r3, [pc, #244]	; (8000b08 <_ZL12MX_TIM2_Initv+0x14c>)
 8000a14:	f44f 62ab 	mov.w	r2, #1368	; 0x558
 8000a18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1a:	4b3b      	ldr	r3, [pc, #236]	; (8000b08 <_ZL12MX_TIM2_Initv+0x14c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a20:	4b39      	ldr	r3, [pc, #228]	; (8000b08 <_ZL12MX_TIM2_Initv+0x14c>)
 8000a22:	2280      	movs	r2, #128	; 0x80
 8000a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a26:	4838      	ldr	r0, [pc, #224]	; (8000b08 <_ZL12MX_TIM2_Initv+0x14c>)
 8000a28:	f003 fa76 	bl	8003f18 <HAL_TIM_Base_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	bf14      	ite	ne
 8000a32:	2301      	movne	r3, #1
 8000a34:	2300      	moveq	r3, #0
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8000a3c:	f000 f990 	bl	8000d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a44:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	482e      	ldr	r0, [pc, #184]	; (8000b08 <_ZL12MX_TIM2_Initv+0x14c>)
 8000a4e:	f003 febb 	bl	80047c8 <HAL_TIM_ConfigClockSource>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	bf14      	ite	ne
 8000a58:	2301      	movne	r3, #1
 8000a5a:	2300      	moveq	r3, #0
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8000a62:	f000 f97d 	bl	8000d60 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000a66:	4828      	ldr	r0, [pc, #160]	; (8000b08 <_ZL12MX_TIM2_Initv+0x14c>)
 8000a68:	f003 faac 	bl	8003fc4 <HAL_TIM_OC_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	bf14      	ite	ne
 8000a72:	2301      	movne	r3, #1
 8000a74:	2300      	moveq	r3, #0
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <_ZL12MX_TIM2_Initv+0xc4>
  {
    Error_Handler();
 8000a7c:	f000 f970 	bl	8000d60 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000a88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	481e      	ldr	r0, [pc, #120]	; (8000b08 <_ZL12MX_TIM2_Initv+0x14c>)
 8000a90:	f003 ff53 	bl	800493a <HAL_TIM_SlaveConfigSynchro>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	bf14      	ite	ne
 8000a9a:	2301      	movne	r3, #1
 8000a9c:	2300      	moveq	r3, #0
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <_ZL12MX_TIM2_Initv+0xec>
  {
    Error_Handler();
 8000aa4:	f000 f95c 	bl	8000d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8000aa8:	2330      	movs	r3, #48	; 0x30
 8000aaa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ab0:	f107 0320 	add.w	r3, r7, #32
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4814      	ldr	r0, [pc, #80]	; (8000b08 <_ZL12MX_TIM2_Initv+0x14c>)
 8000ab8:	f004 fc40 	bl	800533c <HAL_TIMEx_MasterConfigSynchronization>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	bf14      	ite	ne
 8000ac2:	2301      	movne	r3, #1
 8000ac4:	2300      	moveq	r3, #0
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <_ZL12MX_TIM2_Initv+0x114>
  {
    Error_Handler();
 8000acc:	f000 f948 	bl	8000d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000ad0:	2330      	movs	r3, #48	; 0x30
 8000ad2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4808      	ldr	r0, [pc, #32]	; (8000b08 <_ZL12MX_TIM2_Initv+0x14c>)
 8000ae8:	f003 fcd8 	bl	800449c <HAL_TIM_OC_ConfigChannel>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	bf14      	ite	ne
 8000af2:	2301      	movne	r3, #1
 8000af4:	2300      	moveq	r3, #0
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <_ZL12MX_TIM2_Initv+0x144>
  {
    Error_Handler();
 8000afc:	f000 f930 	bl	8000d60 <Error_Handler>



  /* USER CODE END TIM2_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	3750      	adds	r7, #80	; 0x50
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	200000fc 	.word	0x200000fc

08000b0c <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <_ZL12MX_TIM6_Initv+0x7c>)
 8000b1e:	4a1b      	ldr	r2, [pc, #108]	; (8000b8c <_ZL12MX_TIM6_Initv+0x80>)
 8000b20:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 8000b22:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <_ZL12MX_TIM6_Initv+0x7c>)
 8000b24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b28:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <_ZL12MX_TIM6_Initv+0x7c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 36000;
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <_ZL12MX_TIM6_Initv+0x7c>)
 8000b32:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8000b36:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b38:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <_ZL12MX_TIM6_Initv+0x7c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b3e:	4812      	ldr	r0, [pc, #72]	; (8000b88 <_ZL12MX_TIM6_Initv+0x7c>)
 8000b40:	f003 f9ea 	bl	8003f18 <HAL_TIM_Base_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	bf14      	ite	ne
 8000b4a:	2301      	movne	r3, #1
 8000b4c:	2300      	moveq	r3, #0
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <_ZL12MX_TIM6_Initv+0x4c>
  {
    Error_Handler();
 8000b54:	f000 f904 	bl	8000d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	4619      	mov	r1, r3
 8000b64:	4808      	ldr	r0, [pc, #32]	; (8000b88 <_ZL12MX_TIM6_Initv+0x7c>)
 8000b66:	f004 fbe9 	bl	800533c <HAL_TIMEx_MasterConfigSynchronization>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	bf14      	ite	ne
 8000b70:	2301      	movne	r3, #1
 8000b72:	2300      	moveq	r3, #0
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <_ZL12MX_TIM6_Initv+0x72>
  {
    Error_Handler();
 8000b7a:	f000 f8f1 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	2000013c 	.word	0x2000013c
 8000b8c:	40001000 	.word	0x40001000

08000b90 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b94:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000b96:	4a17      	ldr	r2, [pc, #92]	; (8000bf4 <_ZL19MX_USART1_UART_Initv+0x64>)
 8000b98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000b9c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000ba0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba2:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bba:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bd2:	4807      	ldr	r0, [pc, #28]	; (8000bf0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000bd4:	f004 fcd3 	bl	800557e <HAL_UART_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	bf14      	ite	ne
 8000bde:	2301      	movne	r3, #1
 8000be0:	2300      	moveq	r3, #0
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8000be8:	f000 f8ba 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	2000017c 	.word	0x2000017c
 8000bf4:	40013800 	.word	0x40013800

08000bf8 <_ZL11MX_DMA_Initv>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <_ZL11MX_DMA_Initv+0x38>)
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	4a0b      	ldr	r2, [pc, #44]	; (8000c30 <_ZL11MX_DMA_Initv+0x38>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6153      	str	r3, [r2, #20]
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <_ZL11MX_DMA_Initv+0x38>)
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	200b      	movs	r0, #11
 8000c1c:	f001 fad9 	bl	80021d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c20:	200b      	movs	r0, #11
 8000c22:	f001 faf2 	bl	800220a <HAL_NVIC_EnableIRQ>

}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40021000 	.word	0x40021000

08000c34 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4a:	4b41      	ldr	r3, [pc, #260]	; (8000d50 <_ZL12MX_GPIO_Initv+0x11c>)
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	4a40      	ldr	r2, [pc, #256]	; (8000d50 <_ZL12MX_GPIO_Initv+0x11c>)
 8000c50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c54:	6153      	str	r3, [r2, #20]
 8000c56:	4b3e      	ldr	r3, [pc, #248]	; (8000d50 <_ZL12MX_GPIO_Initv+0x11c>)
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c62:	4b3b      	ldr	r3, [pc, #236]	; (8000d50 <_ZL12MX_GPIO_Initv+0x11c>)
 8000c64:	695b      	ldr	r3, [r3, #20]
 8000c66:	4a3a      	ldr	r2, [pc, #232]	; (8000d50 <_ZL12MX_GPIO_Initv+0x11c>)
 8000c68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c6c:	6153      	str	r3, [r2, #20]
 8000c6e:	4b38      	ldr	r3, [pc, #224]	; (8000d50 <_ZL12MX_GPIO_Initv+0x11c>)
 8000c70:	695b      	ldr	r3, [r3, #20]
 8000c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	4b35      	ldr	r3, [pc, #212]	; (8000d50 <_ZL12MX_GPIO_Initv+0x11c>)
 8000c7c:	695b      	ldr	r3, [r3, #20]
 8000c7e:	4a34      	ldr	r2, [pc, #208]	; (8000d50 <_ZL12MX_GPIO_Initv+0x11c>)
 8000c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c84:	6153      	str	r3, [r2, #20]
 8000c86:	4b32      	ldr	r3, [pc, #200]	; (8000d50 <_ZL12MX_GPIO_Initv+0x11c>)
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	4b2f      	ldr	r3, [pc, #188]	; (8000d50 <_ZL12MX_GPIO_Initv+0x11c>)
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	4a2e      	ldr	r2, [pc, #184]	; (8000d50 <_ZL12MX_GPIO_Initv+0x11c>)
 8000c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c9c:	6153      	str	r3, [r2, #20]
 8000c9e:	4b2c      	ldr	r3, [pc, #176]	; (8000d50 <_ZL12MX_GPIO_Initv+0x11c>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb0:	4828      	ldr	r0, [pc, #160]	; (8000d54 <_ZL12MX_GPIO_Initv+0x120>)
 8000cb2:	f001 fe0b 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2140      	movs	r1, #64	; 0x40
 8000cba:	4827      	ldr	r0, [pc, #156]	; (8000d58 <_ZL12MX_GPIO_Initv+0x124>)
 8000cbc:	f001 fe06 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cc6:	4b25      	ldr	r3, [pc, #148]	; (8000d5c <_ZL12MX_GPIO_Initv+0x128>)
 8000cc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4820      	ldr	r0, [pc, #128]	; (8000d58 <_ZL12MX_GPIO_Initv+0x124>)
 8000cd6:	f001 fc87 	bl	80025e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cda:	230c      	movs	r3, #12
 8000cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cea:	2307      	movs	r3, #7
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf8:	f001 fc76 	bl	80025e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d02:	2301      	movs	r3, #1
 8000d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d06:	2301      	movs	r3, #1
 8000d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	480f      	ldr	r0, [pc, #60]	; (8000d54 <_ZL12MX_GPIO_Initv+0x120>)
 8000d16:	f001 fc67 	bl	80025e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d1a:	2340      	movs	r3, #64	; 0x40
 8000d1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d22:	2301      	movs	r3, #1
 8000d24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4809      	ldr	r0, [pc, #36]	; (8000d58 <_ZL12MX_GPIO_Initv+0x124>)
 8000d32:	f001 fc59 	bl	80025e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2100      	movs	r1, #0
 8000d3a:	2028      	movs	r0, #40	; 0x28
 8000d3c:	f001 fa49 	bl	80021d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d40:	2028      	movs	r0, #40	; 0x28
 8000d42:	f001 fa62 	bl	800220a <HAL_NVIC_EnableIRQ>

}
 8000d46:	bf00      	nop
 8000d48:	3728      	adds	r7, #40	; 0x28
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40021000 	.word	0x40021000
 8000d54:	48000400 	.word	0x48000400
 8000d58:	48000800 	.word	0x48000800
 8000d5c:	10210000 	.word	0x10210000

08000d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <HAL_MspInit+0x54>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	4a12      	ldr	r2, [pc, #72]	; (8000dc4 <HAL_MspInit+0x54>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6193      	str	r3, [r2, #24]
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <HAL_MspInit+0x54>)
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <HAL_MspInit+0x54>)
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	4a0c      	ldr	r2, [pc, #48]	; (8000dc4 <HAL_MspInit+0x54>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d98:	61d3      	str	r3, [r2, #28]
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <HAL_MspInit+0x54>)
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000da6:	2007      	movs	r0, #7
 8000da8:	f001 fa08 	bl	80021bc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2100      	movs	r1, #0
 8000db0:	2005      	movs	r0, #5
 8000db2:	f001 fa0e 	bl	80021d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000db6:	2005      	movs	r0, #5
 8000db8:	f001 fa27 	bl	800220a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000de8:	d14c      	bne.n	8000e84 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dea:	4b28      	ldr	r3, [pc, #160]	; (8000e8c <HAL_ADC_MspInit+0xc4>)
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	4a27      	ldr	r2, [pc, #156]	; (8000e8c <HAL_ADC_MspInit+0xc4>)
 8000df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df4:	6153      	str	r3, [r2, #20]
 8000df6:	4b25      	ldr	r3, [pc, #148]	; (8000e8c <HAL_ADC_MspInit+0xc4>)
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	4b22      	ldr	r3, [pc, #136]	; (8000e8c <HAL_ADC_MspInit+0xc4>)
 8000e04:	695b      	ldr	r3, [r3, #20]
 8000e06:	4a21      	ldr	r2, [pc, #132]	; (8000e8c <HAL_ADC_MspInit+0xc4>)
 8000e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e0c:	6153      	str	r3, [r2, #20]
 8000e0e:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <HAL_ADC_MspInit+0xc4>)
 8000e10:	695b      	ldr	r3, [r3, #20]
 8000e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e30:	f001 fbda 	bl	80025e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e34:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <HAL_ADC_MspInit+0xc8>)
 8000e36:	4a17      	ldr	r2, [pc, #92]	; (8000e94 <HAL_ADC_MspInit+0xcc>)
 8000e38:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <HAL_ADC_MspInit+0xc8>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e40:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <HAL_ADC_MspInit+0xc8>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e46:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_ADC_MspInit+0xc8>)
 8000e48:	2280      	movs	r2, #128	; 0x80
 8000e4a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e4c:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <HAL_ADC_MspInit+0xc8>)
 8000e4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e52:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e54:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <HAL_ADC_MspInit+0xc8>)
 8000e56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e5a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <HAL_ADC_MspInit+0xc8>)
 8000e5e:	2220      	movs	r2, #32
 8000e60:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e62:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <HAL_ADC_MspInit+0xc8>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e68:	4809      	ldr	r0, [pc, #36]	; (8000e90 <HAL_ADC_MspInit+0xc8>)
 8000e6a:	f001 f9e8 	bl	800223e <HAL_DMA_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000e74:	f7ff ff74 	bl	8000d60 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <HAL_ADC_MspInit+0xc8>)
 8000e7c:	639a      	str	r2, [r3, #56]	; 0x38
 8000e7e:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <HAL_ADC_MspInit+0xc8>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e84:	bf00      	nop
 8000e86:	3728      	adds	r7, #40	; 0x28
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	20000078 	.word	0x20000078
 8000e94:	40020008 	.word	0x40020008

08000e98 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a19      	ldr	r2, [pc, #100]	; (8000f0c <HAL_TIM_PWM_MspInit+0x74>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d12b      	bne.n	8000f02 <HAL_TIM_PWM_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <HAL_TIM_PWM_MspInit+0x78>)
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	4a18      	ldr	r2, [pc, #96]	; (8000f10 <HAL_TIM_PWM_MspInit+0x78>)
 8000eb0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000eb4:	6193      	str	r3, [r2, #24]
 8000eb6:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <HAL_TIM_PWM_MspInit+0x78>)
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2018      	movs	r0, #24
 8000ec8:	f001 f983 	bl	80021d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000ecc:	2018      	movs	r0, #24
 8000ece:	f001 f99c 	bl	800220a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2019      	movs	r0, #25
 8000ed8:	f001 f97b 	bl	80021d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000edc:	2019      	movs	r0, #25
 8000ede:	f001 f994 	bl	800220a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	201a      	movs	r0, #26
 8000ee8:	f001 f973 	bl	80021d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000eec:	201a      	movs	r0, #26
 8000eee:	f001 f98c 	bl	800220a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	201b      	movs	r0, #27
 8000ef8:	f001 f96b 	bl	80021d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000efc:	201b      	movs	r0, #27
 8000efe:	f001 f984 	bl	800220a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f02:	bf00      	nop
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40012c00 	.word	0x40012c00
 8000f10:	40021000 	.word	0x40021000

08000f14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f24:	d10c      	bne.n	8000f40 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f26:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <HAL_TIM_Base_MspInit+0x68>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	4a14      	ldr	r2, [pc, #80]	; (8000f7c <HAL_TIM_Base_MspInit+0x68>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	61d3      	str	r3, [r2, #28]
 8000f32:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_TIM_Base_MspInit+0x68>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000f3e:	e018      	b.n	8000f72 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <HAL_TIM_Base_MspInit+0x6c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d113      	bne.n	8000f72 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <HAL_TIM_Base_MspInit+0x68>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <HAL_TIM_Base_MspInit+0x68>)
 8000f50:	f043 0310 	orr.w	r3, r3, #16
 8000f54:	61d3      	str	r3, [r2, #28]
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <HAL_TIM_Base_MspInit+0x68>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	f003 0310 	and.w	r3, r3, #16
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	2036      	movs	r0, #54	; 0x36
 8000f68:	f001 f933 	bl	80021d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f6c:	2036      	movs	r0, #54	; 0x36
 8000f6e:	f001 f94c 	bl	800220a <HAL_NVIC_EnableIRQ>
}
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	40001000 	.word	0x40001000

08000f84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a2d      	ldr	r2, [pc, #180]	; (8001058 <HAL_TIM_MspPostInit+0xd4>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d154      	bne.n	8001050 <HAL_TIM_MspPostInit+0xcc>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa6:	4b2d      	ldr	r3, [pc, #180]	; (800105c <HAL_TIM_MspPostInit+0xd8>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	4a2c      	ldr	r2, [pc, #176]	; (800105c <HAL_TIM_MspPostInit+0xd8>)
 8000fac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fb0:	6153      	str	r3, [r2, #20]
 8000fb2:	4b2a      	ldr	r3, [pc, #168]	; (800105c <HAL_TIM_MspPostInit+0xd8>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	4b27      	ldr	r3, [pc, #156]	; (800105c <HAL_TIM_MspPostInit+0xd8>)
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	4a26      	ldr	r2, [pc, #152]	; (800105c <HAL_TIM_MspPostInit+0xd8>)
 8000fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc8:	6153      	str	r3, [r2, #20]
 8000fca:	4b24      	ldr	r3, [pc, #144]	; (800105c <HAL_TIM_MspPostInit+0xd8>)
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	4b21      	ldr	r3, [pc, #132]	; (800105c <HAL_TIM_MspPostInit+0xd8>)
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	4a20      	ldr	r2, [pc, #128]	; (800105c <HAL_TIM_MspPostInit+0xd8>)
 8000fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fe0:	6153      	str	r3, [r2, #20]
 8000fe2:	4b1e      	ldr	r3, [pc, #120]	; (800105c <HAL_TIM_MspPostInit+0xd8>)
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> TIM1_CH4
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000fee:	230f      	movs	r3, #15
 8000ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000ffe:	2302      	movs	r3, #2
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4619      	mov	r1, r3
 8001008:	4815      	ldr	r0, [pc, #84]	; (8001060 <HAL_TIM_MspPostInit+0xdc>)
 800100a:	f001 faed 	bl	80025e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800100e:	2380      	movs	r3, #128	; 0x80
 8001010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001016:	2301      	movs	r3, #1
 8001018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800101e:	2306      	movs	r3, #6
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4619      	mov	r1, r3
 8001028:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102c:	f001 fadc 	bl	80025e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001030:	2303      	movs	r3, #3
 8001032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001038:	2301      	movs	r3, #1
 800103a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001040:	2306      	movs	r3, #6
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	4619      	mov	r1, r3
 800104a:	4806      	ldr	r0, [pc, #24]	; (8001064 <HAL_TIM_MspPostInit+0xe0>)
 800104c:	f001 facc 	bl	80025e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001050:	bf00      	nop
 8001052:	3728      	adds	r7, #40	; 0x28
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40012c00 	.word	0x40012c00
 800105c:	40021000 	.word	0x40021000
 8001060:	48000800 	.word	0x48000800
 8001064:	48000400 	.word	0x48000400

08001068 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a1b      	ldr	r2, [pc, #108]	; (80010f4 <HAL_UART_MspInit+0x8c>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d12f      	bne.n	80010ea <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800108a:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <HAL_UART_MspInit+0x90>)
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	4a1a      	ldr	r2, [pc, #104]	; (80010f8 <HAL_UART_MspInit+0x90>)
 8001090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001094:	6193      	str	r3, [r2, #24]
 8001096:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <HAL_UART_MspInit+0x90>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <HAL_UART_MspInit+0x90>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	4a14      	ldr	r2, [pc, #80]	; (80010f8 <HAL_UART_MspInit+0x90>)
 80010a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80010ac:	6153      	str	r3, [r2, #20]
 80010ae:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_UART_MspInit+0x90>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80010ba:	2330      	movs	r3, #48	; 0x30
 80010bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010ca:	2307      	movs	r3, #7
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	4619      	mov	r1, r3
 80010d4:	4809      	ldr	r0, [pc, #36]	; (80010fc <HAL_UART_MspInit+0x94>)
 80010d6:	f001 fa87 	bl	80025e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2100      	movs	r1, #0
 80010de:	2025      	movs	r0, #37	; 0x25
 80010e0:	f001 f877 	bl	80021d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010e4:	2025      	movs	r0, #37	; 0x25
 80010e6:	f001 f890 	bl	800220a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010ea:	bf00      	nop
 80010ec:	3728      	adds	r7, #40	; 0x28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40013800 	.word	0x40013800
 80010f8:	40021000 	.word	0x40021000
 80010fc:	48000800 	.word	0x48000800

08001100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <HardFault_Handler+0x4>

08001114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <MemManage_Handler+0x4>

0800111a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <BusFault_Handler+0x4>

08001120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <UsageFault_Handler+0x4>

08001126 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  //{
  //  toggleLED();
  //  cnt = 0;
  //}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001154:	f000 f906 	bl	8001364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}

0800115c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001170:	4802      	ldr	r0, [pc, #8]	; (800117c <DMA1_Channel1_IRQHandler+0x10>)
 8001172:	f001 f948 	bl	8002406 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000078 	.word	0x20000078

08001180 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001186:	f003 f869 	bl	800425c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */
  //resetPin();
  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200000bc 	.word	0x200000bc

08001194 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001198:	4802      	ldr	r0, [pc, #8]	; (80011a4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800119a:	f003 f85f 	bl	800425c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  //togglePin();

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200000bc 	.word	0x200000bc

080011a8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011ac:	4802      	ldr	r0, [pc, #8]	; (80011b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80011ae:	f003 f855 	bl	800425c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200000bc 	.word	0x200000bc

080011bc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
   //togglePin();
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <TIM1_CC_IRQHandler+0x10>)
 80011c2:	f003 f84b 	bl	800425c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200000bc 	.word	0x200000bc

080011d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <TIM2_IRQHandler+0x10>)
 80011d6:	f003 f841 	bl	800425c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  //resetPin();
  //togglePin();
  /* USER CODE END TIM2_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200000fc 	.word	0x200000fc

080011e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011e8:	4802      	ldr	r0, [pc, #8]	; (80011f4 <USART1_IRQHandler+0x10>)
 80011ea:	f004 fa17 	bl	800561c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000017c 	.word	0x2000017c

080011f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80011fc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001200:	f001 fb96 	bl	8002930 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}

08001208 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  toggleLED();
 800120c:	f7ff f97a 	bl	8000504 <toggleLED>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001210:	480e      	ldr	r0, [pc, #56]	; (800124c <TIM6_DAC_IRQHandler+0x44>)
 8001212:	f003 f823 	bl	800425c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  static float duty = 0.0F;
  //setDuty(TIM2, duty);
  duty += 10.0F;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <TIM6_DAC_IRQHandler+0x48>)
 8001218:	edd3 7a00 	vldr	s15, [r3]
 800121c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001220:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001224:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <TIM6_DAC_IRQHandler+0x48>)
 8001226:	edc3 7a00 	vstr	s15, [r3]
  if (duty > 100.0F)
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <TIM6_DAC_IRQHandler+0x48>)
 800122c:	edd3 7a00 	vldr	s15, [r3]
 8001230:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001254 <TIM6_DAC_IRQHandler+0x4c>
 8001234:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800123c:	dc00      	bgt.n	8001240 <TIM6_DAC_IRQHandler+0x38>
      duty = 0.0F;
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800123e:	e003      	b.n	8001248 <TIM6_DAC_IRQHandler+0x40>
      duty = 0.0F;
 8001240:	4b03      	ldr	r3, [pc, #12]	; (8001250 <TIM6_DAC_IRQHandler+0x48>)
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	2000013c 	.word	0x2000013c
 8001250:	20000204 	.word	0x20000204
 8001254:	42c80000 	.word	0x42c80000

08001258 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <SystemInit+0x28>)
 800125e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001262:	4a07      	ldr	r2, [pc, #28]	; (8001280 <SystemInit+0x28>)
 8001264:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001268:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <SystemInit+0x28>)
 800126e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001272:	609a      	str	r2, [r3, #8]
#endif
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001284:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012bc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001288:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800128a:	e003      	b.n	8001294 <LoopCopyDataInit>

0800128c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800128e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001290:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001292:	3104      	adds	r1, #4

08001294 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001294:	480b      	ldr	r0, [pc, #44]	; (80012c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001298:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800129a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800129c:	d3f6      	bcc.n	800128c <CopyDataInit>
	ldr	r2, =_sbss
 800129e:	4a0b      	ldr	r2, [pc, #44]	; (80012cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80012a0:	e002      	b.n	80012a8 <LoopFillZerobss>

080012a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80012a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80012a4:	f842 3b04 	str.w	r3, [r2], #4

080012a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <LoopForever+0x16>)
	cmp	r2, r3
 80012aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80012ac:	d3f9      	bcc.n	80012a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012ae:	f7ff ffd3 	bl	8001258 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012b2:	f004 fe4b 	bl	8005f4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012b6:	f7ff f931 	bl	800051c <main>

080012ba <LoopForever>:

LoopForever:
    b LoopForever
 80012ba:	e7fe      	b.n	80012ba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012bc:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 80012c0:	08005ffc 	.word	0x08005ffc
	ldr	r0, =_sdata
 80012c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80012c8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80012cc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80012d0:	2000020c 	.word	0x2000020c

080012d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012d4:	e7fe      	b.n	80012d4 <ADC1_IRQHandler>
	...

080012d8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <HAL_Init+0x28>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a07      	ldr	r2, [pc, #28]	; (8001300 <HAL_Init+0x28>)
 80012e2:	f043 0310 	orr.w	r3, r3, #16
 80012e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e8:	2003      	movs	r0, #3
 80012ea:	f000 ff67 	bl	80021bc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ee:	2000      	movs	r0, #0
 80012f0:	f000 f808 	bl	8001304 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f4:	f7ff fd3c 	bl	8000d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40022000 	.word	0x40022000

08001304 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_InitTick+0x54>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_InitTick+0x58>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	4619      	mov	r1, r3
 8001316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131a:	fbb3 f3f1 	udiv	r3, r3, r1
 800131e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f000 ff7f 	bl	8002226 <HAL_SYSTICK_Config>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e00e      	b.n	8001350 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b0f      	cmp	r3, #15
 8001336:	d80a      	bhi.n	800134e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001338:	2200      	movs	r2, #0
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	f04f 30ff 	mov.w	r0, #4294967295
 8001340:	f000 ff47 	bl	80021d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001344:	4a06      	ldr	r2, [pc, #24]	; (8001360 <HAL_InitTick+0x5c>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	e000      	b.n	8001350 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
}
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000000 	.word	0x20000000
 800135c:	20000008 	.word	0x20000008
 8001360:	20000004 	.word	0x20000004

08001364 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_IncTick+0x20>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_IncTick+0x24>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4413      	add	r3, r2
 8001374:	4a04      	ldr	r2, [pc, #16]	; (8001388 <HAL_IncTick+0x24>)
 8001376:	6013      	str	r3, [r2, #0]
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20000008 	.word	0x20000008
 8001388:	20000208 	.word	0x20000208

0800138c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001390:	4b03      	ldr	r3, [pc, #12]	; (80013a0 <HAL_GetTick+0x14>)
 8001392:	681b      	ldr	r3, [r3, #0]
}
 8001394:	4618      	mov	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	20000208 	.word	0x20000208

080013a4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013ac:	f7ff ffee 	bl	800138c <HAL_GetTick>
 80013b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013bc:	d005      	beq.n	80013ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <HAL_Delay+0x40>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	461a      	mov	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4413      	add	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80013ca:	bf00      	nop
 80013cc:	f7ff ffde 	bl	800138c <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d8f7      	bhi.n	80013cc <HAL_Delay+0x28>
  {
  }
}
 80013dc:	bf00      	nop
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000008 	.word	0x20000008

080013e8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b09a      	sub	sp, #104	; 0x68
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001432:	2300      	movs	r3, #0
 8001434:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001436:	2300      	movs	r3, #0
 8001438:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e169      	b.n	8001718 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f003 0310 	and.w	r3, r3, #16
 8001452:	2b00      	cmp	r3, #0
 8001454:	d176      	bne.n	8001544 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	2b00      	cmp	r3, #0
 800145c:	d152      	bne.n	8001504 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff fca5 	bl	8000dc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d13b      	bne.n	8001504 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 fd65 	bl	8001f5c <ADC_Disable>
 8001492:	4603      	mov	r3, r0
 8001494:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	f003 0310 	and.w	r3, r3, #16
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d12f      	bne.n	8001504 <HAL_ADC_Init+0xe0>
 80014a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d12b      	bne.n	8001504 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014b4:	f023 0302 	bic.w	r3, r3, #2
 80014b8:	f043 0202 	orr.w	r2, r3, #2
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014ce:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014de:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014e0:	4b8f      	ldr	r3, [pc, #572]	; (8001720 <HAL_ADC_Init+0x2fc>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a8f      	ldr	r2, [pc, #572]	; (8001724 <HAL_ADC_Init+0x300>)
 80014e6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ea:	0c9a      	lsrs	r2, r3, #18
 80014ec:	4613      	mov	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014f6:	e002      	b.n	80014fe <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1f9      	bne.n	80014f8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d007      	beq.n	8001522 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800151c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001520:	d110      	bne.n	8001544 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f023 0312 	bic.w	r3, r3, #18
 800152a:	f043 0210 	orr.w	r2, r3, #16
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	f043 0201 	orr.w	r2, r3, #1
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	f003 0310 	and.w	r3, r3, #16
 800154c:	2b00      	cmp	r3, #0
 800154e:	f040 80d6 	bne.w	80016fe <HAL_ADC_Init+0x2da>
 8001552:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001556:	2b00      	cmp	r3, #0
 8001558:	f040 80d1 	bne.w	80016fe <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001566:	2b00      	cmp	r3, #0
 8001568:	f040 80c9 	bne.w	80016fe <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001574:	f043 0202 	orr.w	r2, r3, #2
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800157c:	4b6a      	ldr	r3, [pc, #424]	; (8001728 <HAL_ADC_Init+0x304>)
 800157e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001580:	2300      	movs	r3, #0
 8001582:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	2b01      	cmp	r3, #1
 8001590:	d108      	bne.n	80015a4 <HAL_ADC_Init+0x180>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	2b01      	cmp	r3, #1
 800159e:	d101      	bne.n	80015a4 <HAL_ADC_Init+0x180>
 80015a0:	2301      	movs	r3, #1
 80015a2:	e000      	b.n	80015a6 <HAL_ADC_Init+0x182>
 80015a4:	2300      	movs	r3, #0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d11c      	bne.n	80015e4 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015aa:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d010      	beq.n	80015d2 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d107      	bne.n	80015cc <HAL_ADC_Init+0x1a8>
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d101      	bne.n	80015cc <HAL_ADC_Init+0x1a8>
 80015c8:	2301      	movs	r3, #1
 80015ca:	e000      	b.n	80015ce <HAL_ADC_Init+0x1aa>
 80015cc:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d108      	bne.n	80015e4 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80015d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	431a      	orrs	r2, r3
 80015e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015e2:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7e5b      	ldrb	r3, [r3, #25]
 80015e8:	035b      	lsls	r3, r3, #13
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015ee:	2a01      	cmp	r2, #1
 80015f0:	d002      	beq.n	80015f8 <HAL_ADC_Init+0x1d4>
 80015f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015f6:	e000      	b.n	80015fa <HAL_ADC_Init+0x1d6>
 80015f8:	2200      	movs	r2, #0
 80015fa:	431a      	orrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	431a      	orrs	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	4313      	orrs	r3, r2
 8001608:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800160a:	4313      	orrs	r3, r2
 800160c:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d11b      	bne.n	8001650 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	7e5b      	ldrb	r3, [r3, #25]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d109      	bne.n	8001634 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001624:	3b01      	subs	r3, #1
 8001626:	045a      	lsls	r2, r3, #17
 8001628:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800162a:	4313      	orrs	r3, r2
 800162c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001630:	663b      	str	r3, [r7, #96]	; 0x60
 8001632:	e00d      	b.n	8001650 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800163c:	f043 0220 	orr.w	r2, r3, #32
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001648:	f043 0201 	orr.w	r2, r3, #1
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	2b01      	cmp	r3, #1
 8001656:	d007      	beq.n	8001668 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001660:	4313      	orrs	r3, r2
 8001662:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001664:	4313      	orrs	r3, r2
 8001666:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	2b00      	cmp	r3, #0
 8001674:	d114      	bne.n	80016a0 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6812      	ldr	r2, [r2, #0]
 8001680:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001684:	f023 0302 	bic.w	r3, r3, #2
 8001688:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	7e1b      	ldrb	r3, [r3, #24]
 800168e:	039a      	lsls	r2, r3, #14
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	4313      	orrs	r3, r2
 800169a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800169c:	4313      	orrs	r3, r2
 800169e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68da      	ldr	r2, [r3, #12]
 80016a6:	4b21      	ldr	r3, [pc, #132]	; (800172c <HAL_ADC_Init+0x308>)
 80016a8:	4013      	ands	r3, r2
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80016b0:	430b      	orrs	r3, r1
 80016b2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d10c      	bne.n	80016d6 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f023 010f 	bic.w	r1, r3, #15
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	1e5a      	subs	r2, r3, #1
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	631a      	str	r2, [r3, #48]	; 0x30
 80016d4:	e007      	b.n	80016e6 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 020f 	bic.w	r2, r2, #15
 80016e4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	f023 0303 	bic.w	r3, r3, #3
 80016f4:	f043 0201 	orr.w	r2, r3, #1
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	641a      	str	r2, [r3, #64]	; 0x40
 80016fc:	e00a      	b.n	8001714 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	f023 0312 	bic.w	r3, r3, #18
 8001706:	f043 0210 	orr.w	r2, r3, #16
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800170e:	2301      	movs	r3, #1
 8001710:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001714:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001718:	4618      	mov	r0, r3
 800171a:	3768      	adds	r7, #104	; 0x68
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000000 	.word	0x20000000
 8001724:	431bde83 	.word	0x431bde83
 8001728:	50000300 	.word	0x50000300
 800172c:	fff0c007 	.word	0xfff0c007

08001730 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800173c:	2300      	movs	r3, #0
 800173e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	2b00      	cmp	r3, #0
 800174c:	d17e      	bne.n	800184c <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001754:	2b01      	cmp	r3, #1
 8001756:	d101      	bne.n	800175c <HAL_ADC_Start_DMA+0x2c>
 8001758:	2302      	movs	r3, #2
 800175a:	e07a      	b.n	8001852 <HAL_ADC_Start_DMA+0x122>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f000 fb9b 	bl	8001ea0 <ADC_Enable>
 800176a:	4603      	mov	r3, r0
 800176c:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800176e:	7dfb      	ldrb	r3, [r7, #23]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d166      	bne.n	8001842 <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800177c:	f023 0301 	bic.w	r3, r3, #1
 8001780:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	641a      	str	r2, [r3, #64]	; 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d007      	beq.n	80017b2 <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	641a      	str	r2, [r3, #64]	; 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017be:	d106      	bne.n	80017ce <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c4:	f023 0206 	bic.w	r2, r3, #6
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	645a      	str	r2, [r3, #68]	; 0x44
 80017cc:	e002      	b.n	80017d4 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2200      	movs	r2, #0
 80017d2:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e0:	4a1e      	ldr	r2, [pc, #120]	; (800185c <HAL_ADC_Start_DMA+0x12c>)
 80017e2:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e8:	4a1d      	ldr	r2, [pc, #116]	; (8001860 <HAL_ADC_Start_DMA+0x130>)
 80017ea:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f0:	4a1c      	ldr	r2, [pc, #112]	; (8001864 <HAL_ADC_Start_DMA+0x134>)
 80017f2:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	221c      	movs	r2, #28
 80017fa:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f042 0210 	orr.w	r2, r2, #16
 800180a:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68da      	ldr	r2, [r3, #12]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f042 0201 	orr.w	r2, r2, #1
 800181a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	3340      	adds	r3, #64	; 0x40
 8001826:	4619      	mov	r1, r3
 8001828:	68ba      	ldr	r2, [r7, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f000 fd4e 	bl	80022cc <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0204 	orr.w	r2, r2, #4
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	e006      	b.n	8001850 <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800184a:	e001      	b.n	8001850 <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800184c:	2302      	movs	r3, #2
 800184e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001850:	7dfb      	ldrb	r3, [r7, #23]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	08001dd5 	.word	0x08001dd5
 8001860:	08001e4f 	.word	0x08001e4f
 8001864:	08001e6b 	.word	0x08001e6b

08001868 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001868:	b480      	push	{r7}
 800186a:	b09b      	sub	sp, #108	; 0x6c
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001872:	2300      	movs	r3, #0
 8001874:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001878:	2300      	movs	r3, #0
 800187a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001882:	2b01      	cmp	r3, #1
 8001884:	d101      	bne.n	800188a <HAL_ADC_ConfigChannel+0x22>
 8001886:	2302      	movs	r3, #2
 8001888:	e299      	b.n	8001dbe <HAL_ADC_ConfigChannel+0x556>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2201      	movs	r2, #1
 800188e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	f040 827d 	bne.w	8001d9c <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	d81c      	bhi.n	80018e4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	4613      	mov	r3, r2
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4413      	add	r3, r2
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	461a      	mov	r2, r3
 80018be:	231f      	movs	r3, #31
 80018c0:	4093      	lsls	r3, r2
 80018c2:	43db      	mvns	r3, r3
 80018c4:	4019      	ands	r1, r3
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	6818      	ldr	r0, [r3, #0]
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4413      	add	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	fa00 f203 	lsl.w	r2, r0, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	631a      	str	r2, [r3, #48]	; 0x30
 80018e2:	e063      	b.n	80019ac <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b09      	cmp	r3, #9
 80018ea:	d81e      	bhi.n	800192a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685a      	ldr	r2, [r3, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	4413      	add	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	3b1e      	subs	r3, #30
 8001900:	221f      	movs	r2, #31
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	4019      	ands	r1, r3
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	6818      	ldr	r0, [r3, #0]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	4413      	add	r3, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	3b1e      	subs	r3, #30
 800191c:	fa00 f203 	lsl.w	r2, r0, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	430a      	orrs	r2, r1
 8001926:	635a      	str	r2, [r3, #52]	; 0x34
 8001928:	e040      	b.n	80019ac <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b0e      	cmp	r3, #14
 8001930:	d81e      	bhi.n	8001970 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4413      	add	r3, r2
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	3b3c      	subs	r3, #60	; 0x3c
 8001946:	221f      	movs	r2, #31
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	4019      	ands	r1, r3
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	6818      	ldr	r0, [r3, #0]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	4613      	mov	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4413      	add	r3, r2
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	3b3c      	subs	r3, #60	; 0x3c
 8001962:	fa00 f203 	lsl.w	r2, r0, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	639a      	str	r2, [r3, #56]	; 0x38
 800196e:	e01d      	b.n	80019ac <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	4413      	add	r3, r2
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	3b5a      	subs	r3, #90	; 0x5a
 8001984:	221f      	movs	r2, #31
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43db      	mvns	r3, r3
 800198c:	4019      	ands	r1, r3
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	6818      	ldr	r0, [r3, #0]
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	4613      	mov	r3, r2
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	4413      	add	r3, r2
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	3b5a      	subs	r3, #90	; 0x5a
 80019a0:	fa00 f203 	lsl.w	r2, r0, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	430a      	orrs	r2, r1
 80019aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 030c 	and.w	r3, r3, #12
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f040 80e5 	bne.w	8001b86 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b09      	cmp	r3, #9
 80019c2:	d91c      	bls.n	80019fe <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6999      	ldr	r1, [r3, #24]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	4613      	mov	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4413      	add	r3, r2
 80019d4:	3b1e      	subs	r3, #30
 80019d6:	2207      	movs	r2, #7
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	4019      	ands	r1, r3
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	6898      	ldr	r0, [r3, #8]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4613      	mov	r3, r2
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4413      	add	r3, r2
 80019ee:	3b1e      	subs	r3, #30
 80019f0:	fa00 f203 	lsl.w	r2, r0, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	619a      	str	r2, [r3, #24]
 80019fc:	e019      	b.n	8001a32 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6959      	ldr	r1, [r3, #20]
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4413      	add	r3, r2
 8001a0e:	2207      	movs	r2, #7
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	4019      	ands	r1, r3
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	6898      	ldr	r0, [r3, #8]
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4613      	mov	r3, r2
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	4413      	add	r3, r2
 8001a26:	fa00 f203 	lsl.w	r2, r0, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	695a      	ldr	r2, [r3, #20]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	08db      	lsrs	r3, r3, #3
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	d84f      	bhi.n	8001af4 <HAL_ADC_ConfigChannel+0x28c>
 8001a54:	a201      	add	r2, pc, #4	; (adr r2, 8001a5c <HAL_ADC_ConfigChannel+0x1f4>)
 8001a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a5a:	bf00      	nop
 8001a5c:	08001a6d 	.word	0x08001a6d
 8001a60:	08001a8f 	.word	0x08001a8f
 8001a64:	08001ab1 	.word	0x08001ab1
 8001a68:	08001ad3 	.word	0x08001ad3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a72:	4b99      	ldr	r3, [pc, #612]	; (8001cd8 <HAL_ADC_ConfigChannel+0x470>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	6812      	ldr	r2, [r2, #0]
 8001a7a:	0691      	lsls	r1, r2, #26
 8001a7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	431a      	orrs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a8a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a8c:	e07e      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a94:	4b90      	ldr	r3, [pc, #576]	; (8001cd8 <HAL_ADC_ConfigChannel+0x470>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	0691      	lsls	r1, r2, #26
 8001a9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001aac:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001aae:	e06d      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001ab6:	4b88      	ldr	r3, [pc, #544]	; (8001cd8 <HAL_ADC_ConfigChannel+0x470>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	6812      	ldr	r2, [r2, #0]
 8001abe:	0691      	lsls	r1, r2, #26
 8001ac0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ace:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ad0:	e05c      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ad8:	4b7f      	ldr	r3, [pc, #508]	; (8001cd8 <HAL_ADC_ConfigChannel+0x470>)
 8001ada:	4013      	ands	r3, r2
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	0691      	lsls	r1, r2, #26
 8001ae2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001af0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001af2:	e04b      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001afa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	069b      	lsls	r3, r3, #26
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d107      	bne.n	8001b18 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b16:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	069b      	lsls	r3, r3, #26
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d107      	bne.n	8001b3c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b3a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	069b      	lsls	r3, r3, #26
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d107      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b5e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	069b      	lsls	r3, r3, #26
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d10a      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b82:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001b84:	e001      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001b86:	bf00      	nop
 8001b88:	e000      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x324>
      break;
 8001b8a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d108      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x344>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d101      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x344>
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e000      	b.n	8001bae <HAL_ADC_ConfigChannel+0x346>
 8001bac:	2300      	movs	r3, #0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f040 80ff 	bne.w	8001db2 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d00f      	beq.n	8001bdc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43da      	mvns	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	400a      	ands	r2, r1
 8001bd6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001bda:	e049      	b.n	8001c70 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2201      	movs	r2, #1
 8001bea:	409a      	lsls	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2b09      	cmp	r3, #9
 8001bfc:	d91c      	bls.n	8001c38 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6999      	ldr	r1, [r3, #24]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3b1b      	subs	r3, #27
 8001c10:	2207      	movs	r2, #7
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	4019      	ands	r1, r3
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	6898      	ldr	r0, [r3, #8]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	4613      	mov	r3, r2
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	4413      	add	r3, r2
 8001c28:	3b1b      	subs	r3, #27
 8001c2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	619a      	str	r2, [r3, #24]
 8001c36:	e01b      	b.n	8001c70 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6959      	ldr	r1, [r3, #20]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	4613      	mov	r3, r2
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	4413      	add	r3, r2
 8001c4a:	2207      	movs	r2, #7
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	4019      	ands	r1, r3
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	6898      	ldr	r0, [r3, #8]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	1c5a      	adds	r2, r3, #1
 8001c5e:	4613      	mov	r3, r2
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	4413      	add	r3, r2
 8001c64:	fa00 f203 	lsl.w	r2, r0, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c70:	4b1a      	ldr	r3, [pc, #104]	; (8001cdc <HAL_ADC_ConfigChannel+0x474>)
 8001c72:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b10      	cmp	r3, #16
 8001c7a:	d105      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001c7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d014      	beq.n	8001cb2 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001c8c:	2b11      	cmp	r3, #17
 8001c8e:	d105      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001c90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d00a      	beq.n	8001cb2 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001ca0:	2b12      	cmp	r3, #18
 8001ca2:	f040 8086 	bne.w	8001db2 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001ca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d17f      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d10d      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x478>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d106      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x478>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e005      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x47a>
 8001cd6:	bf00      	nop
 8001cd8:	83fff000 	.word	0x83fff000
 8001cdc:	50000300 	.word	0x50000300
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d150      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ce6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d010      	beq.n	8001d0e <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d107      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x4a0>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d101      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x4a0>
 8001d04:	2301      	movs	r3, #1
 8001d06:	e000      	b.n	8001d0a <HAL_ADC_ConfigChannel+0x4a2>
 8001d08:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d13c      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b10      	cmp	r3, #16
 8001d14:	d11d      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x4ea>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d1e:	d118      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d2a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d2c:	4b27      	ldr	r3, [pc, #156]	; (8001dcc <HAL_ADC_ConfigChannel+0x564>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a27      	ldr	r2, [pc, #156]	; (8001dd0 <HAL_ADC_ConfigChannel+0x568>)
 8001d32:	fba2 2303 	umull	r2, r3, r2, r3
 8001d36:	0c9a      	lsrs	r2, r3, #18
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d42:	e002      	b.n	8001d4a <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1f9      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d50:	e02e      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2b11      	cmp	r3, #17
 8001d58:	d10b      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x50a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d62:	d106      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001d6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d6e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d70:	e01e      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b12      	cmp	r3, #18
 8001d78:	d11a      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001d7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d84:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d86:	e013      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	f043 0220 	orr.w	r2, r3, #32
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001d9a:	e00a      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	f043 0220 	orr.w	r2, r3, #32
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001dae:	e000      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001db0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001dba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	376c      	adds	r7, #108	; 0x6c
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	431bde83 	.word	0x431bde83

08001dd4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d126      	bne.n	8001e3c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d115      	bne.n	8001e34 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d111      	bne.n	8001e34 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d105      	bne.n	8001e34 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	f043 0201 	orr.w	r2, r3, #1
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f7ff fad7 	bl	80013e8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001e3a:	e004      	b.n	8001e46 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	4798      	blx	r3
}
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b084      	sub	sp, #16
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f7ff facd 	bl	80013fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001e62:	bf00      	nop
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b084      	sub	sp, #16
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e88:	f043 0204 	orr.w	r2, r3, #4
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f7ff fabd 	bl	8001410 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e96:	bf00      	nop
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d108      	bne.n	8001ecc <ADC_Enable+0x2c>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <ADC_Enable+0x2c>
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e000      	b.n	8001ece <ADC_Enable+0x2e>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d13c      	bne.n	8001f4c <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	4b1f      	ldr	r3, [pc, #124]	; (8001f58 <ADC_Enable+0xb8>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00d      	beq.n	8001efc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	f043 0210 	orr.w	r2, r3, #16
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef0:	f043 0201 	orr.w	r2, r3, #1
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e028      	b.n	8001f4e <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689a      	ldr	r2, [r3, #8]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0201 	orr.w	r2, r2, #1
 8001f0a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001f0c:	f7ff fa3e 	bl	800138c <HAL_GetTick>
 8001f10:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f12:	e014      	b.n	8001f3e <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f14:	f7ff fa3a 	bl	800138c <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d90d      	bls.n	8001f3e <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	f043 0210 	orr.w	r2, r3, #16
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f32:	f043 0201 	orr.w	r2, r3, #1
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e007      	b.n	8001f4e <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d1e3      	bne.n	8001f14 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	8000003f 	.word	0x8000003f

08001f5c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d108      	bne.n	8001f88 <ADC_Disable+0x2c>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d101      	bne.n	8001f88 <ADC_Disable+0x2c>
 8001f84:	2301      	movs	r3, #1
 8001f86:	e000      	b.n	8001f8a <ADC_Disable+0x2e>
 8001f88:	2300      	movs	r3, #0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d040      	beq.n	8002010 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 030d 	and.w	r3, r3, #13
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d10f      	bne.n	8001fbc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0202 	orr.w	r2, r2, #2
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001fb4:	f7ff f9ea 	bl	800138c <HAL_GetTick>
 8001fb8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001fba:	e022      	b.n	8002002 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	f043 0210 	orr.w	r2, r3, #16
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fcc:	f043 0201 	orr.w	r2, r3, #1
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e01c      	b.n	8002012 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fd8:	f7ff f9d8 	bl	800138c <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d90d      	bls.n	8002002 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	f043 0210 	orr.w	r2, r3, #16
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff6:	f043 0201 	orr.w	r2, r3, #1
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e007      	b.n	8002012 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b01      	cmp	r3, #1
 800200e:	d0e3      	beq.n	8001fd8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800202c:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <__NVIC_SetPriorityGrouping+0x44>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002038:	4013      	ands	r3, r2
 800203a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800204c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800204e:	4a04      	ldr	r2, [pc, #16]	; (8002060 <__NVIC_SetPriorityGrouping+0x44>)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	60d3      	str	r3, [r2, #12]
}
 8002054:	bf00      	nop
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002068:	4b04      	ldr	r3, [pc, #16]	; (800207c <__NVIC_GetPriorityGrouping+0x18>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	0a1b      	lsrs	r3, r3, #8
 800206e:	f003 0307 	and.w	r3, r3, #7
}
 8002072:	4618      	mov	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	2b00      	cmp	r3, #0
 8002090:	db0b      	blt.n	80020aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	f003 021f 	and.w	r2, r3, #31
 8002098:	4907      	ldr	r1, [pc, #28]	; (80020b8 <__NVIC_EnableIRQ+0x38>)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	095b      	lsrs	r3, r3, #5
 80020a0:	2001      	movs	r0, #1
 80020a2:	fa00 f202 	lsl.w	r2, r0, r2
 80020a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	e000e100 	.word	0xe000e100

080020bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	6039      	str	r1, [r7, #0]
 80020c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	db0a      	blt.n	80020e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	490c      	ldr	r1, [pc, #48]	; (8002108 <__NVIC_SetPriority+0x4c>)
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	0112      	lsls	r2, r2, #4
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	440b      	add	r3, r1
 80020e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e4:	e00a      	b.n	80020fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	4908      	ldr	r1, [pc, #32]	; (800210c <__NVIC_SetPriority+0x50>)
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	3b04      	subs	r3, #4
 80020f4:	0112      	lsls	r2, r2, #4
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	440b      	add	r3, r1
 80020fa:	761a      	strb	r2, [r3, #24]
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	e000e100 	.word	0xe000e100
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002110:	b480      	push	{r7}
 8002112:	b089      	sub	sp, #36	; 0x24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f1c3 0307 	rsb	r3, r3, #7
 800212a:	2b04      	cmp	r3, #4
 800212c:	bf28      	it	cs
 800212e:	2304      	movcs	r3, #4
 8002130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3304      	adds	r3, #4
 8002136:	2b06      	cmp	r3, #6
 8002138:	d902      	bls.n	8002140 <NVIC_EncodePriority+0x30>
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3b03      	subs	r3, #3
 800213e:	e000      	b.n	8002142 <NVIC_EncodePriority+0x32>
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002144:	f04f 32ff 	mov.w	r2, #4294967295
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43da      	mvns	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	401a      	ands	r2, r3
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002158:	f04f 31ff 	mov.w	r1, #4294967295
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	fa01 f303 	lsl.w	r3, r1, r3
 8002162:	43d9      	mvns	r1, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002168:	4313      	orrs	r3, r2
         );
}
 800216a:	4618      	mov	r0, r3
 800216c:	3724      	adds	r7, #36	; 0x24
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
	...

08002178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3b01      	subs	r3, #1
 8002184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002188:	d301      	bcc.n	800218e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800218a:	2301      	movs	r3, #1
 800218c:	e00f      	b.n	80021ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800218e:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <SysTick_Config+0x40>)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3b01      	subs	r3, #1
 8002194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002196:	210f      	movs	r1, #15
 8002198:	f04f 30ff 	mov.w	r0, #4294967295
 800219c:	f7ff ff8e 	bl	80020bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021a0:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <SysTick_Config+0x40>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021a6:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <SysTick_Config+0x40>)
 80021a8:	2207      	movs	r2, #7
 80021aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	e000e010 	.word	0xe000e010

080021bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff ff29 	bl	800201c <__NVIC_SetPriorityGrouping>
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b086      	sub	sp, #24
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	4603      	mov	r3, r0
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	607a      	str	r2, [r7, #4]
 80021de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021e4:	f7ff ff3e 	bl	8002064 <__NVIC_GetPriorityGrouping>
 80021e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	68b9      	ldr	r1, [r7, #8]
 80021ee:	6978      	ldr	r0, [r7, #20]
 80021f0:	f7ff ff8e 	bl	8002110 <NVIC_EncodePriority>
 80021f4:	4602      	mov	r2, r0
 80021f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021fa:	4611      	mov	r1, r2
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff5d 	bl	80020bc <__NVIC_SetPriority>
}
 8002202:	bf00      	nop
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	4603      	mov	r3, r0
 8002212:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff ff31 	bl	8002080 <__NVIC_EnableIRQ>
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7ff ffa2 	bl	8002178 <SysTick_Config>
 8002234:	4603      	mov	r3, r0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800223e:	b580      	push	{r7, lr}
 8002240:	b084      	sub	sp, #16
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e037      	b.n	80022c4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2202      	movs	r2, #2
 8002258:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800226a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800226e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002278:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002284:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002290:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	4313      	orrs	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f97e 	bl	80025a8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}  
 80022c4:	4618      	mov	r0, r3
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
 80022d8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_DMA_Start_IT+0x20>
 80022e8:	2302      	movs	r3, #2
 80022ea:	e04a      	b.n	8002382 <HAL_DMA_Start_IT+0xb6>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d13a      	bne.n	8002374 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2202      	movs	r2, #2
 8002302:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0201 	bic.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68b9      	ldr	r1, [r7, #8]
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 f912 	bl	800254c <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f042 020e 	orr.w	r2, r2, #14
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	e00f      	b.n	8002362 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f042 020a 	orr.w	r2, r2, #10
 8002350:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 0204 	bic.w	r2, r2, #4
 8002360:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f042 0201 	orr.w	r2, r2, #1
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	e005      	b.n	8002380 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800237c:	2302      	movs	r3, #2
 800237e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002380:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002382:	4618      	mov	r0, r3
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800238a:	b580      	push	{r7, lr}
 800238c:	b084      	sub	sp, #16
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800239c:	2b02      	cmp	r3, #2
 800239e:	d005      	beq.n	80023ac <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2204      	movs	r2, #4
 80023a4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	73fb      	strb	r3, [r7, #15]
 80023aa:	e027      	b.n	80023fc <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 020e 	bic.w	r2, r2, #14
 80023ba:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0201 	bic.w	r2, r2, #1
 80023ca:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d4:	2101      	movs	r1, #1
 80023d6:	fa01 f202 	lsl.w	r2, r1, r2
 80023da:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	4798      	blx	r3
    } 
  }
  return status;
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b084      	sub	sp, #16
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	2204      	movs	r2, #4
 8002424:	409a      	lsls	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4013      	ands	r3, r2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d024      	beq.n	8002478 <HAL_DMA_IRQHandler+0x72>
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	d01f      	beq.n	8002478 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0320 	and.w	r3, r3, #32
 8002442:	2b00      	cmp	r3, #0
 8002444:	d107      	bne.n	8002456 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 0204 	bic.w	r2, r2, #4
 8002454:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245e:	2104      	movs	r1, #4
 8002460:	fa01 f202 	lsl.w	r2, r1, r2
 8002464:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246a:	2b00      	cmp	r3, #0
 800246c:	d06a      	beq.n	8002544 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002476:	e065      	b.n	8002544 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	2202      	movs	r2, #2
 800247e:	409a      	lsls	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4013      	ands	r3, r2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d02c      	beq.n	80024e2 <HAL_DMA_IRQHandler+0xdc>
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d027      	beq.n	80024e2 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0320 	and.w	r3, r3, #32
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10b      	bne.n	80024b8 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 020a 	bic.w	r2, r2, #10
 80024ae:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c0:	2102      	movs	r1, #2
 80024c2:	fa01 f202 	lsl.w	r2, r1, r2
 80024c6:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d035      	beq.n	8002544 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80024e0:	e030      	b.n	8002544 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	2208      	movs	r2, #8
 80024e8:	409a      	lsls	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d028      	beq.n	8002544 <HAL_DMA_IRQHandler+0x13e>
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d023      	beq.n	8002544 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 020e 	bic.w	r2, r2, #14
 800250a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002514:	2101      	movs	r1, #1
 8002516:	fa01 f202 	lsl.w	r2, r1, r2
 800251a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	2b00      	cmp	r3, #0
 8002538:	d004      	beq.n	8002544 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	4798      	blx	r3
    }
  }
}  
 8002542:	e7ff      	b.n	8002544 <HAL_DMA_IRQHandler+0x13e>
 8002544:	bf00      	nop
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
 8002558:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002562:	2101      	movs	r1, #1
 8002564:	fa01 f202 	lsl.w	r2, r1, r2
 8002568:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b10      	cmp	r3, #16
 8002578:	d108      	bne.n	800258c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800258a:	e007      	b.n	800259c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	60da      	str	r2, [r3, #12]
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	461a      	mov	r2, r3
 80025b6:	4b09      	ldr	r3, [pc, #36]	; (80025dc <DMA_CalcBaseAndBitshift+0x34>)
 80025b8:	4413      	add	r3, r2
 80025ba:	4a09      	ldr	r2, [pc, #36]	; (80025e0 <DMA_CalcBaseAndBitshift+0x38>)
 80025bc:	fba2 2303 	umull	r2, r3, r2, r3
 80025c0:	091b      	lsrs	r3, r3, #4
 80025c2:	009a      	lsls	r2, r3, #2
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a06      	ldr	r2, [pc, #24]	; (80025e4 <DMA_CalcBaseAndBitshift+0x3c>)
 80025cc:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	bffdfff8 	.word	0xbffdfff8
 80025e0:	cccccccd 	.word	0xcccccccd
 80025e4:	40020000 	.word	0x40020000

080025e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f6:	e14e      	b.n	8002896 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	2101      	movs	r1, #1
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	fa01 f303 	lsl.w	r3, r1, r3
 8002604:	4013      	ands	r3, r2
 8002606:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 8140 	beq.w	8002890 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d00b      	beq.n	8002630 <HAL_GPIO_Init+0x48>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d007      	beq.n	8002630 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002624:	2b11      	cmp	r3, #17
 8002626:	d003      	beq.n	8002630 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b12      	cmp	r3, #18
 800262e:	d130      	bne.n	8002692 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	2203      	movs	r2, #3
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002666:	2201      	movs	r2, #1
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4013      	ands	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	091b      	lsrs	r3, r3, #4
 800267c:	f003 0201 	and.w	r2, r3, #1
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	2203      	movs	r2, #3
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4013      	ands	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d003      	beq.n	80026d2 <HAL_GPIO_Init+0xea>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b12      	cmp	r3, #18
 80026d0:	d123      	bne.n	800271a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	08da      	lsrs	r2, r3, #3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3208      	adds	r2, #8
 80026da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	220f      	movs	r2, #15
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4013      	ands	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	691a      	ldr	r2, [r3, #16]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	4313      	orrs	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	08da      	lsrs	r2, r3, #3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3208      	adds	r2, #8
 8002714:	6939      	ldr	r1, [r7, #16]
 8002716:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	2203      	movs	r2, #3
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4013      	ands	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f003 0203 	and.w	r2, r3, #3
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 809a 	beq.w	8002890 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275c:	4b55      	ldr	r3, [pc, #340]	; (80028b4 <HAL_GPIO_Init+0x2cc>)
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	4a54      	ldr	r2, [pc, #336]	; (80028b4 <HAL_GPIO_Init+0x2cc>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	6193      	str	r3, [r2, #24]
 8002768:	4b52      	ldr	r3, [pc, #328]	; (80028b4 <HAL_GPIO_Init+0x2cc>)
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	60bb      	str	r3, [r7, #8]
 8002772:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002774:	4a50      	ldr	r2, [pc, #320]	; (80028b8 <HAL_GPIO_Init+0x2d0>)
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	089b      	lsrs	r3, r3, #2
 800277a:	3302      	adds	r3, #2
 800277c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002780:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	220f      	movs	r2, #15
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4013      	ands	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800279e:	d013      	beq.n	80027c8 <HAL_GPIO_Init+0x1e0>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a46      	ldr	r2, [pc, #280]	; (80028bc <HAL_GPIO_Init+0x2d4>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d00d      	beq.n	80027c4 <HAL_GPIO_Init+0x1dc>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a45      	ldr	r2, [pc, #276]	; (80028c0 <HAL_GPIO_Init+0x2d8>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d007      	beq.n	80027c0 <HAL_GPIO_Init+0x1d8>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a44      	ldr	r2, [pc, #272]	; (80028c4 <HAL_GPIO_Init+0x2dc>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d101      	bne.n	80027bc <HAL_GPIO_Init+0x1d4>
 80027b8:	2303      	movs	r3, #3
 80027ba:	e006      	b.n	80027ca <HAL_GPIO_Init+0x1e2>
 80027bc:	2305      	movs	r3, #5
 80027be:	e004      	b.n	80027ca <HAL_GPIO_Init+0x1e2>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e002      	b.n	80027ca <HAL_GPIO_Init+0x1e2>
 80027c4:	2301      	movs	r3, #1
 80027c6:	e000      	b.n	80027ca <HAL_GPIO_Init+0x1e2>
 80027c8:	2300      	movs	r3, #0
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	f002 0203 	and.w	r2, r2, #3
 80027d0:	0092      	lsls	r2, r2, #2
 80027d2:	4093      	lsls	r3, r2
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027da:	4937      	ldr	r1, [pc, #220]	; (80028b8 <HAL_GPIO_Init+0x2d0>)
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	089b      	lsrs	r3, r3, #2
 80027e0:	3302      	adds	r3, #2
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027e8:	4b37      	ldr	r3, [pc, #220]	; (80028c8 <HAL_GPIO_Init+0x2e0>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	4313      	orrs	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800280c:	4a2e      	ldr	r2, [pc, #184]	; (80028c8 <HAL_GPIO_Init+0x2e0>)
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002812:	4b2d      	ldr	r3, [pc, #180]	; (80028c8 <HAL_GPIO_Init+0x2e0>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	43db      	mvns	r3, r3
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4013      	ands	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4313      	orrs	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002836:	4a24      	ldr	r2, [pc, #144]	; (80028c8 <HAL_GPIO_Init+0x2e0>)
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800283c:	4b22      	ldr	r3, [pc, #136]	; (80028c8 <HAL_GPIO_Init+0x2e0>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	43db      	mvns	r3, r3
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4013      	ands	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4313      	orrs	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002860:	4a19      	ldr	r2, [pc, #100]	; (80028c8 <HAL_GPIO_Init+0x2e0>)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002866:	4b18      	ldr	r3, [pc, #96]	; (80028c8 <HAL_GPIO_Init+0x2e0>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	43db      	mvns	r3, r3
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4013      	ands	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800288a:	4a0f      	ldr	r2, [pc, #60]	; (80028c8 <HAL_GPIO_Init+0x2e0>)
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	3301      	adds	r3, #1
 8002894:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	fa22 f303 	lsr.w	r3, r2, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f47f aea9 	bne.w	80025f8 <HAL_GPIO_Init+0x10>
  }
}
 80028a6:	bf00      	nop
 80028a8:	371c      	adds	r7, #28
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40010000 	.word	0x40010000
 80028bc:	48000400 	.word	0x48000400
 80028c0:	48000800 	.word	0x48000800
 80028c4:	48000c00 	.word	0x48000c00
 80028c8:	40010400 	.word	0x40010400

080028cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	807b      	strh	r3, [r7, #2]
 80028d8:	4613      	mov	r3, r2
 80028da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028dc:	787b      	ldrb	r3, [r7, #1]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028e2:	887a      	ldrh	r2, [r7, #2]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028e8:	e002      	b.n	80028f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028ea:	887a      	ldrh	r2, [r7, #2]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800290e:	887a      	ldrh	r2, [r7, #2]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4013      	ands	r3, r2
 8002914:	041a      	lsls	r2, r3, #16
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	43d9      	mvns	r1, r3
 800291a:	887b      	ldrh	r3, [r7, #2]
 800291c:	400b      	ands	r3, r1
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	619a      	str	r2, [r3, #24]
}
 8002924:	bf00      	nop
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800293a:	4b08      	ldr	r3, [pc, #32]	; (800295c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800293c:	695a      	ldr	r2, [r3, #20]
 800293e:	88fb      	ldrh	r3, [r7, #6]
 8002940:	4013      	ands	r3, r2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d006      	beq.n	8002954 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002946:	4a05      	ldr	r2, [pc, #20]	; (800295c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002948:	88fb      	ldrh	r3, [r7, #6]
 800294a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800294c:	88fb      	ldrh	r3, [r7, #6]
 800294e:	4618      	mov	r0, r3
 8002950:	f000 f806 	bl	8002960 <HAL_GPIO_EXTI_Callback>
  }
}
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40010400 	.word	0x40010400

08002960 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
	...

08002978 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800297e:	af00      	add	r7, sp, #0
 8002980:	1d3b      	adds	r3, r7, #4
 8002982:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002984:	1d3b      	adds	r3, r7, #4
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d102      	bne.n	8002992 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	f000 bef4 	b.w	800377a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002992:	1d3b      	adds	r3, r7, #4
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 816a 	beq.w	8002c76 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80029a2:	4bb3      	ldr	r3, [pc, #716]	; (8002c70 <HAL_RCC_OscConfig+0x2f8>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d00c      	beq.n	80029c8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029ae:	4bb0      	ldr	r3, [pc, #704]	; (8002c70 <HAL_RCC_OscConfig+0x2f8>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d159      	bne.n	8002a6e <HAL_RCC_OscConfig+0xf6>
 80029ba:	4bad      	ldr	r3, [pc, #692]	; (8002c70 <HAL_RCC_OscConfig+0x2f8>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c6:	d152      	bne.n	8002a6e <HAL_RCC_OscConfig+0xf6>
 80029c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029cc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80029d4:	fa93 f3a3 	rbit	r3, r3
 80029d8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029dc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e0:	fab3 f383 	clz	r3, r3
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	095b      	lsrs	r3, r3, #5
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d102      	bne.n	80029fa <HAL_RCC_OscConfig+0x82>
 80029f4:	4b9e      	ldr	r3, [pc, #632]	; (8002c70 <HAL_RCC_OscConfig+0x2f8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	e015      	b.n	8002a26 <HAL_RCC_OscConfig+0xae>
 80029fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029fe:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002a06:	fa93 f3a3 	rbit	r3, r3
 8002a0a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002a0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a12:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002a16:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002a1a:	fa93 f3a3 	rbit	r3, r3
 8002a1e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002a22:	4b93      	ldr	r3, [pc, #588]	; (8002c70 <HAL_RCC_OscConfig+0x2f8>)
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a2a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002a2e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002a32:	fa92 f2a2 	rbit	r2, r2
 8002a36:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002a3a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002a3e:	fab2 f282 	clz	r2, r2
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	f042 0220 	orr.w	r2, r2, #32
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	f002 021f 	and.w	r2, r2, #31
 8002a4e:	2101      	movs	r1, #1
 8002a50:	fa01 f202 	lsl.w	r2, r1, r2
 8002a54:	4013      	ands	r3, r2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 810c 	beq.w	8002c74 <HAL_RCC_OscConfig+0x2fc>
 8002a5c:	1d3b      	adds	r3, r7, #4
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f040 8106 	bne.w	8002c74 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	f000 be86 	b.w	800377a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a6e:	1d3b      	adds	r3, r7, #4
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a78:	d106      	bne.n	8002a88 <HAL_RCC_OscConfig+0x110>
 8002a7a:	4b7d      	ldr	r3, [pc, #500]	; (8002c70 <HAL_RCC_OscConfig+0x2f8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a7c      	ldr	r2, [pc, #496]	; (8002c70 <HAL_RCC_OscConfig+0x2f8>)
 8002a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	e030      	b.n	8002aea <HAL_RCC_OscConfig+0x172>
 8002a88:	1d3b      	adds	r3, r7, #4
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10c      	bne.n	8002aac <HAL_RCC_OscConfig+0x134>
 8002a92:	4b77      	ldr	r3, [pc, #476]	; (8002c70 <HAL_RCC_OscConfig+0x2f8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a76      	ldr	r2, [pc, #472]	; (8002c70 <HAL_RCC_OscConfig+0x2f8>)
 8002a98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	4b74      	ldr	r3, [pc, #464]	; (8002c70 <HAL_RCC_OscConfig+0x2f8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a73      	ldr	r2, [pc, #460]	; (8002c70 <HAL_RCC_OscConfig+0x2f8>)
 8002aa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	e01e      	b.n	8002aea <HAL_RCC_OscConfig+0x172>
 8002aac:	1d3b      	adds	r3, r7, #4
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ab6:	d10c      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x15a>
 8002ab8:	4b6d      	ldr	r3, [pc, #436]	; (8002c70 <HAL_RCC_OscConfig+0x2f8>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a6c      	ldr	r2, [pc, #432]	; (8002c70 <HAL_RCC_OscConfig+0x2f8>)
 8002abe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ac2:	6013      	str	r3, [r2, #0]
 8002ac4:	4b6a      	ldr	r3, [pc, #424]	; (8002c70 <HAL_RCC_OscConfig+0x2f8>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a69      	ldr	r2, [pc, #420]	; (8002c70 <HAL_RCC_OscConfig+0x2f8>)
 8002aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	e00b      	b.n	8002aea <HAL_RCC_OscConfig+0x172>
 8002ad2:	4b67      	ldr	r3, [pc, #412]	; (8002c70 <HAL_RCC_OscConfig+0x2f8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a66      	ldr	r2, [pc, #408]	; (8002c70 <HAL_RCC_OscConfig+0x2f8>)
 8002ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	4b64      	ldr	r3, [pc, #400]	; (8002c70 <HAL_RCC_OscConfig+0x2f8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a63      	ldr	r2, [pc, #396]	; (8002c70 <HAL_RCC_OscConfig+0x2f8>)
 8002ae4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ae8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002aea:	4b61      	ldr	r3, [pc, #388]	; (8002c70 <HAL_RCC_OscConfig+0x2f8>)
 8002aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aee:	f023 020f 	bic.w	r2, r3, #15
 8002af2:	1d3b      	adds	r3, r7, #4
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	495d      	ldr	r1, [pc, #372]	; (8002c70 <HAL_RCC_OscConfig+0x2f8>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002afe:	1d3b      	adds	r3, r7, #4
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d059      	beq.n	8002bbc <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7fe fc40 	bl	800138c <HAL_GetTick>
 8002b0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b10:	e00a      	b.n	8002b28 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b12:	f7fe fc3b 	bl	800138c <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b64      	cmp	r3, #100	; 0x64
 8002b20:	d902      	bls.n	8002b28 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	f000 be29 	b.w	800377a <HAL_RCC_OscConfig+0xe02>
 8002b28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b2c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b30:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002b34:	fa93 f3a3 	rbit	r3, r3
 8002b38:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002b3c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b40:	fab3 f383 	clz	r3, r3
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	095b      	lsrs	r3, r3, #5
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	f043 0301 	orr.w	r3, r3, #1
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d102      	bne.n	8002b5a <HAL_RCC_OscConfig+0x1e2>
 8002b54:	4b46      	ldr	r3, [pc, #280]	; (8002c70 <HAL_RCC_OscConfig+0x2f8>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	e015      	b.n	8002b86 <HAL_RCC_OscConfig+0x20e>
 8002b5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b5e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b62:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002b66:	fa93 f3a3 	rbit	r3, r3
 8002b6a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002b6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b72:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002b76:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002b7a:	fa93 f3a3 	rbit	r3, r3
 8002b7e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002b82:	4b3b      	ldr	r3, [pc, #236]	; (8002c70 <HAL_RCC_OscConfig+0x2f8>)
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b8a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002b8e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002b92:	fa92 f2a2 	rbit	r2, r2
 8002b96:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002b9a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002b9e:	fab2 f282 	clz	r2, r2
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	f042 0220 	orr.w	r2, r2, #32
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	f002 021f 	and.w	r2, r2, #31
 8002bae:	2101      	movs	r1, #1
 8002bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0ab      	beq.n	8002b12 <HAL_RCC_OscConfig+0x19a>
 8002bba:	e05c      	b.n	8002c76 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbc:	f7fe fbe6 	bl	800138c <HAL_GetTick>
 8002bc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc4:	e00a      	b.n	8002bdc <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc6:	f7fe fbe1 	bl	800138c <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b64      	cmp	r3, #100	; 0x64
 8002bd4:	d902      	bls.n	8002bdc <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	f000 bdcf 	b.w	800377a <HAL_RCC_OscConfig+0xe02>
 8002bdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002be0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002be8:	fa93 f3a3 	rbit	r3, r3
 8002bec:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002bf0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bf4:	fab3 f383 	clz	r3, r3
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	f043 0301 	orr.w	r3, r3, #1
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d102      	bne.n	8002c0e <HAL_RCC_OscConfig+0x296>
 8002c08:	4b19      	ldr	r3, [pc, #100]	; (8002c70 <HAL_RCC_OscConfig+0x2f8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	e015      	b.n	8002c3a <HAL_RCC_OscConfig+0x2c2>
 8002c0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c12:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c16:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002c1a:	fa93 f3a3 	rbit	r3, r3
 8002c1e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002c22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c26:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002c2a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002c2e:	fa93 f3a3 	rbit	r3, r3
 8002c32:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002c36:	4b0e      	ldr	r3, [pc, #56]	; (8002c70 <HAL_RCC_OscConfig+0x2f8>)
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c3e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002c42:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002c46:	fa92 f2a2 	rbit	r2, r2
 8002c4a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002c4e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002c52:	fab2 f282 	clz	r2, r2
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	f042 0220 	orr.w	r2, r2, #32
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	f002 021f 	and.w	r2, r2, #31
 8002c62:	2101      	movs	r1, #1
 8002c64:	fa01 f202 	lsl.w	r2, r1, r2
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1ab      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x24e>
 8002c6e:	e002      	b.n	8002c76 <HAL_RCC_OscConfig+0x2fe>
 8002c70:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c76:	1d3b      	adds	r3, r7, #4
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 816f 	beq.w	8002f64 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c86:	4bd0      	ldr	r3, [pc, #832]	; (8002fc8 <HAL_RCC_OscConfig+0x650>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00b      	beq.n	8002caa <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c92:	4bcd      	ldr	r3, [pc, #820]	; (8002fc8 <HAL_RCC_OscConfig+0x650>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f003 030c 	and.w	r3, r3, #12
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d16c      	bne.n	8002d78 <HAL_RCC_OscConfig+0x400>
 8002c9e:	4bca      	ldr	r3, [pc, #808]	; (8002fc8 <HAL_RCC_OscConfig+0x650>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d166      	bne.n	8002d78 <HAL_RCC_OscConfig+0x400>
 8002caa:	2302      	movs	r3, #2
 8002cac:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002cb4:	fa93 f3a3 	rbit	r3, r3
 8002cb8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002cbc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc0:	fab3 f383 	clz	r3, r3
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	f043 0301 	orr.w	r3, r3, #1
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d102      	bne.n	8002cda <HAL_RCC_OscConfig+0x362>
 8002cd4:	4bbc      	ldr	r3, [pc, #752]	; (8002fc8 <HAL_RCC_OscConfig+0x650>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	e013      	b.n	8002d02 <HAL_RCC_OscConfig+0x38a>
 8002cda:	2302      	movs	r3, #2
 8002cdc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002ce4:	fa93 f3a3 	rbit	r3, r3
 8002ce8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002cec:	2302      	movs	r3, #2
 8002cee:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002cf2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cf6:	fa93 f3a3 	rbit	r3, r3
 8002cfa:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002cfe:	4bb2      	ldr	r3, [pc, #712]	; (8002fc8 <HAL_RCC_OscConfig+0x650>)
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	2202      	movs	r2, #2
 8002d04:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002d08:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002d0c:	fa92 f2a2 	rbit	r2, r2
 8002d10:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002d14:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002d18:	fab2 f282 	clz	r2, r2
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	f042 0220 	orr.w	r2, r2, #32
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	f002 021f 	and.w	r2, r2, #31
 8002d28:	2101      	movs	r1, #1
 8002d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d2e:	4013      	ands	r3, r2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d007      	beq.n	8002d44 <HAL_RCC_OscConfig+0x3cc>
 8002d34:	1d3b      	adds	r3, r7, #4
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d002      	beq.n	8002d44 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	f000 bd1b 	b.w	800377a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d44:	4ba0      	ldr	r3, [pc, #640]	; (8002fc8 <HAL_RCC_OscConfig+0x650>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d4c:	1d3b      	adds	r3, r7, #4
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	21f8      	movs	r1, #248	; 0xf8
 8002d54:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002d5c:	fa91 f1a1 	rbit	r1, r1
 8002d60:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002d64:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002d68:	fab1 f181 	clz	r1, r1
 8002d6c:	b2c9      	uxtb	r1, r1
 8002d6e:	408b      	lsls	r3, r1
 8002d70:	4995      	ldr	r1, [pc, #596]	; (8002fc8 <HAL_RCC_OscConfig+0x650>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d76:	e0f5      	b.n	8002f64 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d78:	1d3b      	adds	r3, r7, #4
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 8085 	beq.w	8002e8e <HAL_RCC_OscConfig+0x516>
 8002d84:	2301      	movs	r3, #1
 8002d86:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002d8e:	fa93 f3a3 	rbit	r3, r3
 8002d92:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002d96:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d9a:	fab3 f383 	clz	r3, r3
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002da4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	461a      	mov	r2, r3
 8002dac:	2301      	movs	r3, #1
 8002dae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db0:	f7fe faec 	bl	800138c <HAL_GetTick>
 8002db4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db8:	e00a      	b.n	8002dd0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dba:	f7fe fae7 	bl	800138c <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d902      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	f000 bcd5 	b.w	800377a <HAL_RCC_OscConfig+0xe02>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002dda:	fa93 f3a3 	rbit	r3, r3
 8002dde:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002de2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de6:	fab3 f383 	clz	r3, r3
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d102      	bne.n	8002e00 <HAL_RCC_OscConfig+0x488>
 8002dfa:	4b73      	ldr	r3, [pc, #460]	; (8002fc8 <HAL_RCC_OscConfig+0x650>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	e013      	b.n	8002e28 <HAL_RCC_OscConfig+0x4b0>
 8002e00:	2302      	movs	r3, #2
 8002e02:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e06:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002e0a:	fa93 f3a3 	rbit	r3, r3
 8002e0e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002e12:	2302      	movs	r3, #2
 8002e14:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002e18:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002e1c:	fa93 f3a3 	rbit	r3, r3
 8002e20:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002e24:	4b68      	ldr	r3, [pc, #416]	; (8002fc8 <HAL_RCC_OscConfig+0x650>)
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	2202      	movs	r2, #2
 8002e2a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002e2e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002e32:	fa92 f2a2 	rbit	r2, r2
 8002e36:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002e3a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002e3e:	fab2 f282 	clz	r2, r2
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	f042 0220 	orr.w	r2, r2, #32
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	f002 021f 	and.w	r2, r2, #31
 8002e4e:	2101      	movs	r1, #1
 8002e50:	fa01 f202 	lsl.w	r2, r1, r2
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0af      	beq.n	8002dba <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e5a:	4b5b      	ldr	r3, [pc, #364]	; (8002fc8 <HAL_RCC_OscConfig+0x650>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e62:	1d3b      	adds	r3, r7, #4
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	21f8      	movs	r1, #248	; 0xf8
 8002e6a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002e72:	fa91 f1a1 	rbit	r1, r1
 8002e76:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002e7a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002e7e:	fab1 f181 	clz	r1, r1
 8002e82:	b2c9      	uxtb	r1, r1
 8002e84:	408b      	lsls	r3, r1
 8002e86:	4950      	ldr	r1, [pc, #320]	; (8002fc8 <HAL_RCC_OscConfig+0x650>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	600b      	str	r3, [r1, #0]
 8002e8c:	e06a      	b.n	8002f64 <HAL_RCC_OscConfig+0x5ec>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e94:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002e98:	fa93 f3a3 	rbit	r3, r3
 8002e9c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002ea0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ea4:	fab3 f383 	clz	r3, r3
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002eae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eba:	f7fe fa67 	bl	800138c <HAL_GetTick>
 8002ebe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec2:	e00a      	b.n	8002eda <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ec4:	f7fe fa62 	bl	800138c <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d902      	bls.n	8002eda <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	f000 bc50 	b.w	800377a <HAL_RCC_OscConfig+0xe02>
 8002eda:	2302      	movs	r3, #2
 8002edc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002ee4:	fa93 f3a3 	rbit	r3, r3
 8002ee8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002eec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ef0:	fab3 f383 	clz	r3, r3
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	095b      	lsrs	r3, r3, #5
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	f043 0301 	orr.w	r3, r3, #1
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d102      	bne.n	8002f0a <HAL_RCC_OscConfig+0x592>
 8002f04:	4b30      	ldr	r3, [pc, #192]	; (8002fc8 <HAL_RCC_OscConfig+0x650>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	e013      	b.n	8002f32 <HAL_RCC_OscConfig+0x5ba>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002f14:	fa93 f3a3 	rbit	r3, r3
 8002f18:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002f22:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f26:	fa93 f3a3 	rbit	r3, r3
 8002f2a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002f2e:	4b26      	ldr	r3, [pc, #152]	; (8002fc8 <HAL_RCC_OscConfig+0x650>)
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	2202      	movs	r2, #2
 8002f34:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002f38:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002f3c:	fa92 f2a2 	rbit	r2, r2
 8002f40:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002f44:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002f48:	fab2 f282 	clz	r2, r2
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	f042 0220 	orr.w	r2, r2, #32
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	f002 021f 	and.w	r2, r2, #31
 8002f58:	2101      	movs	r1, #1
 8002f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5e:	4013      	ands	r3, r2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1af      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f64:	1d3b      	adds	r3, r7, #4
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 80da 	beq.w	8003128 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f74:	1d3b      	adds	r3, r7, #4
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d069      	beq.n	8003052 <HAL_RCC_OscConfig+0x6da>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f84:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f88:	fa93 f3a3 	rbit	r3, r3
 8002f8c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f94:	fab3 f383 	clz	r3, r3
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <HAL_RCC_OscConfig+0x654>)
 8002f9e:	4413      	add	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa8:	f7fe f9f0 	bl	800138c <HAL_GetTick>
 8002fac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fb0:	e00e      	b.n	8002fd0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fb2:	f7fe f9eb 	bl	800138c <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d906      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e3d9      	b.n	800377a <HAL_RCC_OscConfig+0xe02>
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	10908120 	.word	0x10908120
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002fda:	fa93 f3a3 	rbit	r3, r3
 8002fde:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002fe2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	fa93 f2a3 	rbit	r2, r3
 8002ff4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002ffe:	2202      	movs	r2, #2
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	fa93 f2a3 	rbit	r2, r3
 800300c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003010:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003012:	4ba5      	ldr	r3, [pc, #660]	; (80032a8 <HAL_RCC_OscConfig+0x930>)
 8003014:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003016:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800301a:	2102      	movs	r1, #2
 800301c:	6019      	str	r1, [r3, #0]
 800301e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	fa93 f1a3 	rbit	r1, r3
 8003028:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800302c:	6019      	str	r1, [r3, #0]
  return result;
 800302e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	fab3 f383 	clz	r3, r3
 8003038:	b2db      	uxtb	r3, r3
 800303a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800303e:	b2db      	uxtb	r3, r3
 8003040:	f003 031f 	and.w	r3, r3, #31
 8003044:	2101      	movs	r1, #1
 8003046:	fa01 f303 	lsl.w	r3, r1, r3
 800304a:	4013      	ands	r3, r2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0b0      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x63a>
 8003050:	e06a      	b.n	8003128 <HAL_RCC_OscConfig+0x7b0>
 8003052:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003056:	2201      	movs	r2, #1
 8003058:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	fa93 f2a3 	rbit	r2, r3
 8003064:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003068:	601a      	str	r2, [r3, #0]
  return result;
 800306a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800306e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003070:	fab3 f383 	clz	r3, r3
 8003074:	b2db      	uxtb	r3, r3
 8003076:	461a      	mov	r2, r3
 8003078:	4b8c      	ldr	r3, [pc, #560]	; (80032ac <HAL_RCC_OscConfig+0x934>)
 800307a:	4413      	add	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	461a      	mov	r2, r3
 8003080:	2300      	movs	r3, #0
 8003082:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003084:	f7fe f982 	bl	800138c <HAL_GetTick>
 8003088:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800308c:	e009      	b.n	80030a2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800308e:	f7fe f97d 	bl	800138c <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e36b      	b.n	800377a <HAL_RCC_OscConfig+0xe02>
 80030a2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80030a6:	2202      	movs	r2, #2
 80030a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030aa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	fa93 f2a3 	rbit	r2, r3
 80030b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80030be:	2202      	movs	r2, #2
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	fa93 f2a3 	rbit	r2, r3
 80030cc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80030d6:	2202      	movs	r2, #2
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	fa93 f2a3 	rbit	r2, r3
 80030e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80030e8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ea:	4b6f      	ldr	r3, [pc, #444]	; (80032a8 <HAL_RCC_OscConfig+0x930>)
 80030ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030ee:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80030f2:	2102      	movs	r1, #2
 80030f4:	6019      	str	r1, [r3, #0]
 80030f6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	fa93 f1a3 	rbit	r1, r3
 8003100:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003104:	6019      	str	r1, [r3, #0]
  return result;
 8003106:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	fab3 f383 	clz	r3, r3
 8003110:	b2db      	uxtb	r3, r3
 8003112:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003116:	b2db      	uxtb	r3, r3
 8003118:	f003 031f 	and.w	r3, r3, #31
 800311c:	2101      	movs	r1, #1
 800311e:	fa01 f303 	lsl.w	r3, r1, r3
 8003122:	4013      	ands	r3, r2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1b2      	bne.n	800308e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003128:	1d3b      	adds	r3, r7, #4
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0304 	and.w	r3, r3, #4
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 8158 	beq.w	80033e8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003138:	2300      	movs	r3, #0
 800313a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800313e:	4b5a      	ldr	r3, [pc, #360]	; (80032a8 <HAL_RCC_OscConfig+0x930>)
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d112      	bne.n	8003170 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800314a:	4b57      	ldr	r3, [pc, #348]	; (80032a8 <HAL_RCC_OscConfig+0x930>)
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	4a56      	ldr	r2, [pc, #344]	; (80032a8 <HAL_RCC_OscConfig+0x930>)
 8003150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003154:	61d3      	str	r3, [r2, #28]
 8003156:	4b54      	ldr	r3, [pc, #336]	; (80032a8 <HAL_RCC_OscConfig+0x930>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800315e:	f107 0308 	add.w	r3, r7, #8
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	f107 0308 	add.w	r3, r7, #8
 8003168:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800316a:	2301      	movs	r3, #1
 800316c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003170:	4b4f      	ldr	r3, [pc, #316]	; (80032b0 <HAL_RCC_OscConfig+0x938>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003178:	2b00      	cmp	r3, #0
 800317a:	d11a      	bne.n	80031b2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800317c:	4b4c      	ldr	r3, [pc, #304]	; (80032b0 <HAL_RCC_OscConfig+0x938>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a4b      	ldr	r2, [pc, #300]	; (80032b0 <HAL_RCC_OscConfig+0x938>)
 8003182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003186:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003188:	f7fe f900 	bl	800138c <HAL_GetTick>
 800318c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003190:	e009      	b.n	80031a6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003192:	f7fe f8fb 	bl	800138c <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b64      	cmp	r3, #100	; 0x64
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e2e9      	b.n	800377a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a6:	4b42      	ldr	r3, [pc, #264]	; (80032b0 <HAL_RCC_OscConfig+0x938>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0ef      	beq.n	8003192 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031b2:	1d3b      	adds	r3, r7, #4
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d106      	bne.n	80031ca <HAL_RCC_OscConfig+0x852>
 80031bc:	4b3a      	ldr	r3, [pc, #232]	; (80032a8 <HAL_RCC_OscConfig+0x930>)
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	4a39      	ldr	r2, [pc, #228]	; (80032a8 <HAL_RCC_OscConfig+0x930>)
 80031c2:	f043 0301 	orr.w	r3, r3, #1
 80031c6:	6213      	str	r3, [r2, #32]
 80031c8:	e02f      	b.n	800322a <HAL_RCC_OscConfig+0x8b2>
 80031ca:	1d3b      	adds	r3, r7, #4
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10c      	bne.n	80031ee <HAL_RCC_OscConfig+0x876>
 80031d4:	4b34      	ldr	r3, [pc, #208]	; (80032a8 <HAL_RCC_OscConfig+0x930>)
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	4a33      	ldr	r2, [pc, #204]	; (80032a8 <HAL_RCC_OscConfig+0x930>)
 80031da:	f023 0301 	bic.w	r3, r3, #1
 80031de:	6213      	str	r3, [r2, #32]
 80031e0:	4b31      	ldr	r3, [pc, #196]	; (80032a8 <HAL_RCC_OscConfig+0x930>)
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	4a30      	ldr	r2, [pc, #192]	; (80032a8 <HAL_RCC_OscConfig+0x930>)
 80031e6:	f023 0304 	bic.w	r3, r3, #4
 80031ea:	6213      	str	r3, [r2, #32]
 80031ec:	e01d      	b.n	800322a <HAL_RCC_OscConfig+0x8b2>
 80031ee:	1d3b      	adds	r3, r7, #4
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	2b05      	cmp	r3, #5
 80031f6:	d10c      	bne.n	8003212 <HAL_RCC_OscConfig+0x89a>
 80031f8:	4b2b      	ldr	r3, [pc, #172]	; (80032a8 <HAL_RCC_OscConfig+0x930>)
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	4a2a      	ldr	r2, [pc, #168]	; (80032a8 <HAL_RCC_OscConfig+0x930>)
 80031fe:	f043 0304 	orr.w	r3, r3, #4
 8003202:	6213      	str	r3, [r2, #32]
 8003204:	4b28      	ldr	r3, [pc, #160]	; (80032a8 <HAL_RCC_OscConfig+0x930>)
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	4a27      	ldr	r2, [pc, #156]	; (80032a8 <HAL_RCC_OscConfig+0x930>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	6213      	str	r3, [r2, #32]
 8003210:	e00b      	b.n	800322a <HAL_RCC_OscConfig+0x8b2>
 8003212:	4b25      	ldr	r3, [pc, #148]	; (80032a8 <HAL_RCC_OscConfig+0x930>)
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	4a24      	ldr	r2, [pc, #144]	; (80032a8 <HAL_RCC_OscConfig+0x930>)
 8003218:	f023 0301 	bic.w	r3, r3, #1
 800321c:	6213      	str	r3, [r2, #32]
 800321e:	4b22      	ldr	r3, [pc, #136]	; (80032a8 <HAL_RCC_OscConfig+0x930>)
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	4a21      	ldr	r2, [pc, #132]	; (80032a8 <HAL_RCC_OscConfig+0x930>)
 8003224:	f023 0304 	bic.w	r3, r3, #4
 8003228:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800322a:	1d3b      	adds	r3, r7, #4
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d06b      	beq.n	800330c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003234:	f7fe f8aa 	bl	800138c <HAL_GetTick>
 8003238:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323c:	e00b      	b.n	8003256 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800323e:	f7fe f8a5 	bl	800138c <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	f241 3288 	movw	r2, #5000	; 0x1388
 800324e:	4293      	cmp	r3, r2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e291      	b.n	800377a <HAL_RCC_OscConfig+0xe02>
 8003256:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800325a:	2202      	movs	r2, #2
 800325c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	fa93 f2a3 	rbit	r2, r3
 8003268:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003272:	2202      	movs	r2, #2
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	fa93 f2a3 	rbit	r2, r3
 8003280:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003284:	601a      	str	r2, [r3, #0]
  return result;
 8003286:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800328a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800328c:	fab3 f383 	clz	r3, r3
 8003290:	b2db      	uxtb	r3, r3
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	b2db      	uxtb	r3, r3
 8003296:	f043 0302 	orr.w	r3, r3, #2
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d109      	bne.n	80032b4 <HAL_RCC_OscConfig+0x93c>
 80032a0:	4b01      	ldr	r3, [pc, #4]	; (80032a8 <HAL_RCC_OscConfig+0x930>)
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	e014      	b.n	80032d0 <HAL_RCC_OscConfig+0x958>
 80032a6:	bf00      	nop
 80032a8:	40021000 	.word	0x40021000
 80032ac:	10908120 	.word	0x10908120
 80032b0:	40007000 	.word	0x40007000
 80032b4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80032b8:	2202      	movs	r2, #2
 80032ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032bc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	fa93 f2a3 	rbit	r2, r3
 80032c6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	4bbb      	ldr	r3, [pc, #748]	; (80035bc <HAL_RCC_OscConfig+0xc44>)
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80032d4:	2102      	movs	r1, #2
 80032d6:	6011      	str	r1, [r2, #0]
 80032d8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80032dc:	6812      	ldr	r2, [r2, #0]
 80032de:	fa92 f1a2 	rbit	r1, r2
 80032e2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80032e6:	6011      	str	r1, [r2, #0]
  return result;
 80032e8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80032ec:	6812      	ldr	r2, [r2, #0]
 80032ee:	fab2 f282 	clz	r2, r2
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	f002 021f 	and.w	r2, r2, #31
 80032fe:	2101      	movs	r1, #1
 8003300:	fa01 f202 	lsl.w	r2, r1, r2
 8003304:	4013      	ands	r3, r2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d099      	beq.n	800323e <HAL_RCC_OscConfig+0x8c6>
 800330a:	e063      	b.n	80033d4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800330c:	f7fe f83e 	bl	800138c <HAL_GetTick>
 8003310:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003314:	e00b      	b.n	800332e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003316:	f7fe f839 	bl	800138c <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	f241 3288 	movw	r2, #5000	; 0x1388
 8003326:	4293      	cmp	r3, r2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e225      	b.n	800377a <HAL_RCC_OscConfig+0xe02>
 800332e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003332:	2202      	movs	r2, #2
 8003334:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003336:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	fa93 f2a3 	rbit	r2, r3
 8003340:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800334a:	2202      	movs	r2, #2
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	fa93 f2a3 	rbit	r2, r3
 8003358:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800335c:	601a      	str	r2, [r3, #0]
  return result;
 800335e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003362:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003364:	fab3 f383 	clz	r3, r3
 8003368:	b2db      	uxtb	r3, r3
 800336a:	095b      	lsrs	r3, r3, #5
 800336c:	b2db      	uxtb	r3, r3
 800336e:	f043 0302 	orr.w	r3, r3, #2
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d102      	bne.n	800337e <HAL_RCC_OscConfig+0xa06>
 8003378:	4b90      	ldr	r3, [pc, #576]	; (80035bc <HAL_RCC_OscConfig+0xc44>)
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	e00d      	b.n	800339a <HAL_RCC_OscConfig+0xa22>
 800337e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003382:	2202      	movs	r2, #2
 8003384:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003386:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	fa93 f2a3 	rbit	r2, r3
 8003390:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	4b89      	ldr	r3, [pc, #548]	; (80035bc <HAL_RCC_OscConfig+0xc44>)
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800339e:	2102      	movs	r1, #2
 80033a0:	6011      	str	r1, [r2, #0]
 80033a2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80033a6:	6812      	ldr	r2, [r2, #0]
 80033a8:	fa92 f1a2 	rbit	r1, r2
 80033ac:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80033b0:	6011      	str	r1, [r2, #0]
  return result;
 80033b2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	fab2 f282 	clz	r2, r2
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	f002 021f 	and.w	r2, r2, #31
 80033c8:	2101      	movs	r1, #1
 80033ca:	fa01 f202 	lsl.w	r2, r1, r2
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1a0      	bne.n	8003316 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033d4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d105      	bne.n	80033e8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033dc:	4b77      	ldr	r3, [pc, #476]	; (80035bc <HAL_RCC_OscConfig+0xc44>)
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	4a76      	ldr	r2, [pc, #472]	; (80035bc <HAL_RCC_OscConfig+0xc44>)
 80033e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033e8:	1d3b      	adds	r3, r7, #4
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 81c2 	beq.w	8003778 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033f4:	4b71      	ldr	r3, [pc, #452]	; (80035bc <HAL_RCC_OscConfig+0xc44>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 030c 	and.w	r3, r3, #12
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	f000 819c 	beq.w	800373a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003402:	1d3b      	adds	r3, r7, #4
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	2b02      	cmp	r3, #2
 800340a:	f040 8114 	bne.w	8003636 <HAL_RCC_OscConfig+0xcbe>
 800340e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003412:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003416:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003418:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	fa93 f2a3 	rbit	r2, r3
 8003422:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003426:	601a      	str	r2, [r3, #0]
  return result;
 8003428:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800342c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800342e:	fab3 f383 	clz	r3, r3
 8003432:	b2db      	uxtb	r3, r3
 8003434:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003438:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	461a      	mov	r2, r3
 8003440:	2300      	movs	r3, #0
 8003442:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003444:	f7fd ffa2 	bl	800138c <HAL_GetTick>
 8003448:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800344c:	e009      	b.n	8003462 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800344e:	f7fd ff9d 	bl	800138c <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e18b      	b.n	800377a <HAL_RCC_OscConfig+0xe02>
 8003462:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003466:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800346a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	fa93 f2a3 	rbit	r2, r3
 8003476:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800347a:	601a      	str	r2, [r3, #0]
  return result;
 800347c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003480:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003482:	fab3 f383 	clz	r3, r3
 8003486:	b2db      	uxtb	r3, r3
 8003488:	095b      	lsrs	r3, r3, #5
 800348a:	b2db      	uxtb	r3, r3
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b01      	cmp	r3, #1
 8003494:	d102      	bne.n	800349c <HAL_RCC_OscConfig+0xb24>
 8003496:	4b49      	ldr	r3, [pc, #292]	; (80035bc <HAL_RCC_OscConfig+0xc44>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	e01b      	b.n	80034d4 <HAL_RCC_OscConfig+0xb5c>
 800349c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80034a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	fa93 f2a3 	rbit	r2, r3
 80034b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80034ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	fa93 f2a3 	rbit	r2, r3
 80034ca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	4b3a      	ldr	r3, [pc, #232]	; (80035bc <HAL_RCC_OscConfig+0xc44>)
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80034d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034dc:	6011      	str	r1, [r2, #0]
 80034de:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80034e2:	6812      	ldr	r2, [r2, #0]
 80034e4:	fa92 f1a2 	rbit	r1, r2
 80034e8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80034ec:	6011      	str	r1, [r2, #0]
  return result;
 80034ee:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80034f2:	6812      	ldr	r2, [r2, #0]
 80034f4:	fab2 f282 	clz	r2, r2
 80034f8:	b2d2      	uxtb	r2, r2
 80034fa:	f042 0220 	orr.w	r2, r2, #32
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	f002 021f 	and.w	r2, r2, #31
 8003504:	2101      	movs	r1, #1
 8003506:	fa01 f202 	lsl.w	r2, r1, r2
 800350a:	4013      	ands	r3, r2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d19e      	bne.n	800344e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003510:	4b2a      	ldr	r3, [pc, #168]	; (80035bc <HAL_RCC_OscConfig+0xc44>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003518:	1d3b      	adds	r3, r7, #4
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800351e:	1d3b      	adds	r3, r7, #4
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	430b      	orrs	r3, r1
 8003526:	4925      	ldr	r1, [pc, #148]	; (80035bc <HAL_RCC_OscConfig+0xc44>)
 8003528:	4313      	orrs	r3, r2
 800352a:	604b      	str	r3, [r1, #4]
 800352c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003530:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003534:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003536:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	fa93 f2a3 	rbit	r2, r3
 8003540:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003544:	601a      	str	r2, [r3, #0]
  return result;
 8003546:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800354a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800354c:	fab3 f383 	clz	r3, r3
 8003550:	b2db      	uxtb	r3, r3
 8003552:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003556:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	461a      	mov	r2, r3
 800355e:	2301      	movs	r3, #1
 8003560:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003562:	f7fd ff13 	bl	800138c <HAL_GetTick>
 8003566:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800356a:	e009      	b.n	8003580 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800356c:	f7fd ff0e 	bl	800138c <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e0fc      	b.n	800377a <HAL_RCC_OscConfig+0xe02>
 8003580:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003584:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003588:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	fa93 f2a3 	rbit	r2, r3
 8003594:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003598:	601a      	str	r2, [r3, #0]
  return result;
 800359a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800359e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035a0:	fab3 f383 	clz	r3, r3
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	095b      	lsrs	r3, r3, #5
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	f043 0301 	orr.w	r3, r3, #1
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d105      	bne.n	80035c0 <HAL_RCC_OscConfig+0xc48>
 80035b4:	4b01      	ldr	r3, [pc, #4]	; (80035bc <HAL_RCC_OscConfig+0xc44>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	e01e      	b.n	80035f8 <HAL_RCC_OscConfig+0xc80>
 80035ba:	bf00      	nop
 80035bc:	40021000 	.word	0x40021000
 80035c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80035c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	fa93 f2a3 	rbit	r2, r3
 80035d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	fa93 f2a3 	rbit	r2, r3
 80035ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	4b63      	ldr	r3, [pc, #396]	; (8003784 <HAL_RCC_OscConfig+0xe0c>)
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80035fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003600:	6011      	str	r1, [r2, #0]
 8003602:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	fa92 f1a2 	rbit	r1, r2
 800360c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003610:	6011      	str	r1, [r2, #0]
  return result;
 8003612:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003616:	6812      	ldr	r2, [r2, #0]
 8003618:	fab2 f282 	clz	r2, r2
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	f042 0220 	orr.w	r2, r2, #32
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	f002 021f 	and.w	r2, r2, #31
 8003628:	2101      	movs	r1, #1
 800362a:	fa01 f202 	lsl.w	r2, r1, r2
 800362e:	4013      	ands	r3, r2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d09b      	beq.n	800356c <HAL_RCC_OscConfig+0xbf4>
 8003634:	e0a0      	b.n	8003778 <HAL_RCC_OscConfig+0xe00>
 8003636:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800363a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800363e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003640:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	fa93 f2a3 	rbit	r2, r3
 800364a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800364e:	601a      	str	r2, [r3, #0]
  return result;
 8003650:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003654:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003656:	fab3 f383 	clz	r3, r3
 800365a:	b2db      	uxtb	r3, r3
 800365c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003660:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	461a      	mov	r2, r3
 8003668:	2300      	movs	r3, #0
 800366a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366c:	f7fd fe8e 	bl	800138c <HAL_GetTick>
 8003670:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003674:	e009      	b.n	800368a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003676:	f7fd fe89 	bl	800138c <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e077      	b.n	800377a <HAL_RCC_OscConfig+0xe02>
 800368a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800368e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003692:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003694:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	fa93 f2a3 	rbit	r2, r3
 800369e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036a2:	601a      	str	r2, [r3, #0]
  return result;
 80036a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036aa:	fab3 f383 	clz	r3, r3
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	095b      	lsrs	r3, r3, #5
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d102      	bne.n	80036c4 <HAL_RCC_OscConfig+0xd4c>
 80036be:	4b31      	ldr	r3, [pc, #196]	; (8003784 <HAL_RCC_OscConfig+0xe0c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	e01b      	b.n	80036fc <HAL_RCC_OscConfig+0xd84>
 80036c4:	f107 0320 	add.w	r3, r7, #32
 80036c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ce:	f107 0320 	add.w	r3, r7, #32
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	fa93 f2a3 	rbit	r2, r3
 80036d8:	f107 031c 	add.w	r3, r7, #28
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	f107 0318 	add.w	r3, r7, #24
 80036e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	f107 0318 	add.w	r3, r7, #24
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	fa93 f2a3 	rbit	r2, r3
 80036f2:	f107 0314 	add.w	r3, r7, #20
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	4b22      	ldr	r3, [pc, #136]	; (8003784 <HAL_RCC_OscConfig+0xe0c>)
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	f107 0210 	add.w	r2, r7, #16
 8003700:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003704:	6011      	str	r1, [r2, #0]
 8003706:	f107 0210 	add.w	r2, r7, #16
 800370a:	6812      	ldr	r2, [r2, #0]
 800370c:	fa92 f1a2 	rbit	r1, r2
 8003710:	f107 020c 	add.w	r2, r7, #12
 8003714:	6011      	str	r1, [r2, #0]
  return result;
 8003716:	f107 020c 	add.w	r2, r7, #12
 800371a:	6812      	ldr	r2, [r2, #0]
 800371c:	fab2 f282 	clz	r2, r2
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	f042 0220 	orr.w	r2, r2, #32
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	f002 021f 	and.w	r2, r2, #31
 800372c:	2101      	movs	r1, #1
 800372e:	fa01 f202 	lsl.w	r2, r1, r2
 8003732:	4013      	ands	r3, r2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d19e      	bne.n	8003676 <HAL_RCC_OscConfig+0xcfe>
 8003738:	e01e      	b.n	8003778 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800373a:	1d3b      	adds	r3, r7, #4
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d101      	bne.n	8003748 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e018      	b.n	800377a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003748:	4b0e      	ldr	r3, [pc, #56]	; (8003784 <HAL_RCC_OscConfig+0xe0c>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003750:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003754:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003758:	1d3b      	adds	r3, r7, #4
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	429a      	cmp	r2, r3
 8003760:	d108      	bne.n	8003774 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003762:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003766:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800376a:	1d3b      	adds	r3, r7, #4
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003770:	429a      	cmp	r2, r3
 8003772:	d001      	beq.n	8003778 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e000      	b.n	800377a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40021000 	.word	0x40021000

08003788 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b09e      	sub	sp, #120	; 0x78
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003792:	2300      	movs	r3, #0
 8003794:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e162      	b.n	8003a66 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037a0:	4b90      	ldr	r3, [pc, #576]	; (80039e4 <HAL_RCC_ClockConfig+0x25c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d910      	bls.n	80037d0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ae:	4b8d      	ldr	r3, [pc, #564]	; (80039e4 <HAL_RCC_ClockConfig+0x25c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f023 0207 	bic.w	r2, r3, #7
 80037b6:	498b      	ldr	r1, [pc, #556]	; (80039e4 <HAL_RCC_ClockConfig+0x25c>)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037be:	4b89      	ldr	r3, [pc, #548]	; (80039e4 <HAL_RCC_ClockConfig+0x25c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d001      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e14a      	b.n	8003a66 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d008      	beq.n	80037ee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037dc:	4b82      	ldr	r3, [pc, #520]	; (80039e8 <HAL_RCC_ClockConfig+0x260>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	497f      	ldr	r1, [pc, #508]	; (80039e8 <HAL_RCC_ClockConfig+0x260>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 80dc 	beq.w	80039b4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d13c      	bne.n	800387e <HAL_RCC_ClockConfig+0xf6>
 8003804:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003808:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800380c:	fa93 f3a3 	rbit	r3, r3
 8003810:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003814:	fab3 f383 	clz	r3, r3
 8003818:	b2db      	uxtb	r3, r3
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	b2db      	uxtb	r3, r3
 800381e:	f043 0301 	orr.w	r3, r3, #1
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b01      	cmp	r3, #1
 8003826:	d102      	bne.n	800382e <HAL_RCC_ClockConfig+0xa6>
 8003828:	4b6f      	ldr	r3, [pc, #444]	; (80039e8 <HAL_RCC_ClockConfig+0x260>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	e00f      	b.n	800384e <HAL_RCC_ClockConfig+0xc6>
 800382e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003832:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003834:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003836:	fa93 f3a3 	rbit	r3, r3
 800383a:	667b      	str	r3, [r7, #100]	; 0x64
 800383c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003840:	663b      	str	r3, [r7, #96]	; 0x60
 8003842:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003844:	fa93 f3a3 	rbit	r3, r3
 8003848:	65fb      	str	r3, [r7, #92]	; 0x5c
 800384a:	4b67      	ldr	r3, [pc, #412]	; (80039e8 <HAL_RCC_ClockConfig+0x260>)
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003852:	65ba      	str	r2, [r7, #88]	; 0x58
 8003854:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003856:	fa92 f2a2 	rbit	r2, r2
 800385a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800385c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800385e:	fab2 f282 	clz	r2, r2
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	f042 0220 	orr.w	r2, r2, #32
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	f002 021f 	and.w	r2, r2, #31
 800386e:	2101      	movs	r1, #1
 8003870:	fa01 f202 	lsl.w	r2, r1, r2
 8003874:	4013      	ands	r3, r2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d17b      	bne.n	8003972 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e0f3      	b.n	8003a66 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d13c      	bne.n	8003900 <HAL_RCC_ClockConfig+0x178>
 8003886:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800388a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800388e:	fa93 f3a3 	rbit	r3, r3
 8003892:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003896:	fab3 f383 	clz	r3, r3
 800389a:	b2db      	uxtb	r3, r3
 800389c:	095b      	lsrs	r3, r3, #5
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d102      	bne.n	80038b0 <HAL_RCC_ClockConfig+0x128>
 80038aa:	4b4f      	ldr	r3, [pc, #316]	; (80039e8 <HAL_RCC_ClockConfig+0x260>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	e00f      	b.n	80038d0 <HAL_RCC_ClockConfig+0x148>
 80038b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038b8:	fa93 f3a3 	rbit	r3, r3
 80038bc:	647b      	str	r3, [r7, #68]	; 0x44
 80038be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038c2:	643b      	str	r3, [r7, #64]	; 0x40
 80038c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038c6:	fa93 f3a3 	rbit	r3, r3
 80038ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038cc:	4b46      	ldr	r3, [pc, #280]	; (80039e8 <HAL_RCC_ClockConfig+0x260>)
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038d4:	63ba      	str	r2, [r7, #56]	; 0x38
 80038d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038d8:	fa92 f2a2 	rbit	r2, r2
 80038dc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80038de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038e0:	fab2 f282 	clz	r2, r2
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	f042 0220 	orr.w	r2, r2, #32
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	f002 021f 	and.w	r2, r2, #31
 80038f0:	2101      	movs	r1, #1
 80038f2:	fa01 f202 	lsl.w	r2, r1, r2
 80038f6:	4013      	ands	r3, r2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d13a      	bne.n	8003972 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e0b2      	b.n	8003a66 <HAL_RCC_ClockConfig+0x2de>
 8003900:	2302      	movs	r3, #2
 8003902:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003906:	fa93 f3a3 	rbit	r3, r3
 800390a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800390c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800390e:	fab3 f383 	clz	r3, r3
 8003912:	b2db      	uxtb	r3, r3
 8003914:	095b      	lsrs	r3, r3, #5
 8003916:	b2db      	uxtb	r3, r3
 8003918:	f043 0301 	orr.w	r3, r3, #1
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b01      	cmp	r3, #1
 8003920:	d102      	bne.n	8003928 <HAL_RCC_ClockConfig+0x1a0>
 8003922:	4b31      	ldr	r3, [pc, #196]	; (80039e8 <HAL_RCC_ClockConfig+0x260>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	e00d      	b.n	8003944 <HAL_RCC_ClockConfig+0x1bc>
 8003928:	2302      	movs	r3, #2
 800392a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392e:	fa93 f3a3 	rbit	r3, r3
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
 8003934:	2302      	movs	r3, #2
 8003936:	623b      	str	r3, [r7, #32]
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	fa93 f3a3 	rbit	r3, r3
 800393e:	61fb      	str	r3, [r7, #28]
 8003940:	4b29      	ldr	r3, [pc, #164]	; (80039e8 <HAL_RCC_ClockConfig+0x260>)
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	2202      	movs	r2, #2
 8003946:	61ba      	str	r2, [r7, #24]
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	fa92 f2a2 	rbit	r2, r2
 800394e:	617a      	str	r2, [r7, #20]
  return result;
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	fab2 f282 	clz	r2, r2
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	f042 0220 	orr.w	r2, r2, #32
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	f002 021f 	and.w	r2, r2, #31
 8003962:	2101      	movs	r1, #1
 8003964:	fa01 f202 	lsl.w	r2, r1, r2
 8003968:	4013      	ands	r3, r2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e079      	b.n	8003a66 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003972:	4b1d      	ldr	r3, [pc, #116]	; (80039e8 <HAL_RCC_ClockConfig+0x260>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f023 0203 	bic.w	r2, r3, #3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	491a      	ldr	r1, [pc, #104]	; (80039e8 <HAL_RCC_ClockConfig+0x260>)
 8003980:	4313      	orrs	r3, r2
 8003982:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003984:	f7fd fd02 	bl	800138c <HAL_GetTick>
 8003988:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398a:	e00a      	b.n	80039a2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800398c:	f7fd fcfe 	bl	800138c <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	f241 3288 	movw	r2, #5000	; 0x1388
 800399a:	4293      	cmp	r3, r2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e061      	b.n	8003a66 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a2:	4b11      	ldr	r3, [pc, #68]	; (80039e8 <HAL_RCC_ClockConfig+0x260>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f003 020c 	and.w	r2, r3, #12
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d1eb      	bne.n	800398c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039b4:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <HAL_RCC_ClockConfig+0x25c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d214      	bcs.n	80039ec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c2:	4b08      	ldr	r3, [pc, #32]	; (80039e4 <HAL_RCC_ClockConfig+0x25c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f023 0207 	bic.w	r2, r3, #7
 80039ca:	4906      	ldr	r1, [pc, #24]	; (80039e4 <HAL_RCC_ClockConfig+0x25c>)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d2:	4b04      	ldr	r3, [pc, #16]	; (80039e4 <HAL_RCC_ClockConfig+0x25c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d005      	beq.n	80039ec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e040      	b.n	8003a66 <HAL_RCC_ClockConfig+0x2de>
 80039e4:	40022000 	.word	0x40022000
 80039e8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d008      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039f8:	4b1d      	ldr	r3, [pc, #116]	; (8003a70 <HAL_RCC_ClockConfig+0x2e8>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	491a      	ldr	r1, [pc, #104]	; (8003a70 <HAL_RCC_ClockConfig+0x2e8>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d009      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a16:	4b16      	ldr	r3, [pc, #88]	; (8003a70 <HAL_RCC_ClockConfig+0x2e8>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	4912      	ldr	r1, [pc, #72]	; (8003a70 <HAL_RCC_ClockConfig+0x2e8>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a2a:	f000 f829 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 8003a2e:	4601      	mov	r1, r0
 8003a30:	4b0f      	ldr	r3, [pc, #60]	; (8003a70 <HAL_RCC_ClockConfig+0x2e8>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a38:	22f0      	movs	r2, #240	; 0xf0
 8003a3a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	fa92 f2a2 	rbit	r2, r2
 8003a42:	60fa      	str	r2, [r7, #12]
  return result;
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	fab2 f282 	clz	r2, r2
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	40d3      	lsrs	r3, r2
 8003a4e:	4a09      	ldr	r2, [pc, #36]	; (8003a74 <HAL_RCC_ClockConfig+0x2ec>)
 8003a50:	5cd3      	ldrb	r3, [r2, r3]
 8003a52:	fa21 f303 	lsr.w	r3, r1, r3
 8003a56:	4a08      	ldr	r2, [pc, #32]	; (8003a78 <HAL_RCC_ClockConfig+0x2f0>)
 8003a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003a5a:	4b08      	ldr	r3, [pc, #32]	; (8003a7c <HAL_RCC_ClockConfig+0x2f4>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fd fc50 	bl	8001304 <HAL_InitTick>
  
  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3778      	adds	r7, #120	; 0x78
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40021000 	.word	0x40021000
 8003a74:	08005fbc 	.word	0x08005fbc
 8003a78:	20000000 	.word	0x20000000
 8003a7c:	20000004 	.word	0x20000004

08003a80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b08b      	sub	sp, #44	; 0x2c
 8003a84:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	61fb      	str	r3, [r7, #28]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61bb      	str	r3, [r7, #24]
 8003a8e:	2300      	movs	r3, #0
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003a9a:	4b29      	ldr	r3, [pc, #164]	; (8003b40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d002      	beq.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x30>
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d003      	beq.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x36>
 8003aae:	e03c      	b.n	8003b2a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ab0:	4b24      	ldr	r3, [pc, #144]	; (8003b44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ab2:	623b      	str	r3, [r7, #32]
      break;
 8003ab4:	e03c      	b.n	8003b30 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003abc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003ac0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	fa92 f2a2 	rbit	r2, r2
 8003ac8:	607a      	str	r2, [r7, #4]
  return result;
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	fab2 f282 	clz	r2, r2
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	40d3      	lsrs	r3, r2
 8003ad4:	4a1c      	ldr	r2, [pc, #112]	; (8003b48 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ad6:	5cd3      	ldrb	r3, [r2, r3]
 8003ad8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003ada:	4b19      	ldr	r3, [pc, #100]	; (8003b40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	220f      	movs	r2, #15
 8003ae4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	fa92 f2a2 	rbit	r2, r2
 8003aec:	60fa      	str	r2, [r7, #12]
  return result;
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	fab2 f282 	clz	r2, r2
 8003af4:	b2d2      	uxtb	r2, r2
 8003af6:	40d3      	lsrs	r3, r2
 8003af8:	4a14      	ldr	r2, [pc, #80]	; (8003b4c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003afa:	5cd3      	ldrb	r3, [r2, r3]
 8003afc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d008      	beq.n	8003b1a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b08:	4a0e      	ldr	r2, [pc, #56]	; (8003b44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	fb02 f303 	mul.w	r3, r2, r3
 8003b16:	627b      	str	r3, [r7, #36]	; 0x24
 8003b18:	e004      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	4a0c      	ldr	r2, [pc, #48]	; (8003b50 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b1e:	fb02 f303 	mul.w	r3, r2, r3
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	623b      	str	r3, [r7, #32]
      break;
 8003b28:	e002      	b.n	8003b30 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b2a:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b2c:	623b      	str	r3, [r7, #32]
      break;
 8003b2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b30:	6a3b      	ldr	r3, [r7, #32]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	372c      	adds	r7, #44	; 0x2c
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40021000 	.word	0x40021000
 8003b44:	007a1200 	.word	0x007a1200
 8003b48:	08005fd4 	.word	0x08005fd4
 8003b4c:	08005fe4 	.word	0x08005fe4
 8003b50:	003d0900 	.word	0x003d0900

08003b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b58:	4b03      	ldr	r3, [pc, #12]	; (8003b68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	20000000 	.word	0x20000000

08003b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003b72:	f7ff ffef 	bl	8003b54 <HAL_RCC_GetHCLKFreq>
 8003b76:	4601      	mov	r1, r0
 8003b78:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b80:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b84:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	fa92 f2a2 	rbit	r2, r2
 8003b8c:	603a      	str	r2, [r7, #0]
  return result;
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	fab2 f282 	clz	r2, r2
 8003b94:	b2d2      	uxtb	r2, r2
 8003b96:	40d3      	lsrs	r3, r2
 8003b98:	4a04      	ldr	r2, [pc, #16]	; (8003bac <HAL_RCC_GetPCLK1Freq+0x40>)
 8003b9a:	5cd3      	ldrb	r3, [r2, r3]
 8003b9c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	08005fcc 	.word	0x08005fcc

08003bb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003bb6:	f7ff ffcd 	bl	8003b54 <HAL_RCC_GetHCLKFreq>
 8003bba:	4601      	mov	r1, r0
 8003bbc:	4b0b      	ldr	r3, [pc, #44]	; (8003bec <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003bc4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003bc8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	fa92 f2a2 	rbit	r2, r2
 8003bd0:	603a      	str	r2, [r7, #0]
  return result;
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	fab2 f282 	clz	r2, r2
 8003bd8:	b2d2      	uxtb	r2, r2
 8003bda:	40d3      	lsrs	r3, r2
 8003bdc:	4a04      	ldr	r2, [pc, #16]	; (8003bf0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003bde:	5cd3      	ldrb	r3, [r2, r3]
 8003be0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003be4:	4618      	mov	r0, r3
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	08005fcc 	.word	0x08005fcc

08003bf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b092      	sub	sp, #72	; 0x48
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003c00:	2300      	movs	r3, #0
 8003c02:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 80d7 	beq.w	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003c12:	2300      	movs	r3, #0
 8003c14:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c18:	4b4e      	ldr	r3, [pc, #312]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c1a:	69db      	ldr	r3, [r3, #28]
 8003c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10e      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c24:	4b4b      	ldr	r3, [pc, #300]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	4a4a      	ldr	r2, [pc, #296]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c2e:	61d3      	str	r3, [r2, #28]
 8003c30:	4b48      	ldr	r3, [pc, #288]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c38:	60bb      	str	r3, [r7, #8]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c42:	4b45      	ldr	r3, [pc, #276]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d118      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c4e:	4b42      	ldr	r3, [pc, #264]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a41      	ldr	r2, [pc, #260]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c58:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c5a:	f7fd fb97 	bl	800138c <HAL_GetTick>
 8003c5e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c60:	e008      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c62:	f7fd fb93 	bl	800138c <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b64      	cmp	r3, #100	; 0x64
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e14b      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c74:	4b38      	ldr	r3, [pc, #224]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0f0      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c80:	4b34      	ldr	r3, [pc, #208]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c88:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 8084 	beq.w	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d07c      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ca0:	4b2c      	ldr	r3, [pc, #176]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003caa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb2:	fa93 f3a3 	rbit	r3, r3
 8003cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cba:	fab3 f383 	clz	r3, r3
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	4b26      	ldr	r3, [pc, #152]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	461a      	mov	r2, r3
 8003cca:	2301      	movs	r3, #1
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cd2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd6:	fa93 f3a3 	rbit	r3, r3
 8003cda:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cde:	fab3 f383 	clz	r3, r3
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	4b1d      	ldr	r3, [pc, #116]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ce8:	4413      	add	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	461a      	mov	r2, r3
 8003cee:	2300      	movs	r3, #0
 8003cf0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cf2:	4a18      	ldr	r2, [pc, #96]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d04b      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d02:	f7fd fb43 	bl	800138c <HAL_GetTick>
 8003d06:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d08:	e00a      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d0a:	f7fd fb3f 	bl	800138c <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e0f5      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003d20:	2302      	movs	r3, #2
 8003d22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d26:	fa93 f3a3 	rbit	r3, r3
 8003d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	623b      	str	r3, [r7, #32]
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	fa93 f3a3 	rbit	r3, r3
 8003d36:	61fb      	str	r3, [r7, #28]
  return result;
 8003d38:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d3a:	fab3 f383 	clz	r3, r3
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	095b      	lsrs	r3, r3, #5
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	f043 0302 	orr.w	r3, r3, #2
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d108      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003d4e:	4b01      	ldr	r3, [pc, #4]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	e00d      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003d54:	40021000 	.word	0x40021000
 8003d58:	40007000 	.word	0x40007000
 8003d5c:	10908100 	.word	0x10908100
 8003d60:	2302      	movs	r3, #2
 8003d62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	fa93 f3a3 	rbit	r3, r3
 8003d6a:	617b      	str	r3, [r7, #20]
 8003d6c:	4b69      	ldr	r3, [pc, #420]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	2202      	movs	r2, #2
 8003d72:	613a      	str	r2, [r7, #16]
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	fa92 f2a2 	rbit	r2, r2
 8003d7a:	60fa      	str	r2, [r7, #12]
  return result;
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	fab2 f282 	clz	r2, r2
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	f002 021f 	and.w	r2, r2, #31
 8003d8e:	2101      	movs	r1, #1
 8003d90:	fa01 f202 	lsl.w	r2, r1, r2
 8003d94:	4013      	ands	r3, r2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0b7      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d9a:	4b5e      	ldr	r3, [pc, #376]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	495b      	ldr	r1, [pc, #364]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003dac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d105      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db4:	4b57      	ldr	r3, [pc, #348]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	4a56      	ldr	r2, [pc, #344]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dbe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d008      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dcc:	4b51      	ldr	r3, [pc, #324]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd0:	f023 0203 	bic.w	r2, r3, #3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	494e      	ldr	r1, [pc, #312]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0320 	and.w	r3, r3, #32
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d008      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dea:	4b4a      	ldr	r3, [pc, #296]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dee:	f023 0210 	bic.w	r2, r3, #16
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	4947      	ldr	r1, [pc, #284]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d008      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003e08:	4b42      	ldr	r3, [pc, #264]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e14:	493f      	ldr	r1, [pc, #252]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d008      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e26:	4b3b      	ldr	r3, [pc, #236]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	f023 0220 	bic.w	r2, r3, #32
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	4938      	ldr	r1, [pc, #224]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d008      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e44:	4b33      	ldr	r3, [pc, #204]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e48:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	4930      	ldr	r1, [pc, #192]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d008      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e62:	4b2c      	ldr	r3, [pc, #176]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	4929      	ldr	r1, [pc, #164]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003e80:	4b24      	ldr	r3, [pc, #144]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e84:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	4921      	ldr	r1, [pc, #132]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d008      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003e9e:	4b1d      	ldr	r3, [pc, #116]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	491a      	ldr	r1, [pc, #104]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d008      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003ebc:	4b15      	ldr	r3, [pc, #84]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	4912      	ldr	r1, [pc, #72]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d008      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003eda:	4b0e      	ldr	r3, [pc, #56]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee6:	490b      	ldr	r1, [pc, #44]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d008      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003ef8:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f04:	4903      	ldr	r1, [pc, #12]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3748      	adds	r7, #72	; 0x48
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	40021000 	.word	0x40021000

08003f18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e01d      	b.n	8003f66 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d106      	bne.n	8003f44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7fc ffe8 	bl	8000f14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	3304      	adds	r3, #4
 8003f54:	4619      	mov	r1, r3
 8003f56:	4610      	mov	r0, r2
 8003f58:	f000 fd64 	bl	8004a24 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
	...

08003f70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0201 	orr.w	r2, r2, #1
 8003f86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	4b0c      	ldr	r3, [pc, #48]	; (8003fc0 <HAL_TIM_Base_Start_IT+0x50>)
 8003f90:	4013      	ands	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2b06      	cmp	r3, #6
 8003f98:	d00b      	beq.n	8003fb2 <HAL_TIM_Base_Start_IT+0x42>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa0:	d007      	beq.n	8003fb2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f042 0201 	orr.w	r2, r2, #1
 8003fb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	00010007 	.word	0x00010007

08003fc4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e01d      	b.n	8004012 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d106      	bne.n	8003ff0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f815 	bl	800401a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3304      	adds	r3, #4
 8004000:	4619      	mov	r1, r3
 8004002:	4610      	mov	r0, r2
 8004004:	f000 fd0e 	bl	8004a24 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800401a:	b480      	push	{r7}
 800401c:	b083      	sub	sp, #12
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004022:	bf00      	nop
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
	...

08004030 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b0c      	cmp	r3, #12
 800403e:	d841      	bhi.n	80040c4 <HAL_TIM_OC_Start_IT+0x94>
 8004040:	a201      	add	r2, pc, #4	; (adr r2, 8004048 <HAL_TIM_OC_Start_IT+0x18>)
 8004042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004046:	bf00      	nop
 8004048:	0800407d 	.word	0x0800407d
 800404c:	080040c5 	.word	0x080040c5
 8004050:	080040c5 	.word	0x080040c5
 8004054:	080040c5 	.word	0x080040c5
 8004058:	0800408f 	.word	0x0800408f
 800405c:	080040c5 	.word	0x080040c5
 8004060:	080040c5 	.word	0x080040c5
 8004064:	080040c5 	.word	0x080040c5
 8004068:	080040a1 	.word	0x080040a1
 800406c:	080040c5 	.word	0x080040c5
 8004070:	080040c5 	.word	0x080040c5
 8004074:	080040c5 	.word	0x080040c5
 8004078:	080040b3 	.word	0x080040b3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0202 	orr.w	r2, r2, #2
 800408a:	60da      	str	r2, [r3, #12]
      break;
 800408c:	e01b      	b.n	80040c6 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 0204 	orr.w	r2, r2, #4
 800409c:	60da      	str	r2, [r3, #12]
      break;
 800409e:	e012      	b.n	80040c6 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f042 0208 	orr.w	r2, r2, #8
 80040ae:	60da      	str	r2, [r3, #12]
      break;
 80040b0:	e009      	b.n	80040c6 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68da      	ldr	r2, [r3, #12]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f042 0210 	orr.w	r2, r2, #16
 80040c0:	60da      	str	r2, [r3, #12]
      break;
 80040c2:	e000      	b.n	80040c6 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 80040c4:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2201      	movs	r2, #1
 80040cc:	6839      	ldr	r1, [r7, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f001 f8de 	bl	8005290 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a1c      	ldr	r2, [pc, #112]	; (800414c <HAL_TIM_OC_Start_IT+0x11c>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d00e      	beq.n	80040fc <HAL_TIM_OC_Start_IT+0xcc>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a1b      	ldr	r2, [pc, #108]	; (8004150 <HAL_TIM_OC_Start_IT+0x120>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d009      	beq.n	80040fc <HAL_TIM_OC_Start_IT+0xcc>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a19      	ldr	r2, [pc, #100]	; (8004154 <HAL_TIM_OC_Start_IT+0x124>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d004      	beq.n	80040fc <HAL_TIM_OC_Start_IT+0xcc>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a18      	ldr	r2, [pc, #96]	; (8004158 <HAL_TIM_OC_Start_IT+0x128>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d101      	bne.n	8004100 <HAL_TIM_OC_Start_IT+0xd0>
 80040fc:	2301      	movs	r3, #1
 80040fe:	e000      	b.n	8004102 <HAL_TIM_OC_Start_IT+0xd2>
 8004100:	2300      	movs	r3, #0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d007      	beq.n	8004116 <HAL_TIM_OC_Start_IT+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004114:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	4b0f      	ldr	r3, [pc, #60]	; (800415c <HAL_TIM_OC_Start_IT+0x12c>)
 800411e:	4013      	ands	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2b06      	cmp	r3, #6
 8004126:	d00b      	beq.n	8004140 <HAL_TIM_OC_Start_IT+0x110>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800412e:	d007      	beq.n	8004140 <HAL_TIM_OC_Start_IT+0x110>
  {
    __HAL_TIM_ENABLE(htim);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f042 0201 	orr.w	r2, r2, #1
 800413e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	40012c00 	.word	0x40012c00
 8004150:	40014000 	.word	0x40014000
 8004154:	40014400 	.word	0x40014400
 8004158:	40014800 	.word	0x40014800
 800415c:	00010007 	.word	0x00010007

08004160 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e01d      	b.n	80041ae <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d106      	bne.n	800418c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7fc fe86 	bl	8000e98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3304      	adds	r3, #4
 800419c:	4619      	mov	r1, r3
 800419e:	4610      	mov	r0, r2
 80041a0:	f000 fc40 	bl	8004a24 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
	...

080041b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2201      	movs	r2, #1
 80041c8:	6839      	ldr	r1, [r7, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f001 f860 	bl	8005290 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a1c      	ldr	r2, [pc, #112]	; (8004248 <HAL_TIM_PWM_Start+0x90>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d00e      	beq.n	80041f8 <HAL_TIM_PWM_Start+0x40>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a1b      	ldr	r2, [pc, #108]	; (800424c <HAL_TIM_PWM_Start+0x94>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d009      	beq.n	80041f8 <HAL_TIM_PWM_Start+0x40>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a19      	ldr	r2, [pc, #100]	; (8004250 <HAL_TIM_PWM_Start+0x98>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d004      	beq.n	80041f8 <HAL_TIM_PWM_Start+0x40>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a18      	ldr	r2, [pc, #96]	; (8004254 <HAL_TIM_PWM_Start+0x9c>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d101      	bne.n	80041fc <HAL_TIM_PWM_Start+0x44>
 80041f8:	2301      	movs	r3, #1
 80041fa:	e000      	b.n	80041fe <HAL_TIM_PWM_Start+0x46>
 80041fc:	2300      	movs	r3, #0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d007      	beq.n	8004212 <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004210:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	4b0f      	ldr	r3, [pc, #60]	; (8004258 <HAL_TIM_PWM_Start+0xa0>)
 800421a:	4013      	ands	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2b06      	cmp	r3, #6
 8004222:	d00b      	beq.n	800423c <HAL_TIM_PWM_Start+0x84>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800422a:	d007      	beq.n	800423c <HAL_TIM_PWM_Start+0x84>
  {
    __HAL_TIM_ENABLE(htim);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0201 	orr.w	r2, r2, #1
 800423a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40012c00 	.word	0x40012c00
 800424c:	40014000 	.word	0x40014000
 8004250:	40014400 	.word	0x40014400
 8004254:	40014800 	.word	0x40014800
 8004258:	00010007 	.word	0x00010007

0800425c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b02      	cmp	r3, #2
 8004270:	d122      	bne.n	80042b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b02      	cmp	r3, #2
 800427e:	d11b      	bne.n	80042b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f06f 0202 	mvn.w	r2, #2
 8004288:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 fba1 	bl	80049e6 <HAL_TIM_IC_CaptureCallback>
 80042a4:	e005      	b.n	80042b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 fb93 	bl	80049d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 fba4 	bl	80049fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	f003 0304 	and.w	r3, r3, #4
 80042c2:	2b04      	cmp	r3, #4
 80042c4:	d122      	bne.n	800430c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b04      	cmp	r3, #4
 80042d2:	d11b      	bne.n	800430c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f06f 0204 	mvn.w	r2, #4
 80042dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2202      	movs	r2, #2
 80042e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fb77 	bl	80049e6 <HAL_TIM_IC_CaptureCallback>
 80042f8:	e005      	b.n	8004306 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 fb69 	bl	80049d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 fb7a 	bl	80049fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f003 0308 	and.w	r3, r3, #8
 8004316:	2b08      	cmp	r3, #8
 8004318:	d122      	bne.n	8004360 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f003 0308 	and.w	r3, r3, #8
 8004324:	2b08      	cmp	r3, #8
 8004326:	d11b      	bne.n	8004360 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f06f 0208 	mvn.w	r2, #8
 8004330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2204      	movs	r2, #4
 8004336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	f003 0303 	and.w	r3, r3, #3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 fb4d 	bl	80049e6 <HAL_TIM_IC_CaptureCallback>
 800434c:	e005      	b.n	800435a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fb3f 	bl	80049d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 fb50 	bl	80049fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f003 0310 	and.w	r3, r3, #16
 800436a:	2b10      	cmp	r3, #16
 800436c:	d122      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f003 0310 	and.w	r3, r3, #16
 8004378:	2b10      	cmp	r3, #16
 800437a:	d11b      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f06f 0210 	mvn.w	r2, #16
 8004384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2208      	movs	r2, #8
 800438a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fb23 	bl	80049e6 <HAL_TIM_IC_CaptureCallback>
 80043a0:	e005      	b.n	80043ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 fb15 	bl	80049d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 fb26 	bl	80049fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d10e      	bne.n	80043e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d107      	bne.n	80043e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f06f 0201 	mvn.w	r2, #1
 80043d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 faef 	bl	80049be <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ea:	2b80      	cmp	r3, #128	; 0x80
 80043ec:	d10e      	bne.n	800440c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f8:	2b80      	cmp	r3, #128	; 0x80
 80043fa:	d107      	bne.n	800440c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f001 f880 	bl	800550c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800441a:	d10e      	bne.n	800443a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004426:	2b80      	cmp	r3, #128	; 0x80
 8004428:	d107      	bne.n	800443a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f001 f873 	bl	8005520 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004444:	2b40      	cmp	r3, #64	; 0x40
 8004446:	d10e      	bne.n	8004466 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004452:	2b40      	cmp	r3, #64	; 0x40
 8004454:	d107      	bne.n	8004466 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800445e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 fad4 	bl	8004a0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	f003 0320 	and.w	r3, r3, #32
 8004470:	2b20      	cmp	r3, #32
 8004472:	d10e      	bne.n	8004492 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	f003 0320 	and.w	r3, r3, #32
 800447e:	2b20      	cmp	r3, #32
 8004480:	d107      	bne.n	8004492 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f06f 0220 	mvn.w	r2, #32
 800448a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f001 f833 	bl	80054f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004492:	bf00      	nop
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
	...

0800449c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d101      	bne.n	80044b6 <HAL_TIM_OC_ConfigChannel+0x1a>
 80044b2:	2302      	movs	r3, #2
 80044b4:	e06c      	b.n	8004590 <HAL_TIM_OC_ConfigChannel+0xf4>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2202      	movs	r2, #2
 80044c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b14      	cmp	r3, #20
 80044ca:	d857      	bhi.n	800457c <HAL_TIM_OC_ConfigChannel+0xe0>
 80044cc:	a201      	add	r2, pc, #4	; (adr r2, 80044d4 <HAL_TIM_OC_ConfigChannel+0x38>)
 80044ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d2:	bf00      	nop
 80044d4:	08004529 	.word	0x08004529
 80044d8:	0800457d 	.word	0x0800457d
 80044dc:	0800457d 	.word	0x0800457d
 80044e0:	0800457d 	.word	0x0800457d
 80044e4:	08004537 	.word	0x08004537
 80044e8:	0800457d 	.word	0x0800457d
 80044ec:	0800457d 	.word	0x0800457d
 80044f0:	0800457d 	.word	0x0800457d
 80044f4:	08004545 	.word	0x08004545
 80044f8:	0800457d 	.word	0x0800457d
 80044fc:	0800457d 	.word	0x0800457d
 8004500:	0800457d 	.word	0x0800457d
 8004504:	08004553 	.word	0x08004553
 8004508:	0800457d 	.word	0x0800457d
 800450c:	0800457d 	.word	0x0800457d
 8004510:	0800457d 	.word	0x0800457d
 8004514:	08004561 	.word	0x08004561
 8004518:	0800457d 	.word	0x0800457d
 800451c:	0800457d 	.word	0x0800457d
 8004520:	0800457d 	.word	0x0800457d
 8004524:	0800456f 	.word	0x0800456f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68b9      	ldr	r1, [r7, #8]
 800452e:	4618      	mov	r0, r3
 8004530:	f000 fae6 	bl	8004b00 <TIM_OC1_SetConfig>
      break;
 8004534:	e023      	b.n	800457e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68b9      	ldr	r1, [r7, #8]
 800453c:	4618      	mov	r0, r3
 800453e:	f000 fb65 	bl	8004c0c <TIM_OC2_SetConfig>
      break;
 8004542:	e01c      	b.n	800457e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68b9      	ldr	r1, [r7, #8]
 800454a:	4618      	mov	r0, r3
 800454c:	f000 fbde 	bl	8004d0c <TIM_OC3_SetConfig>
      break;
 8004550:	e015      	b.n	800457e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68b9      	ldr	r1, [r7, #8]
 8004558:	4618      	mov	r0, r3
 800455a:	f000 fc55 	bl	8004e08 <TIM_OC4_SetConfig>
      break;
 800455e:	e00e      	b.n	800457e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68b9      	ldr	r1, [r7, #8]
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fcb2 	bl	8004ed0 <TIM_OC5_SetConfig>
      break;
 800456c:	e007      	b.n	800457e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68b9      	ldr	r1, [r7, #8]
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fd09 	bl	8004f8c <TIM_OC6_SetConfig>
      break;
 800457a:	e000      	b.n	800457e <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 800457c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d101      	bne.n	80045b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80045ae:	2302      	movs	r3, #2
 80045b0:	e105      	b.n	80047be <HAL_TIM_PWM_ConfigChannel+0x226>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2202      	movs	r2, #2
 80045be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b14      	cmp	r3, #20
 80045c6:	f200 80f0 	bhi.w	80047aa <HAL_TIM_PWM_ConfigChannel+0x212>
 80045ca:	a201      	add	r2, pc, #4	; (adr r2, 80045d0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80045cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d0:	08004625 	.word	0x08004625
 80045d4:	080047ab 	.word	0x080047ab
 80045d8:	080047ab 	.word	0x080047ab
 80045dc:	080047ab 	.word	0x080047ab
 80045e0:	08004665 	.word	0x08004665
 80045e4:	080047ab 	.word	0x080047ab
 80045e8:	080047ab 	.word	0x080047ab
 80045ec:	080047ab 	.word	0x080047ab
 80045f0:	080046a7 	.word	0x080046a7
 80045f4:	080047ab 	.word	0x080047ab
 80045f8:	080047ab 	.word	0x080047ab
 80045fc:	080047ab 	.word	0x080047ab
 8004600:	080046e7 	.word	0x080046e7
 8004604:	080047ab 	.word	0x080047ab
 8004608:	080047ab 	.word	0x080047ab
 800460c:	080047ab 	.word	0x080047ab
 8004610:	08004729 	.word	0x08004729
 8004614:	080047ab 	.word	0x080047ab
 8004618:	080047ab 	.word	0x080047ab
 800461c:	080047ab 	.word	0x080047ab
 8004620:	08004769 	.word	0x08004769
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68b9      	ldr	r1, [r7, #8]
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fa68 	bl	8004b00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699a      	ldr	r2, [r3, #24]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0208 	orr.w	r2, r2, #8
 800463e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699a      	ldr	r2, [r3, #24]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 0204 	bic.w	r2, r2, #4
 800464e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6999      	ldr	r1, [r3, #24]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	691a      	ldr	r2, [r3, #16]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	619a      	str	r2, [r3, #24]
      break;
 8004662:	e0a3      	b.n	80047ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68b9      	ldr	r1, [r7, #8]
 800466a:	4618      	mov	r0, r3
 800466c:	f000 face 	bl	8004c0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	699a      	ldr	r2, [r3, #24]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800467e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	699a      	ldr	r2, [r3, #24]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800468e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6999      	ldr	r1, [r3, #24]
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	021a      	lsls	r2, r3, #8
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	619a      	str	r2, [r3, #24]
      break;
 80046a4:	e082      	b.n	80047ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68b9      	ldr	r1, [r7, #8]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 fb2d 	bl	8004d0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69da      	ldr	r2, [r3, #28]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f042 0208 	orr.w	r2, r2, #8
 80046c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	69da      	ldr	r2, [r3, #28]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0204 	bic.w	r2, r2, #4
 80046d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	69d9      	ldr	r1, [r3, #28]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	691a      	ldr	r2, [r3, #16]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	61da      	str	r2, [r3, #28]
      break;
 80046e4:	e062      	b.n	80047ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68b9      	ldr	r1, [r7, #8]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 fb8b 	bl	8004e08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	69da      	ldr	r2, [r3, #28]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004700:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	69da      	ldr	r2, [r3, #28]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004710:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	69d9      	ldr	r1, [r3, #28]
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	021a      	lsls	r2, r3, #8
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	61da      	str	r2, [r3, #28]
      break;
 8004726:	e041      	b.n	80047ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68b9      	ldr	r1, [r7, #8]
 800472e:	4618      	mov	r0, r3
 8004730:	f000 fbce 	bl	8004ed0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f042 0208 	orr.w	r2, r2, #8
 8004742:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 0204 	bic.w	r2, r2, #4
 8004752:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	691a      	ldr	r2, [r3, #16]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004766:	e021      	b.n	80047ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68b9      	ldr	r1, [r7, #8]
 800476e:	4618      	mov	r0, r3
 8004770:	f000 fc0c 	bl	8004f8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004782:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004792:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	021a      	lsls	r2, r3, #8
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80047a8:	e000      	b.n	80047ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 80047aa:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop

080047c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d101      	bne.n	80047e0 <HAL_TIM_ConfigClockSource+0x18>
 80047dc:	2302      	movs	r3, #2
 80047de:	e0a8      	b.n	8004932 <HAL_TIM_ConfigClockSource+0x16a>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004802:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800480a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b40      	cmp	r3, #64	; 0x40
 800481a:	d067      	beq.n	80048ec <HAL_TIM_ConfigClockSource+0x124>
 800481c:	2b40      	cmp	r3, #64	; 0x40
 800481e:	d80b      	bhi.n	8004838 <HAL_TIM_ConfigClockSource+0x70>
 8004820:	2b10      	cmp	r3, #16
 8004822:	d073      	beq.n	800490c <HAL_TIM_ConfigClockSource+0x144>
 8004824:	2b10      	cmp	r3, #16
 8004826:	d802      	bhi.n	800482e <HAL_TIM_ConfigClockSource+0x66>
 8004828:	2b00      	cmp	r3, #0
 800482a:	d06f      	beq.n	800490c <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800482c:	e078      	b.n	8004920 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800482e:	2b20      	cmp	r3, #32
 8004830:	d06c      	beq.n	800490c <HAL_TIM_ConfigClockSource+0x144>
 8004832:	2b30      	cmp	r3, #48	; 0x30
 8004834:	d06a      	beq.n	800490c <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004836:	e073      	b.n	8004920 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004838:	2b70      	cmp	r3, #112	; 0x70
 800483a:	d00d      	beq.n	8004858 <HAL_TIM_ConfigClockSource+0x90>
 800483c:	2b70      	cmp	r3, #112	; 0x70
 800483e:	d804      	bhi.n	800484a <HAL_TIM_ConfigClockSource+0x82>
 8004840:	2b50      	cmp	r3, #80	; 0x50
 8004842:	d033      	beq.n	80048ac <HAL_TIM_ConfigClockSource+0xe4>
 8004844:	2b60      	cmp	r3, #96	; 0x60
 8004846:	d041      	beq.n	80048cc <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004848:	e06a      	b.n	8004920 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800484a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800484e:	d066      	beq.n	800491e <HAL_TIM_ConfigClockSource+0x156>
 8004850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004854:	d017      	beq.n	8004886 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004856:	e063      	b.n	8004920 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6818      	ldr	r0, [r3, #0]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	6899      	ldr	r1, [r3, #8]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f000 fcf2 	bl	8005250 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800487a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	609a      	str	r2, [r3, #8]
      break;
 8004884:	e04c      	b.n	8004920 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6818      	ldr	r0, [r3, #0]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	6899      	ldr	r1, [r3, #8]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	f000 fcdb 	bl	8005250 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048a8:	609a      	str	r2, [r3, #8]
      break;
 80048aa:	e039      	b.n	8004920 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6818      	ldr	r0, [r3, #0]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	6859      	ldr	r1, [r3, #4]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	461a      	mov	r2, r3
 80048ba:	f000 fc4f 	bl	800515c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2150      	movs	r1, #80	; 0x50
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fca8 	bl	800521a <TIM_ITRx_SetConfig>
      break;
 80048ca:	e029      	b.n	8004920 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6818      	ldr	r0, [r3, #0]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	6859      	ldr	r1, [r3, #4]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	461a      	mov	r2, r3
 80048da:	f000 fc6e 	bl	80051ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2160      	movs	r1, #96	; 0x60
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 fc98 	bl	800521a <TIM_ITRx_SetConfig>
      break;
 80048ea:	e019      	b.n	8004920 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6818      	ldr	r0, [r3, #0]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	6859      	ldr	r1, [r3, #4]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	461a      	mov	r2, r3
 80048fa:	f000 fc2f 	bl	800515c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2140      	movs	r1, #64	; 0x40
 8004904:	4618      	mov	r0, r3
 8004906:	f000 fc88 	bl	800521a <TIM_ITRx_SetConfig>
      break;
 800490a:	e009      	b.n	8004920 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4619      	mov	r1, r3
 8004916:	4610      	mov	r0, r2
 8004918:	f000 fc7f 	bl	800521a <TIM_ITRx_SetConfig>
      break;
 800491c:	e000      	b.n	8004920 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800491e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b082      	sub	sp, #8
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
 8004942:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800494a:	2b01      	cmp	r3, #1
 800494c:	d101      	bne.n	8004952 <HAL_TIM_SlaveConfigSynchro+0x18>
 800494e:	2302      	movs	r3, #2
 8004950:	e031      	b.n	80049b6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2202      	movs	r2, #2
 800495e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004962:	6839      	ldr	r1, [r7, #0]
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 fb71 	bl	800504c <TIM_SlaveTimer_SetConfig>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d009      	beq.n	8004984 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e018      	b.n	80049b6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68da      	ldr	r2, [r3, #12]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004992:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68da      	ldr	r2, [r3, #12]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049a2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b083      	sub	sp, #12
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b083      	sub	sp, #12
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a02:	bf00      	nop
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
	...

08004a24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a2e      	ldr	r2, [pc, #184]	; (8004af0 <TIM_Base_SetConfig+0xcc>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d003      	beq.n	8004a44 <TIM_Base_SetConfig+0x20>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a42:	d108      	bne.n	8004a56 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a25      	ldr	r2, [pc, #148]	; (8004af0 <TIM_Base_SetConfig+0xcc>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d00f      	beq.n	8004a7e <TIM_Base_SetConfig+0x5a>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a64:	d00b      	beq.n	8004a7e <TIM_Base_SetConfig+0x5a>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a22      	ldr	r2, [pc, #136]	; (8004af4 <TIM_Base_SetConfig+0xd0>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d007      	beq.n	8004a7e <TIM_Base_SetConfig+0x5a>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a21      	ldr	r2, [pc, #132]	; (8004af8 <TIM_Base_SetConfig+0xd4>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d003      	beq.n	8004a7e <TIM_Base_SetConfig+0x5a>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a20      	ldr	r2, [pc, #128]	; (8004afc <TIM_Base_SetConfig+0xd8>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d108      	bne.n	8004a90 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a0e      	ldr	r2, [pc, #56]	; (8004af0 <TIM_Base_SetConfig+0xcc>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d00b      	beq.n	8004ad4 <TIM_Base_SetConfig+0xb0>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a0d      	ldr	r2, [pc, #52]	; (8004af4 <TIM_Base_SetConfig+0xd0>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d007      	beq.n	8004ad4 <TIM_Base_SetConfig+0xb0>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a0c      	ldr	r2, [pc, #48]	; (8004af8 <TIM_Base_SetConfig+0xd4>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d003      	beq.n	8004ad4 <TIM_Base_SetConfig+0xb0>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a0b      	ldr	r2, [pc, #44]	; (8004afc <TIM_Base_SetConfig+0xd8>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d103      	bne.n	8004adc <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	691a      	ldr	r2, [r3, #16]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	615a      	str	r2, [r3, #20]
}
 8004ae2:	bf00      	nop
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	40012c00 	.word	0x40012c00
 8004af4:	40014000 	.word	0x40014000
 8004af8:	40014400 	.word	0x40014400
 8004afc:	40014800 	.word	0x40014800

08004b00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	f023 0201 	bic.w	r2, r3, #1
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f023 0303 	bic.w	r3, r3, #3
 8004b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f023 0302 	bic.w	r3, r3, #2
 8004b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a28      	ldr	r2, [pc, #160]	; (8004bfc <TIM_OC1_SetConfig+0xfc>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d00b      	beq.n	8004b78 <TIM_OC1_SetConfig+0x78>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a27      	ldr	r2, [pc, #156]	; (8004c00 <TIM_OC1_SetConfig+0x100>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d007      	beq.n	8004b78 <TIM_OC1_SetConfig+0x78>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a26      	ldr	r2, [pc, #152]	; (8004c04 <TIM_OC1_SetConfig+0x104>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d003      	beq.n	8004b78 <TIM_OC1_SetConfig+0x78>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a25      	ldr	r2, [pc, #148]	; (8004c08 <TIM_OC1_SetConfig+0x108>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d10c      	bne.n	8004b92 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f023 0308 	bic.w	r3, r3, #8
 8004b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f023 0304 	bic.w	r3, r3, #4
 8004b90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a19      	ldr	r2, [pc, #100]	; (8004bfc <TIM_OC1_SetConfig+0xfc>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d00b      	beq.n	8004bb2 <TIM_OC1_SetConfig+0xb2>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a18      	ldr	r2, [pc, #96]	; (8004c00 <TIM_OC1_SetConfig+0x100>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d007      	beq.n	8004bb2 <TIM_OC1_SetConfig+0xb2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a17      	ldr	r2, [pc, #92]	; (8004c04 <TIM_OC1_SetConfig+0x104>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d003      	beq.n	8004bb2 <TIM_OC1_SetConfig+0xb2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a16      	ldr	r2, [pc, #88]	; (8004c08 <TIM_OC1_SetConfig+0x108>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d111      	bne.n	8004bd6 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	621a      	str	r2, [r3, #32]
}
 8004bf0:	bf00      	nop
 8004bf2:	371c      	adds	r7, #28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	40012c00 	.word	0x40012c00
 8004c00:	40014000 	.word	0x40014000
 8004c04:	40014400 	.word	0x40014400
 8004c08:	40014800 	.word	0x40014800

08004c0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	f023 0210 	bic.w	r2, r3, #16
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	021b      	lsls	r3, r3, #8
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f023 0320 	bic.w	r3, r3, #32
 8004c5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a24      	ldr	r2, [pc, #144]	; (8004cfc <TIM_OC2_SetConfig+0xf0>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d10d      	bne.n	8004c8c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	011b      	lsls	r3, r3, #4
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a1b      	ldr	r2, [pc, #108]	; (8004cfc <TIM_OC2_SetConfig+0xf0>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d00b      	beq.n	8004cac <TIM_OC2_SetConfig+0xa0>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a1a      	ldr	r2, [pc, #104]	; (8004d00 <TIM_OC2_SetConfig+0xf4>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d007      	beq.n	8004cac <TIM_OC2_SetConfig+0xa0>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a19      	ldr	r2, [pc, #100]	; (8004d04 <TIM_OC2_SetConfig+0xf8>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d003      	beq.n	8004cac <TIM_OC2_SetConfig+0xa0>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a18      	ldr	r2, [pc, #96]	; (8004d08 <TIM_OC2_SetConfig+0xfc>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d113      	bne.n	8004cd4 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cb2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cba:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	621a      	str	r2, [r3, #32]
}
 8004cee:	bf00      	nop
 8004cf0:	371c      	adds	r7, #28
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	40012c00 	.word	0x40012c00
 8004d00:	40014000 	.word	0x40014000
 8004d04:	40014400 	.word	0x40014400
 8004d08:	40014800 	.word	0x40014800

08004d0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 0303 	bic.w	r3, r3, #3
 8004d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	021b      	lsls	r3, r3, #8
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a23      	ldr	r2, [pc, #140]	; (8004df8 <TIM_OC3_SetConfig+0xec>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d10d      	bne.n	8004d8a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	021b      	lsls	r3, r3, #8
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d88:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a1a      	ldr	r2, [pc, #104]	; (8004df8 <TIM_OC3_SetConfig+0xec>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d00b      	beq.n	8004daa <TIM_OC3_SetConfig+0x9e>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a19      	ldr	r2, [pc, #100]	; (8004dfc <TIM_OC3_SetConfig+0xf0>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d007      	beq.n	8004daa <TIM_OC3_SetConfig+0x9e>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a18      	ldr	r2, [pc, #96]	; (8004e00 <TIM_OC3_SetConfig+0xf4>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d003      	beq.n	8004daa <TIM_OC3_SetConfig+0x9e>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a17      	ldr	r2, [pc, #92]	; (8004e04 <TIM_OC3_SetConfig+0xf8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d113      	bne.n	8004dd2 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004db0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004db8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	011b      	lsls	r3, r3, #4
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	621a      	str	r2, [r3, #32]
}
 8004dec:	bf00      	nop
 8004dee:	371c      	adds	r7, #28
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	40012c00 	.word	0x40012c00
 8004dfc:	40014000 	.word	0x40014000
 8004e00:	40014400 	.word	0x40014400
 8004e04:	40014800 	.word	0x40014800

08004e08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	021b      	lsls	r3, r3, #8
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	031b      	lsls	r3, r3, #12
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a16      	ldr	r2, [pc, #88]	; (8004ec0 <TIM_OC4_SetConfig+0xb8>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d00b      	beq.n	8004e84 <TIM_OC4_SetConfig+0x7c>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a15      	ldr	r2, [pc, #84]	; (8004ec4 <TIM_OC4_SetConfig+0xbc>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d007      	beq.n	8004e84 <TIM_OC4_SetConfig+0x7c>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a14      	ldr	r2, [pc, #80]	; (8004ec8 <TIM_OC4_SetConfig+0xc0>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d003      	beq.n	8004e84 <TIM_OC4_SetConfig+0x7c>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a13      	ldr	r2, [pc, #76]	; (8004ecc <TIM_OC4_SetConfig+0xc4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d109      	bne.n	8004e98 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	019b      	lsls	r3, r3, #6
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	621a      	str	r2, [r3, #32]
}
 8004eb2:	bf00      	nop
 8004eb4:	371c      	adds	r7, #28
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40012c00 	.word	0x40012c00
 8004ec4:	40014000 	.word	0x40014000
 8004ec8:	40014400 	.word	0x40014400
 8004ecc:	40014800 	.word	0x40014800

08004ed0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004f14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	041b      	lsls	r3, r3, #16
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a15      	ldr	r2, [pc, #84]	; (8004f7c <TIM_OC5_SetConfig+0xac>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d00b      	beq.n	8004f42 <TIM_OC5_SetConfig+0x72>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a14      	ldr	r2, [pc, #80]	; (8004f80 <TIM_OC5_SetConfig+0xb0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d007      	beq.n	8004f42 <TIM_OC5_SetConfig+0x72>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a13      	ldr	r2, [pc, #76]	; (8004f84 <TIM_OC5_SetConfig+0xb4>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d003      	beq.n	8004f42 <TIM_OC5_SetConfig+0x72>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a12      	ldr	r2, [pc, #72]	; (8004f88 <TIM_OC5_SetConfig+0xb8>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d109      	bne.n	8004f56 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	021b      	lsls	r3, r3, #8
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	621a      	str	r2, [r3, #32]
}
 8004f70:	bf00      	nop
 8004f72:	371c      	adds	r7, #28
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	40012c00 	.word	0x40012c00
 8004f80:	40014000 	.word	0x40014000
 8004f84:	40014400 	.word	0x40014400
 8004f88:	40014800 	.word	0x40014800

08004f8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b087      	sub	sp, #28
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	021b      	lsls	r3, r3, #8
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	051b      	lsls	r3, r3, #20
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a16      	ldr	r2, [pc, #88]	; (800503c <TIM_OC6_SetConfig+0xb0>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d00b      	beq.n	8005000 <TIM_OC6_SetConfig+0x74>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a15      	ldr	r2, [pc, #84]	; (8005040 <TIM_OC6_SetConfig+0xb4>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d007      	beq.n	8005000 <TIM_OC6_SetConfig+0x74>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a14      	ldr	r2, [pc, #80]	; (8005044 <TIM_OC6_SetConfig+0xb8>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d003      	beq.n	8005000 <TIM_OC6_SetConfig+0x74>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a13      	ldr	r2, [pc, #76]	; (8005048 <TIM_OC6_SetConfig+0xbc>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d109      	bne.n	8005014 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005006:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	029b      	lsls	r3, r3, #10
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	4313      	orrs	r3, r2
 8005012:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	621a      	str	r2, [r3, #32]
}
 800502e:	bf00      	nop
 8005030:	371c      	adds	r7, #28
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	40012c00 	.word	0x40012c00
 8005040:	40014000 	.word	0x40014000
 8005044:	40014400 	.word	0x40014400
 8005048:	40014800 	.word	0x40014800

0800504c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005064:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	4313      	orrs	r3, r2
 800506e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005076:	f023 0307 	bic.w	r3, r3, #7
 800507a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	4313      	orrs	r3, r2
 8005084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	2b30      	cmp	r3, #48	; 0x30
 8005094:	d05c      	beq.n	8005150 <TIM_SlaveTimer_SetConfig+0x104>
 8005096:	2b30      	cmp	r3, #48	; 0x30
 8005098:	d806      	bhi.n	80050a8 <TIM_SlaveTimer_SetConfig+0x5c>
 800509a:	2b10      	cmp	r3, #16
 800509c:	d058      	beq.n	8005150 <TIM_SlaveTimer_SetConfig+0x104>
 800509e:	2b20      	cmp	r3, #32
 80050a0:	d056      	beq.n	8005150 <TIM_SlaveTimer_SetConfig+0x104>
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d054      	beq.n	8005150 <TIM_SlaveTimer_SetConfig+0x104>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 80050a6:	e054      	b.n	8005152 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 80050a8:	2b50      	cmp	r3, #80	; 0x50
 80050aa:	d03d      	beq.n	8005128 <TIM_SlaveTimer_SetConfig+0xdc>
 80050ac:	2b50      	cmp	r3, #80	; 0x50
 80050ae:	d802      	bhi.n	80050b6 <TIM_SlaveTimer_SetConfig+0x6a>
 80050b0:	2b40      	cmp	r3, #64	; 0x40
 80050b2:	d010      	beq.n	80050d6 <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 80050b4:	e04d      	b.n	8005152 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 80050b6:	2b60      	cmp	r3, #96	; 0x60
 80050b8:	d040      	beq.n	800513c <TIM_SlaveTimer_SetConfig+0xf0>
 80050ba:	2b70      	cmp	r3, #112	; 0x70
 80050bc:	d000      	beq.n	80050c0 <TIM_SlaveTimer_SetConfig+0x74>
      break;
 80050be:	e048      	b.n	8005152 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6818      	ldr	r0, [r3, #0]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	68d9      	ldr	r1, [r3, #12]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	f000 f8be 	bl	8005250 <TIM_ETR_SetConfig>
      break;
 80050d4:	e03d      	b.n	8005152 <TIM_SlaveTimer_SetConfig+0x106>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b05      	cmp	r3, #5
 80050dc:	d101      	bne.n	80050e2 <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e038      	b.n	8005154 <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6a1a      	ldr	r2, [r3, #32]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 0201 	bic.w	r2, r2, #1
 80050f8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005108:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	011b      	lsls	r3, r3, #4
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	621a      	str	r2, [r3, #32]
      break;
 8005126:	e014      	b.n	8005152 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6818      	ldr	r0, [r3, #0]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	6899      	ldr	r1, [r3, #8]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	461a      	mov	r2, r3
 8005136:	f000 f811 	bl	800515c <TIM_TI1_ConfigInputStage>
      break;
 800513a:	e00a      	b.n	8005152 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6818      	ldr	r0, [r3, #0]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	6899      	ldr	r1, [r3, #8]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	461a      	mov	r2, r3
 800514a:	f000 f836 	bl	80051ba <TIM_TI2_ConfigInputStage>
      break;
 800514e:	e000      	b.n	8005152 <TIM_SlaveTimer_SetConfig+0x106>
      break;
 8005150:	bf00      	nop
  }
  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3718      	adds	r7, #24
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	f023 0201 	bic.w	r2, r3, #1
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	011b      	lsls	r3, r3, #4
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	4313      	orrs	r3, r2
 8005190:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f023 030a 	bic.w	r3, r3, #10
 8005198:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	4313      	orrs	r3, r2
 80051a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	621a      	str	r2, [r3, #32]
}
 80051ae:	bf00      	nop
 80051b0:	371c      	adds	r7, #28
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b087      	sub	sp, #28
 80051be:	af00      	add	r7, sp, #0
 80051c0:	60f8      	str	r0, [r7, #12]
 80051c2:	60b9      	str	r1, [r7, #8]
 80051c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	f023 0210 	bic.w	r2, r3, #16
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	031b      	lsls	r3, r3, #12
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	011b      	lsls	r3, r3, #4
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	4313      	orrs	r3, r2
 8005200:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	621a      	str	r2, [r3, #32]
}
 800520e:	bf00      	nop
 8005210:	371c      	adds	r7, #28
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800521a:	b480      	push	{r7}
 800521c:	b085      	sub	sp, #20
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
 8005222:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005230:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4313      	orrs	r3, r2
 8005238:	f043 0307 	orr.w	r3, r3, #7
 800523c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	609a      	str	r2, [r3, #8]
}
 8005244:	bf00      	nop
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
 800525c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800526a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	021a      	lsls	r2, r3, #8
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	431a      	orrs	r2, r3
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	4313      	orrs	r3, r2
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	4313      	orrs	r3, r2
 800527c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	609a      	str	r2, [r3, #8]
}
 8005284:	bf00      	nop
 8005286:	371c      	adds	r7, #28
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005290:	b480      	push	{r7}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f003 031f 	and.w	r3, r3, #31
 80052a2:	2201      	movs	r2, #1
 80052a4:	fa02 f303 	lsl.w	r3, r2, r3
 80052a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6a1a      	ldr	r2, [r3, #32]
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	43db      	mvns	r3, r3
 80052b2:	401a      	ands	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6a1a      	ldr	r2, [r3, #32]
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	f003 031f 	and.w	r3, r3, #31
 80052c2:	6879      	ldr	r1, [r7, #4]
 80052c4:	fa01 f303 	lsl.w	r3, r1, r3
 80052c8:	431a      	orrs	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	621a      	str	r2, [r3, #32]
}
 80052ce:	bf00      	nop
 80052d0:	371c      	adds	r7, #28
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
	...

080052dc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2204      	movs	r2, #4
 80052ec:	6839      	ldr	r1, [r7, #0]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 f920 	bl	8005534 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005302:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689a      	ldr	r2, [r3, #8]
 800530a:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <HAL_TIMEx_PWMN_Start+0x5c>)
 800530c:	4013      	ands	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2b06      	cmp	r3, #6
 8005314:	d00b      	beq.n	800532e <HAL_TIMEx_PWMN_Start+0x52>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800531c:	d007      	beq.n	800532e <HAL_TIMEx_PWMN_Start+0x52>
  {
    __HAL_TIM_ENABLE(htim);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f042 0201 	orr.w	r2, r2, #1
 800532c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	00010007 	.word	0x00010007

0800533c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800534c:	2b01      	cmp	r3, #1
 800534e:	d101      	bne.n	8005354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005350:	2302      	movs	r3, #2
 8005352:	e04f      	b.n	80053f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a21      	ldr	r2, [pc, #132]	; (8005400 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d108      	bne.n	8005390 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005384:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	4313      	orrs	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005396:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	4313      	orrs	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a14      	ldr	r2, [pc, #80]	; (8005400 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d009      	beq.n	80053c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053bc:	d004      	beq.n	80053c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a10      	ldr	r2, [pc, #64]	; (8005404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d10c      	bne.n	80053e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3714      	adds	r7, #20
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	40012c00 	.word	0x40012c00
 8005404:	40014000 	.word	0x40014000

08005408 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005412:	2300      	movs	r3, #0
 8005414:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800541c:	2b01      	cmp	r3, #1
 800541e:	d101      	bne.n	8005424 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005420:	2302      	movs	r3, #2
 8005422:	e060      	b.n	80054e6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	4313      	orrs	r3, r2
 8005438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	4313      	orrs	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4313      	orrs	r3, r2
 8005462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	4313      	orrs	r3, r2
 8005470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	4313      	orrs	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	041b      	lsls	r3, r3, #16
 800549a:	4313      	orrs	r3, r2
 800549c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a14      	ldr	r2, [pc, #80]	; (80054f4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d115      	bne.n	80054d4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	051b      	lsls	r3, r3, #20
 80054b4:	4313      	orrs	r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	40012c00 	.word	0x40012c00

080054f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005534:	b480      	push	{r7}
 8005536:	b087      	sub	sp, #28
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	f003 031f 	and.w	r3, r3, #31
 8005546:	2204      	movs	r2, #4
 8005548:	fa02 f303 	lsl.w	r3, r2, r3
 800554c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6a1a      	ldr	r2, [r3, #32]
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	43db      	mvns	r3, r3
 8005556:	401a      	ands	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6a1a      	ldr	r2, [r3, #32]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f003 031f 	and.w	r3, r3, #31
 8005566:	6879      	ldr	r1, [r7, #4]
 8005568:	fa01 f303 	lsl.w	r3, r1, r3
 800556c:	431a      	orrs	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	621a      	str	r2, [r3, #32]
}
 8005572:	bf00      	nop
 8005574:	371c      	adds	r7, #28
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b082      	sub	sp, #8
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e040      	b.n	8005612 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005594:	2b00      	cmp	r3, #0
 8005596:	d106      	bne.n	80055a6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7fb fd61 	bl	8001068 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2224      	movs	r2, #36	; 0x24
 80055aa:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f022 0201 	bic.w	r2, r2, #1
 80055ba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f987 	bl	80058d0 <UART_SetConfig>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d101      	bne.n	80055cc <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e022      	b.n	8005612 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d002      	beq.n	80055da <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 fafd 	bl	8005bd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055f8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f042 0201 	orr.w	r2, r2, #1
 8005608:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 fb84 	bl	8005d18 <UART_CheckIdleState>
 8005610:	4603      	mov	r3, r0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3708      	adds	r7, #8
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
	...

0800561c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b088      	sub	sp, #32
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800563c:	69fa      	ldr	r2, [r7, #28]
 800563e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005642:	4013      	ands	r3, r2
 8005644:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d113      	bne.n	8005674 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	f003 0320 	and.w	r3, r3, #32
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00e      	beq.n	8005674 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	f003 0320 	and.w	r3, r3, #32
 800565c:	2b00      	cmp	r3, #0
 800565e:	d009      	beq.n	8005674 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 8114 	beq.w	8005892 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	4798      	blx	r3
      }
      return;
 8005672:	e10e      	b.n	8005892 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 80d6 	beq.w	8005828 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	2b00      	cmp	r3, #0
 8005684:	d105      	bne.n	8005692 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 80cb 	beq.w	8005828 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00e      	beq.n	80056ba <HAL_UART_IRQHandler+0x9e>
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d009      	beq.n	80056ba <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2201      	movs	r2, #1
 80056ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056b2:	f043 0201 	orr.w	r2, r3, #1
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00e      	beq.n	80056e2 <HAL_UART_IRQHandler+0xc6>
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d009      	beq.n	80056e2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2202      	movs	r2, #2
 80056d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056da:	f043 0204 	orr.w	r2, r3, #4
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00e      	beq.n	800570a <HAL_UART_IRQHandler+0xee>
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d009      	beq.n	800570a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2204      	movs	r2, #4
 80056fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005702:	f043 0202 	orr.w	r2, r3, #2
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	f003 0308 	and.w	r3, r3, #8
 8005710:	2b00      	cmp	r3, #0
 8005712:	d013      	beq.n	800573c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	f003 0320 	and.w	r3, r3, #32
 800571a:	2b00      	cmp	r3, #0
 800571c:	d104      	bne.n	8005728 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005724:	2b00      	cmp	r3, #0
 8005726:	d009      	beq.n	800573c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2208      	movs	r2, #8
 800572e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005734:	f043 0208 	orr.w	r2, r3, #8
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00f      	beq.n	8005766 <HAL_UART_IRQHandler+0x14a>
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00a      	beq.n	8005766 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005758:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800575e:	f043 0220 	orr.w	r2, r3, #32
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 8093 	beq.w	8005896 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	f003 0320 	and.w	r3, r3, #32
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00c      	beq.n	8005794 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	f003 0320 	and.w	r3, r3, #32
 8005780:	2b00      	cmp	r3, #0
 8005782:	d007      	beq.n	8005794 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005788:	2b00      	cmp	r3, #0
 800578a:	d003      	beq.n	8005794 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005798:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a4:	2b40      	cmp	r3, #64	; 0x40
 80057a6:	d004      	beq.n	80057b2 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d031      	beq.n	8005816 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fb70 	bl	8005e98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c2:	2b40      	cmp	r3, #64	; 0x40
 80057c4:	d123      	bne.n	800580e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689a      	ldr	r2, [r3, #8]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057d4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d013      	beq.n	8005806 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057e2:	4a30      	ldr	r2, [pc, #192]	; (80058a4 <HAL_UART_IRQHandler+0x288>)
 80057e4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fc fdcd 	bl	800238a <HAL_DMA_Abort_IT>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d016      	beq.n	8005824 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005800:	4610      	mov	r0, r2
 8005802:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005804:	e00e      	b.n	8005824 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f858 	bl	80058bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800580c:	e00a      	b.n	8005824 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f854 	bl	80058bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005814:	e006      	b.n	8005824 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f850 	bl	80058bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005822:	e038      	b.n	8005896 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005824:	bf00      	nop
    return;
 8005826:	e036      	b.n	8005896 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00d      	beq.n	800584e <HAL_UART_IRQHandler+0x232>
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d008      	beq.n	800584e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005844:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fb75 	bl	8005f36 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800584c:	e026      	b.n	800589c <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00d      	beq.n	8005874 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585e:	2b00      	cmp	r3, #0
 8005860:	d008      	beq.n	8005874 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005866:	2b00      	cmp	r3, #0
 8005868:	d017      	beq.n	800589a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	4798      	blx	r3
    }
    return;
 8005872:	e012      	b.n	800589a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00e      	beq.n	800589c <HAL_UART_IRQHandler+0x280>
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005884:	2b00      	cmp	r3, #0
 8005886:	d009      	beq.n	800589c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 fb3b 	bl	8005f04 <UART_EndTransmit_IT>
    return;
 800588e:	bf00      	nop
 8005890:	e004      	b.n	800589c <HAL_UART_IRQHandler+0x280>
      return;
 8005892:	bf00      	nop
 8005894:	e002      	b.n	800589c <HAL_UART_IRQHandler+0x280>
    return;
 8005896:	bf00      	nop
 8005898:	e000      	b.n	800589c <HAL_UART_IRQHandler+0x280>
    return;
 800589a:	bf00      	nop
  }

}
 800589c:	3720      	adds	r7, #32
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	08005ed9 	.word	0x08005ed9

080058a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b088      	sub	sp, #32
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80058d8:	2300      	movs	r3, #0
 80058da:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80058dc:	2300      	movs	r3, #0
 80058de:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689a      	ldr	r2, [r3, #8]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	431a      	orrs	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	431a      	orrs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	69db      	ldr	r3, [r3, #28]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	4ba2      	ldr	r3, [pc, #648]	; (8005b88 <UART_SetConfig+0x2b8>)
 8005900:	4013      	ands	r3, r2
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	6812      	ldr	r2, [r2, #0]
 8005906:	6939      	ldr	r1, [r7, #16]
 8005908:	430b      	orrs	r3, r1
 800590a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a1b      	ldr	r3, [r3, #32]
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	4313      	orrs	r3, r2
 8005930:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	430a      	orrs	r2, r1
 8005944:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a90      	ldr	r2, [pc, #576]	; (8005b8c <UART_SetConfig+0x2bc>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d121      	bne.n	8005994 <UART_SetConfig+0xc4>
 8005950:	4b8f      	ldr	r3, [pc, #572]	; (8005b90 <UART_SetConfig+0x2c0>)
 8005952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005954:	f003 0303 	and.w	r3, r3, #3
 8005958:	2b03      	cmp	r3, #3
 800595a:	d817      	bhi.n	800598c <UART_SetConfig+0xbc>
 800595c:	a201      	add	r2, pc, #4	; (adr r2, 8005964 <UART_SetConfig+0x94>)
 800595e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005962:	bf00      	nop
 8005964:	08005975 	.word	0x08005975
 8005968:	08005981 	.word	0x08005981
 800596c:	08005987 	.word	0x08005987
 8005970:	0800597b 	.word	0x0800597b
 8005974:	2300      	movs	r3, #0
 8005976:	77fb      	strb	r3, [r7, #31]
 8005978:	e01e      	b.n	80059b8 <UART_SetConfig+0xe8>
 800597a:	2302      	movs	r3, #2
 800597c:	77fb      	strb	r3, [r7, #31]
 800597e:	e01b      	b.n	80059b8 <UART_SetConfig+0xe8>
 8005980:	2304      	movs	r3, #4
 8005982:	77fb      	strb	r3, [r7, #31]
 8005984:	e018      	b.n	80059b8 <UART_SetConfig+0xe8>
 8005986:	2308      	movs	r3, #8
 8005988:	77fb      	strb	r3, [r7, #31]
 800598a:	e015      	b.n	80059b8 <UART_SetConfig+0xe8>
 800598c:	2310      	movs	r3, #16
 800598e:	77fb      	strb	r3, [r7, #31]
 8005990:	bf00      	nop
 8005992:	e011      	b.n	80059b8 <UART_SetConfig+0xe8>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a7e      	ldr	r2, [pc, #504]	; (8005b94 <UART_SetConfig+0x2c4>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d102      	bne.n	80059a4 <UART_SetConfig+0xd4>
 800599e:	2300      	movs	r3, #0
 80059a0:	77fb      	strb	r3, [r7, #31]
 80059a2:	e009      	b.n	80059b8 <UART_SetConfig+0xe8>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a7b      	ldr	r2, [pc, #492]	; (8005b98 <UART_SetConfig+0x2c8>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d102      	bne.n	80059b4 <UART_SetConfig+0xe4>
 80059ae:	2300      	movs	r3, #0
 80059b0:	77fb      	strb	r3, [r7, #31]
 80059b2:	e001      	b.n	80059b8 <UART_SetConfig+0xe8>
 80059b4:	2310      	movs	r3, #16
 80059b6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059c0:	f040 8082 	bne.w	8005ac8 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80059c4:	7ffb      	ldrb	r3, [r7, #31]
 80059c6:	2b08      	cmp	r3, #8
 80059c8:	d85e      	bhi.n	8005a88 <UART_SetConfig+0x1b8>
 80059ca:	a201      	add	r2, pc, #4	; (adr r2, 80059d0 <UART_SetConfig+0x100>)
 80059cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d0:	080059f5 	.word	0x080059f5
 80059d4:	08005a15 	.word	0x08005a15
 80059d8:	08005a35 	.word	0x08005a35
 80059dc:	08005a89 	.word	0x08005a89
 80059e0:	08005a51 	.word	0x08005a51
 80059e4:	08005a89 	.word	0x08005a89
 80059e8:	08005a89 	.word	0x08005a89
 80059ec:	08005a89 	.word	0x08005a89
 80059f0:	08005a71 	.word	0x08005a71
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059f4:	f7fe f8ba 	bl	8003b6c <HAL_RCC_GetPCLK1Freq>
 80059f8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	005a      	lsls	r2, r3, #1
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	085b      	lsrs	r3, r3, #1
 8005a04:	441a      	add	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	61bb      	str	r3, [r7, #24]
        break;
 8005a12:	e03c      	b.n	8005a8e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a14:	f7fe f8cc 	bl	8003bb0 <HAL_RCC_GetPCLK2Freq>
 8005a18:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	005a      	lsls	r2, r3, #1
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	085b      	lsrs	r3, r3, #1
 8005a24:	441a      	add	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	61bb      	str	r3, [r7, #24]
        break;
 8005a32:	e02c      	b.n	8005a8e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	085b      	lsrs	r3, r3, #1
 8005a3a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005a3e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	6852      	ldr	r2, [r2, #4]
 8005a46:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	61bb      	str	r3, [r7, #24]
        break;
 8005a4e:	e01e      	b.n	8005a8e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a50:	f7fe f816 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 8005a54:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	005a      	lsls	r2, r3, #1
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	085b      	lsrs	r3, r3, #1
 8005a60:	441a      	add	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	61bb      	str	r3, [r7, #24]
        break;
 8005a6e:	e00e      	b.n	8005a8e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	085b      	lsrs	r3, r3, #1
 8005a76:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	61bb      	str	r3, [r7, #24]
        break;
 8005a86:	e002      	b.n	8005a8e <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	75fb      	strb	r3, [r7, #23]
        break;
 8005a8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	2b0f      	cmp	r3, #15
 8005a92:	d916      	bls.n	8005ac2 <UART_SetConfig+0x1f2>
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a9a:	d212      	bcs.n	8005ac2 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	f023 030f 	bic.w	r3, r3, #15
 8005aa4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	085b      	lsrs	r3, r3, #1
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	f003 0307 	and.w	r3, r3, #7
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	897b      	ldrh	r3, [r7, #10]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	897a      	ldrh	r2, [r7, #10]
 8005abe:	60da      	str	r2, [r3, #12]
 8005ac0:	e07d      	b.n	8005bbe <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	75fb      	strb	r3, [r7, #23]
 8005ac6:	e07a      	b.n	8005bbe <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 8005ac8:	7ffb      	ldrb	r3, [r7, #31]
 8005aca:	2b08      	cmp	r3, #8
 8005acc:	d866      	bhi.n	8005b9c <UART_SetConfig+0x2cc>
 8005ace:	a201      	add	r2, pc, #4	; (adr r2, 8005ad4 <UART_SetConfig+0x204>)
 8005ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad4:	08005af9 	.word	0x08005af9
 8005ad8:	08005b17 	.word	0x08005b17
 8005adc:	08005b35 	.word	0x08005b35
 8005ae0:	08005b9d 	.word	0x08005b9d
 8005ae4:	08005b51 	.word	0x08005b51
 8005ae8:	08005b9d 	.word	0x08005b9d
 8005aec:	08005b9d 	.word	0x08005b9d
 8005af0:	08005b9d 	.word	0x08005b9d
 8005af4:	08005b6f 	.word	0x08005b6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005af8:	f7fe f838 	bl	8003b6c <HAL_RCC_GetPCLK1Freq>
 8005afc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	085a      	lsrs	r2, r3, #1
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	441a      	add	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	61bb      	str	r3, [r7, #24]
        break;
 8005b14:	e045      	b.n	8005ba2 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b16:	f7fe f84b 	bl	8003bb0 <HAL_RCC_GetPCLK2Freq>
 8005b1a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	085a      	lsrs	r2, r3, #1
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	441a      	add	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	61bb      	str	r3, [r7, #24]
        break;
 8005b32:	e036      	b.n	8005ba2 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	085b      	lsrs	r3, r3, #1
 8005b3a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8005b3e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	6852      	ldr	r2, [r2, #4]
 8005b46:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	61bb      	str	r3, [r7, #24]
        break;
 8005b4e:	e028      	b.n	8005ba2 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b50:	f7fd ff96 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 8005b54:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	085a      	lsrs	r2, r3, #1
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	441a      	add	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	61bb      	str	r3, [r7, #24]
        break;
 8005b6c:	e019      	b.n	8005ba2 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	085b      	lsrs	r3, r3, #1
 8005b74:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	61bb      	str	r3, [r7, #24]
        break;
 8005b84:	e00d      	b.n	8005ba2 <UART_SetConfig+0x2d2>
 8005b86:	bf00      	nop
 8005b88:	efff69f3 	.word	0xefff69f3
 8005b8c:	40013800 	.word	0x40013800
 8005b90:	40021000 	.word	0x40021000
 8005b94:	40004400 	.word	0x40004400
 8005b98:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	75fb      	strb	r3, [r7, #23]
        break;
 8005ba0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	2b0f      	cmp	r3, #15
 8005ba6:	d908      	bls.n	8005bba <UART_SetConfig+0x2ea>
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bae:	d204      	bcs.n	8005bba <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	69ba      	ldr	r2, [r7, #24]
 8005bb6:	60da      	str	r2, [r3, #12]
 8005bb8:	e001      	b.n	8005bbe <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3720      	adds	r7, #32
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00a      	beq.n	8005bfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00a      	beq.n	8005c20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c24:	f003 0304 	and.w	r3, r3, #4
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00a      	beq.n	8005c42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c46:	f003 0308 	and.w	r3, r3, #8
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00a      	beq.n	8005c64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	f003 0310 	and.w	r3, r3, #16
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00a      	beq.n	8005c86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8a:	f003 0320 	and.w	r3, r3, #32
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00a      	beq.n	8005ca8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d01a      	beq.n	8005cea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cd2:	d10a      	bne.n	8005cea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00a      	beq.n	8005d0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	605a      	str	r2, [r3, #4]
  }
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af02      	add	r7, sp, #8
 8005d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005d26:	f7fb fb31 	bl	800138c <HAL_GetTick>
 8005d2a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0308 	and.w	r3, r3, #8
 8005d36:	2b08      	cmp	r3, #8
 8005d38:	d10e      	bne.n	8005d58 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f82a 	bl	8005da2 <UART_WaitOnFlagUntilTimeout>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d001      	beq.n	8005d58 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e020      	b.n	8005d9a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0304 	and.w	r3, r3, #4
 8005d62:	2b04      	cmp	r3, #4
 8005d64:	d10e      	bne.n	8005d84 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f814 	bl	8005da2 <UART_WaitOnFlagUntilTimeout>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e00a      	b.n	8005d9a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2220      	movs	r2, #32
 8005d88:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b084      	sub	sp, #16
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	60f8      	str	r0, [r7, #12]
 8005daa:	60b9      	str	r1, [r7, #8]
 8005dac:	603b      	str	r3, [r7, #0]
 8005dae:	4613      	mov	r3, r2
 8005db0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005db2:	e05d      	b.n	8005e70 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dba:	d059      	beq.n	8005e70 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dbc:	f7fb fae6 	bl	800138c <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d302      	bcc.n	8005dd2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d11b      	bne.n	8005e0a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005de0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689a      	ldr	r2, [r3, #8]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 0201 	bic.w	r2, r2, #1
 8005df0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2220      	movs	r2, #32
 8005df6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e042      	b.n	8005e90 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d02b      	beq.n	8005e70 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e26:	d123      	bne.n	8005e70 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e30:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e40:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	689a      	ldr	r2, [r3, #8]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f022 0201 	bic.w	r2, r2, #1
 8005e50:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2220      	movs	r2, #32
 8005e56:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2220      	movs	r2, #32
 8005e62:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e00f      	b.n	8005e90 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	69da      	ldr	r2, [r3, #28]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	4013      	ands	r3, r2
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	bf0c      	ite	eq
 8005e80:	2301      	moveq	r3, #1
 8005e82:	2300      	movne	r3, #0
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	461a      	mov	r2, r3
 8005e88:	79fb      	ldrb	r3, [r7, #7]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d092      	beq.n	8005db4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005eae:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689a      	ldr	r2, [r3, #8]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f022 0201 	bic.w	r2, r2, #1
 8005ebe:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f7ff fce0 	bl	80058bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005efc:	bf00      	nop
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f1a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7ff fcbd 	bl	80058a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f2e:	bf00      	nop
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005f3e:	bf00      	nop
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
	...

08005f4c <__libc_init_array>:
 8005f4c:	b570      	push	{r4, r5, r6, lr}
 8005f4e:	4e0d      	ldr	r6, [pc, #52]	; (8005f84 <__libc_init_array+0x38>)
 8005f50:	4c0d      	ldr	r4, [pc, #52]	; (8005f88 <__libc_init_array+0x3c>)
 8005f52:	1ba4      	subs	r4, r4, r6
 8005f54:	10a4      	asrs	r4, r4, #2
 8005f56:	2500      	movs	r5, #0
 8005f58:	42a5      	cmp	r5, r4
 8005f5a:	d109      	bne.n	8005f70 <__libc_init_array+0x24>
 8005f5c:	4e0b      	ldr	r6, [pc, #44]	; (8005f8c <__libc_init_array+0x40>)
 8005f5e:	4c0c      	ldr	r4, [pc, #48]	; (8005f90 <__libc_init_array+0x44>)
 8005f60:	f000 f820 	bl	8005fa4 <_init>
 8005f64:	1ba4      	subs	r4, r4, r6
 8005f66:	10a4      	asrs	r4, r4, #2
 8005f68:	2500      	movs	r5, #0
 8005f6a:	42a5      	cmp	r5, r4
 8005f6c:	d105      	bne.n	8005f7a <__libc_init_array+0x2e>
 8005f6e:	bd70      	pop	{r4, r5, r6, pc}
 8005f70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f74:	4798      	blx	r3
 8005f76:	3501      	adds	r5, #1
 8005f78:	e7ee      	b.n	8005f58 <__libc_init_array+0xc>
 8005f7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f7e:	4798      	blx	r3
 8005f80:	3501      	adds	r5, #1
 8005f82:	e7f2      	b.n	8005f6a <__libc_init_array+0x1e>
 8005f84:	08005ff4 	.word	0x08005ff4
 8005f88:	08005ff4 	.word	0x08005ff4
 8005f8c:	08005ff4 	.word	0x08005ff4
 8005f90:	08005ff8 	.word	0x08005ff8

08005f94 <memset>:
 8005f94:	4402      	add	r2, r0
 8005f96:	4603      	mov	r3, r0
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d100      	bne.n	8005f9e <memset+0xa>
 8005f9c:	4770      	bx	lr
 8005f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8005fa2:	e7f9      	b.n	8005f98 <memset+0x4>

08005fa4 <_init>:
 8005fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fa6:	bf00      	nop
 8005fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005faa:	bc08      	pop	{r3}
 8005fac:	469e      	mov	lr, r3
 8005fae:	4770      	bx	lr

08005fb0 <_fini>:
 8005fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb2:	bf00      	nop
 8005fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fb6:	bc08      	pop	{r3}
 8005fb8:	469e      	mov	lr, r3
 8005fba:	4770      	bx	lr
