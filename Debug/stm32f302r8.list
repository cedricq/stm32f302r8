
stm32f302r8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d48  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005ed0  08005ed0  00015ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f08  08005f08  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005f08  08005f08  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f08  08005f08  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f08  08005f08  00015f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f0c  08005f0c  00015f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005f10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  2000000c  08005f1c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08005f1c  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fdf2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002324  00000000  00000000  0002fe2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f70  00000000  00000000  00032158  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e58  00000000  00000000  000330c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b2eb  00000000  00000000  00033f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bfa2  00000000  00000000  0004f20b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009297e  00000000  00000000  0005b1ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000edb2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040a8  00000000  00000000  000edba8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005eb8 	.word	0x08005eb8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005eb8 	.word	0x08005eb8

080001c8 <_ZN5Phase5StartEv>:
{
public:
    Phase(uint16_t channel): channel_(channel)
    {}

    void Start()
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
    {
        //Starts the PWM signal generation
        if (HAL_TIM_PWM_Start(getTIM1(), channel_) != HAL_OK)
 80001d0:	f000 f98e 	bl	80004f0 <getTIM1>
 80001d4:	4602      	mov	r2, r0
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	685b      	ldr	r3, [r3, #4]
 80001da:	4619      	mov	r1, r3
 80001dc:	4610      	mov	r0, r2
 80001de:	f004 f83f 	bl	8004260 <HAL_TIM_PWM_Start>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	bf14      	ite	ne
 80001e8:	2301      	movne	r3, #1
 80001ea:	2300      	moveq	r3, #0
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d001      	beq.n	80001f6 <_ZN5Phase5StartEv+0x2e>
        {
            /* PWM Generation Error */
            Error_Handler();
 80001f2:	f000 fda1 	bl	8000d38 <Error_Handler>
        }
    }
 80001f6:	bf00      	nop
 80001f8:	3708      	adds	r7, #8
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}

080001fe <_ZN5Phase7SetDutyEf>:
            /* PWM Generation Error */
            Error_Handler();
        }
    }

    void SetDuty(float duty)
 80001fe:	b580      	push	{r7, lr}
 8000200:	b082      	sub	sp, #8
 8000202:	af00      	add	r7, sp, #0
 8000204:	6078      	str	r0, [r7, #4]
 8000206:	ed87 0a00 	vstr	s0, [r7]
    {
        duty_ = duty;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	683a      	ldr	r2, [r7, #0]
 800020e:	609a      	str	r2, [r3, #8]
        if ( enable_)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d002      	beq.n	800021e <_ZN5Phase7SetDutyEf+0x20>
        {
            ApplyDuty();
 8000218:	6878      	ldr	r0, [r7, #4]
 800021a:	f000 f81f 	bl	800025c <_ZN5Phase9ApplyDutyEv>
        }
    }
 800021e:	bf00      	nop
 8000220:	3708      	adds	r7, #8
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}

08000226 <_ZN5Phase6EnableEv>:

    void Enable() { enable_ = true; };
 8000226:	b480      	push	{r7}
 8000228:	b083      	sub	sp, #12
 800022a:	af00      	add	r7, sp, #0
 800022c:	6078      	str	r0, [r7, #4]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2201      	movs	r2, #1
 8000232:	701a      	strb	r2, [r3, #0]
 8000234:	bf00      	nop
 8000236:	370c      	adds	r7, #12
 8000238:	46bd      	mov	sp, r7
 800023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023e:	4770      	bx	lr

08000240 <_ZN5Phase7DisableEv>:
    void Disable() { enable_ = false;  ApplyDuty(); };
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	2200      	movs	r2, #0
 800024c:	701a      	strb	r2, [r3, #0]
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f000 f804 	bl	800025c <_ZN5Phase9ApplyDutyEv>
 8000254:	bf00      	nop
 8000256:	3708      	adds	r7, #8
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}

0800025c <_ZN5Phase9ApplyDutyEv>:

    bool IsEnable() { return enable_; }
    float GetDuty() { return duty_; }

private:
    void ApplyDuty()
 800025c:	b480      	push	{r7}
 800025e:	b085      	sub	sp, #20
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
    {
        uint32_t pulse_width = 0;
 8000264:	2300      	movs	r3, #0
 8000266:	60fb      	str	r3, [r7, #12]

        if ( enable_ )
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d00f      	beq.n	8000290 <_ZN5Phase9ApplyDutyEv+0x34>
        {
            pulse_width = (uint32_t)(1440 * duty_ / 100);
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	edd3 7a02 	vldr	s15, [r3, #8]
 8000276:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8000330 <_ZN5Phase9ApplyDutyEv+0xd4>
 800027a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800027e:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8000334 <_ZN5Phase9ApplyDutyEv+0xd8>
 8000282:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800028a:	ee17 3a90 	vmov	r3, s15
 800028e:	60fb      	str	r3, [r7, #12]
        }

        switch (channel_)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	685b      	ldr	r3, [r3, #4]
 8000294:	2b0c      	cmp	r3, #12
 8000296:	d845      	bhi.n	8000324 <_ZN5Phase9ApplyDutyEv+0xc8>
 8000298:	a201      	add	r2, pc, #4	; (adr r2, 80002a0 <_ZN5Phase9ApplyDutyEv+0x44>)
 800029a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800029e:	bf00      	nop
 80002a0:	080002d5 	.word	0x080002d5
 80002a4:	08000325 	.word	0x08000325
 80002a8:	08000325 	.word	0x08000325
 80002ac:	08000325 	.word	0x08000325
 80002b0:	080002e9 	.word	0x080002e9
 80002b4:	08000325 	.word	0x08000325
 80002b8:	08000325 	.word	0x08000325
 80002bc:	08000325 	.word	0x08000325
 80002c0:	080002fd 	.word	0x080002fd
 80002c4:	08000325 	.word	0x08000325
 80002c8:	08000325 	.word	0x08000325
 80002cc:	08000325 	.word	0x08000325
 80002d0:	08000311 	.word	0x08000311
        {
        case TIM_CHANNEL_1:
            TIM1->CCR1 = pulse_width;
 80002d4:	4a18      	ldr	r2, [pc, #96]	; (8000338 <_ZN5Phase9ApplyDutyEv+0xdc>)
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	6353      	str	r3, [r2, #52]	; 0x34
            TIM1->CCMR1 |= TIM_CCMR1_OC1PE;
 80002da:	4b17      	ldr	r3, [pc, #92]	; (8000338 <_ZN5Phase9ApplyDutyEv+0xdc>)
 80002dc:	699b      	ldr	r3, [r3, #24]
 80002de:	4a16      	ldr	r2, [pc, #88]	; (8000338 <_ZN5Phase9ApplyDutyEv+0xdc>)
 80002e0:	f043 0308 	orr.w	r3, r3, #8
 80002e4:	6193      	str	r3, [r2, #24]
            break;
 80002e6:	e01d      	b.n	8000324 <_ZN5Phase9ApplyDutyEv+0xc8>
        case TIM_CHANNEL_2:
            TIM1->CCR2 = pulse_width;
 80002e8:	4a13      	ldr	r2, [pc, #76]	; (8000338 <_ZN5Phase9ApplyDutyEv+0xdc>)
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	6393      	str	r3, [r2, #56]	; 0x38
            TIM1->CCMR1 |= TIM_CCMR1_OC2PE;
 80002ee:	4b12      	ldr	r3, [pc, #72]	; (8000338 <_ZN5Phase9ApplyDutyEv+0xdc>)
 80002f0:	699b      	ldr	r3, [r3, #24]
 80002f2:	4a11      	ldr	r2, [pc, #68]	; (8000338 <_ZN5Phase9ApplyDutyEv+0xdc>)
 80002f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002f8:	6193      	str	r3, [r2, #24]
            break;
 80002fa:	e013      	b.n	8000324 <_ZN5Phase9ApplyDutyEv+0xc8>
        case TIM_CHANNEL_3:
            TIM1->CCR3 = pulse_width;
 80002fc:	4a0e      	ldr	r2, [pc, #56]	; (8000338 <_ZN5Phase9ApplyDutyEv+0xdc>)
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	63d3      	str	r3, [r2, #60]	; 0x3c
            TIM1->CCMR2 |= TIM_CCMR2_OC3PE;
 8000302:	4b0d      	ldr	r3, [pc, #52]	; (8000338 <_ZN5Phase9ApplyDutyEv+0xdc>)
 8000304:	69db      	ldr	r3, [r3, #28]
 8000306:	4a0c      	ldr	r2, [pc, #48]	; (8000338 <_ZN5Phase9ApplyDutyEv+0xdc>)
 8000308:	f043 0308 	orr.w	r3, r3, #8
 800030c:	61d3      	str	r3, [r2, #28]
            break;
 800030e:	e009      	b.n	8000324 <_ZN5Phase9ApplyDutyEv+0xc8>
        case TIM_CHANNEL_4:
            TIM1->CCR4 = pulse_width;
 8000310:	4a09      	ldr	r2, [pc, #36]	; (8000338 <_ZN5Phase9ApplyDutyEv+0xdc>)
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	6413      	str	r3, [r2, #64]	; 0x40
            TIM1->CCMR2 |= TIM_CCMR2_OC4PE;
 8000316:	4b08      	ldr	r3, [pc, #32]	; (8000338 <_ZN5Phase9ApplyDutyEv+0xdc>)
 8000318:	69db      	ldr	r3, [r3, #28]
 800031a:	4a07      	ldr	r2, [pc, #28]	; (8000338 <_ZN5Phase9ApplyDutyEv+0xdc>)
 800031c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000320:	61d3      	str	r3, [r2, #28]
            break;
 8000322:	bf00      	nop
        }
    }
 8000324:	bf00      	nop
 8000326:	3714      	adds	r7, #20
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	44b40000 	.word	0x44b40000
 8000334:	42c80000 	.word	0x42c80000
 8000338:	40012c00 	.word	0x40012c00

0800033c <_ZN12PhaseHandler4InitEv>:
#include "PhasesControl.hpp"


void PhaseHandler::Init()
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++)
 8000344:	2300      	movs	r3, #0
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	2b02      	cmp	r3, #2
 800034c:	dc0c      	bgt.n	8000368 <_ZN12PhaseHandler4InitEv+0x2c>
    {
        sequence_[i]->Start();
 800034e:	687a      	ldr	r2, [r7, #4]
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	3308      	adds	r3, #8
 8000354:	009b      	lsls	r3, r3, #2
 8000356:	4413      	add	r3, r2
 8000358:	685b      	ldr	r3, [r3, #4]
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff ff34 	bl	80001c8 <_ZN5Phase5StartEv>
    for (int i = 0; i < 3; i++)
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	3301      	adds	r3, #1
 8000364:	60fb      	str	r3, [r7, #12]
 8000366:	e7ef      	b.n	8000348 <_ZN12PhaseHandler4InitEv+0xc>
    }
}
 8000368:	bf00      	nop
 800036a:	3710      	adds	r7, #16
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}

08000370 <_ZN12PhaseHandler5StartEv>:

void PhaseHandler::Start()
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
    sequence_[index_]->Enable();
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037c:	687a      	ldr	r2, [r7, #4]
 800037e:	3308      	adds	r3, #8
 8000380:	009b      	lsls	r3, r3, #2
 8000382:	4413      	add	r3, r2
 8000384:	685b      	ldr	r3, [r3, #4]
 8000386:	4618      	mov	r0, r3
 8000388:	f7ff ff4d 	bl	8000226 <_ZN5Phase6EnableEv>
    sequence_[index_]->SetDuty(duty_);
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000390:	687a      	ldr	r2, [r7, #4]
 8000392:	3308      	adds	r3, #8
 8000394:	009b      	lsls	r3, r3, #2
 8000396:	4413      	add	r3, r2
 8000398:	685a      	ldr	r2, [r3, #4]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80003a0:	eeb0 0a67 	vmov.f32	s0, s15
 80003a4:	4610      	mov	r0, r2
 80003a6:	f7ff ff2a 	bl	80001fe <_ZN5Phase7SetDutyEf>
}
 80003aa:	bf00      	nop
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}

080003b2 <_ZN12PhaseHandler11SetDutyStepEf>:


void PhaseHandler::SetDutyStep(float duty)
{
 80003b2:	b580      	push	{r7, lr}
 80003b4:	b082      	sub	sp, #8
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	6078      	str	r0, [r7, #4]
 80003ba:	ed87 0a00 	vstr	s0, [r7]
    duty_ = duty;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	683a      	ldr	r2, [r7, #0]
 80003c2:	635a      	str	r2, [r3, #52]	; 0x34
    Start();
 80003c4:	6878      	ldr	r0, [r7, #4]
 80003c6:	f7ff ffd3 	bl	8000370 <_ZN12PhaseHandler5StartEv>
}
 80003ca:	bf00      	nop
 80003cc:	3708      	adds	r7, #8
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
	...

080003d4 <_ZN12PhaseHandler10SwitchStepEv>:


void PhaseHandler::SwitchStep()
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
    index_ = (index_ + 1) % 3;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e0:	1c59      	adds	r1, r3, #1
 80003e2:	4b0a      	ldr	r3, [pc, #40]	; (800040c <_ZN12PhaseHandler10SwitchStepEv+0x38>)
 80003e4:	fba3 2301 	umull	r2, r3, r3, r1
 80003e8:	085a      	lsrs	r2, r3, #1
 80003ea:	4613      	mov	r3, r2
 80003ec:	005b      	lsls	r3, r3, #1
 80003ee:	4413      	add	r3, r2
 80003f0:	1aca      	subs	r2, r1, r3
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	631a      	str	r2, [r3, #48]	; 0x30
    DisableAll();
 80003f6:	6878      	ldr	r0, [r7, #4]
 80003f8:	f000 f818 	bl	800042c <_ZN12PhaseHandler10DisableAllEv>
    Start();
 80003fc:	6878      	ldr	r0, [r7, #4]
 80003fe:	f7ff ffb7 	bl	8000370 <_ZN12PhaseHandler5StartEv>
}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	aaaaaaab 	.word	0xaaaaaaab

08000410 <_ZN12PhaseHandler5ResetEv>:

void PhaseHandler::Reset()
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
    index_ = 0;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	2200      	movs	r2, #0
 800041c:	631a      	str	r2, [r3, #48]	; 0x30
    DisableAll();
 800041e:	6878      	ldr	r0, [r7, #4]
 8000420:	f000 f804 	bl	800042c <_ZN12PhaseHandler10DisableAllEv>
}
 8000424:	bf00      	nop
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <_ZN12PhaseHandler10DisableAllEv>:

void PhaseHandler::DisableAll()
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++)
 8000434:	2300      	movs	r3, #0
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	2b02      	cmp	r3, #2
 800043c:	dc0c      	bgt.n	8000458 <_ZN12PhaseHandler10DisableAllEv+0x2c>
    {
        sequence_[i]->Disable();
 800043e:	687a      	ldr	r2, [r7, #4]
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	3308      	adds	r3, #8
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	4413      	add	r3, r2
 8000448:	685b      	ldr	r3, [r3, #4]
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff fef8 	bl	8000240 <_ZN5Phase7DisableEv>
    for (int i = 0; i < 3; i++)
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	3301      	adds	r3, #1
 8000454:	60fb      	str	r3, [r7, #12]
 8000456:	e7ef      	b.n	8000438 <_ZN12PhaseHandler10DisableAllEv+0xc>
    }
}
 8000458:	bf00      	nop
 800045a:	3710      	adds	r7, #16
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <_ZN5PhaseC1Et>:
#include "main.h"

class Phase
{
public:
    Phase(uint16_t channel): channel_(channel)
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	460b      	mov	r3, r1
 800046a:	807b      	strh	r3, [r7, #2]
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	2200      	movs	r2, #0
 8000470:	701a      	strb	r2, [r3, #0]
 8000472:	887a      	ldrh	r2, [r7, #2]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	605a      	str	r2, [r3, #4]
    {}
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4618      	mov	r0, r3
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr

08000486 <_ZN12PhaseHandlerC1Ev>:


class PhaseHandler
{
public:
    PhaseHandler():
 8000486:	b580      	push	{r7, lr}
 8000488:	b082      	sub	sp, #8
 800048a:	af00      	add	r7, sp, #0
 800048c:	6078      	str	r0, [r7, #4]
        phaseA_(TIM_CHANNEL_1),
        phaseB_(TIM_CHANNEL_2),
        phaseC_(TIM_CHANNEL_3)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	2100      	movs	r1, #0
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff ffe4 	bl	8000460 <_ZN5PhaseC1Et>
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	330c      	adds	r3, #12
 800049c:	2104      	movs	r1, #4
 800049e:	4618      	mov	r0, r3
 80004a0:	f7ff ffde 	bl	8000460 <_ZN5PhaseC1Et>
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	3318      	adds	r3, #24
 80004a8:	2108      	movs	r1, #8
 80004aa:	4618      	mov	r0, r3
 80004ac:	f7ff ffd8 	bl	8000460 <_ZN5PhaseC1Et>

    Phase phaseA_;
    Phase phaseB_;
    Phase phaseC_;

    Phase* sequence_[3] {&phaseA_, &phaseB_, &phaseC_};
 80004b0:	687a      	ldr	r2, [r7, #4]
        phaseC_(TIM_CHANNEL_3)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	625a      	str	r2, [r3, #36]	; 0x24
    Phase* sequence_[3] {&phaseA_, &phaseB_, &phaseC_};
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	f103 020c 	add.w	r2, r3, #12
        phaseC_(TIM_CHANNEL_3)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	629a      	str	r2, [r3, #40]	; 0x28
    Phase* sequence_[3] {&phaseA_, &phaseB_, &phaseC_};
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	f103 0218 	add.w	r2, r3, #24
        phaseC_(TIM_CHANNEL_3)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	2200      	movs	r2, #0
 80004ce:	631a      	str	r2, [r3, #48]	; 0x30
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	f04f 0200 	mov.w	r2, #0
 80004d6:	635a      	str	r2, [r3, #52]	; 0x34
        Reset();
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f7ff ff99 	bl	8000410 <_ZN12PhaseHandler5ResetEv>
        Init();
 80004de:	6878      	ldr	r0, [r7, #4]
 80004e0:	f7ff ff2c 	bl	800033c <_ZN12PhaseHandler4InitEv>
    }
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4618      	mov	r0, r3
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
	...

080004f0 <getTIM1>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

TIM_HandleTypeDef* getTIM1()
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
    return &htim1;
 80004f4:	4b02      	ldr	r3, [pc, #8]	; (8000500 <getTIM1+0x10>)
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	200000bc 	.word	0x200000bc

08000504 <setDuty>:
{
    HAL_ADC_Start_DMA(&hadc1, pData, Length);
}

void setDuty(TIM_TypeDef* TIM, float val)
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	ed87 0a00 	vstr	s0, [r7]
    uint32_t pulse_width = (uint32_t)(72000 * val / 100);
 8000510:	edd7 7a00 	vldr	s15, [r7]
 8000514:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800054c <setDuty+0x48>
 8000518:	ee27 7a87 	vmul.f32	s14, s15, s14
 800051c:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000550 <setDuty+0x4c>
 8000520:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000528:	ee17 3a90 	vmov	r3, s15
 800052c:	60fb      	str	r3, [r7, #12]

    /* update the pulse value*/
    TIM->CCR1 = pulse_width;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	68fa      	ldr	r2, [r7, #12]
 8000532:	635a      	str	r2, [r3, #52]	; 0x34
    /* Enable the output compare 1 Preload */
    TIM->CCMR1 |= TIM_CCMR1_OC1PE;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f043 0208 	orr.w	r2, r3, #8
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	619a      	str	r2, [r3, #24]
}
 8000540:	bf00      	nop
 8000542:	3714      	adds	r7, #20
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	478ca000 	.word	0x478ca000
 8000550:	42c80000 	.word	0x42c80000

08000554 <toggleLED>:

void toggleLED()
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000558:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055c:	4802      	ldr	r0, [pc, #8]	; (8000568 <toggleLED+0x14>)
 800055e:	f002 fabb 	bl	8002ad8 <HAL_GPIO_TogglePin>
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	48000400 	.word	0x48000400

0800056c <togglePin>:

void togglePin()
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000570:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000574:	4802      	ldr	r0, [pc, #8]	; (8000580 <togglePin+0x14>)
 8000576:	f002 faaf 	bl	8002ad8 <HAL_GPIO_TogglePin>
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	48000400 	.word	0x48000400

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08e      	sub	sp, #56	; 0x38
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fe99 	bl	80012c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f86b 	bl	8000668 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 fb5f 	bl	8000c54 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000596:	f000 fb3f 	bl	8000c18 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 800059a:	f000 fb09 	bl	8000bb0 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 800059e:	f000 f8df 	bl	8000760 <_ZL12MX_ADC1_Initv>
  MX_TIM1_Init();
 80005a2:	f000 f945 	bl	8000830 <_ZL12MX_TIM1_Initv>
  MX_USART1_UART_Init();
 80005a6:	f000 facf 	bl	8000b48 <_ZL19MX_USART1_UART_Initv>
  MX_TIM2_Init();
 80005aa:	f000 fa3b 	bl	8000a24 <_ZL12MX_TIM2_Initv>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80005ae:	f000 f8ca 	bl	8000746 <_ZL12MX_NVIC_Initv>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);
 80005b2:	4827      	ldr	r0, [pc, #156]	; (8000650 <main+0xcc>)
 80005b4:	f003 fdca 	bl	800414c <HAL_TIM_Base_Start_IT>

  PhaseHandler ph;
 80005b8:	463b      	mov	r3, r7
 80005ba:	4618      	mov	r0, r3
 80005bc:	f7ff ff63 	bl	8000486 <_ZN12PhaseHandlerC1Ev>
  ph.Start();
 80005c0:	463b      	mov	r3, r7
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff fed4 	bl	8000370 <_ZN12PhaseHandler5StartEv>
  ph.SetDutyStep(50.0f);
 80005c8:	463b      	mov	r3, r7
 80005ca:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8000654 <main+0xd0>
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff feef 	bl	80003b2 <_ZN12PhaseHandler11SetDutyStepEf>

  HAL_TIM_Base_Start_IT(&htim2);
 80005d4:	4820      	ldr	r0, [pc, #128]	; (8000658 <main+0xd4>)
 80005d6:	f003 fdb9 	bl	800414c <HAL_TIM_Base_Start_IT>

  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)//Starts the PWM signal generation
 80005da:	2100      	movs	r1, #0
 80005dc:	481e      	ldr	r0, [pc, #120]	; (8000658 <main+0xd4>)
 80005de:	f003 fe3f 	bl	8004260 <HAL_TIM_PWM_Start>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	bf14      	ite	ne
 80005e8:	2301      	movne	r3, #1
 80005ea:	2300      	moveq	r3, #0
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <main+0x72>
  {
    /* PWM Generation Error */
    Error_Handler();
 80005f2:	f000 fba1 	bl	8000d38 <Error_Handler>
  }
  HAL_ADC_Start_IT(&hadc1);
 80005f6:	4819      	ldr	r0, [pc, #100]	; (800065c <main+0xd8>)
 80005f8:	f001 f88e 	bl	8001718 <HAL_ADC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      static float duty = 0.0F;
      duty += 10.0F;
 80005fc:	4b18      	ldr	r3, [pc, #96]	; (8000660 <main+0xdc>)
 80005fe:	edd3 7a00 	vldr	s15, [r3]
 8000602:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000606:	ee77 7a87 	vadd.f32	s15, s15, s14
 800060a:	4b15      	ldr	r3, [pc, #84]	; (8000660 <main+0xdc>)
 800060c:	edc3 7a00 	vstr	s15, [r3]
      if (duty > 100.0F)
 8000610:	4b13      	ldr	r3, [pc, #76]	; (8000660 <main+0xdc>)
 8000612:	edd3 7a00 	vldr	s15, [r3]
 8000616:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000664 <main+0xe0>
 800061a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800061e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000622:	dd03      	ble.n	800062c <main+0xa8>
          duty = 0.0F;
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <main+0xdc>)
 8000626:	f04f 0200 	mov.w	r2, #0
 800062a:	601a      	str	r2, [r3, #0]

      ph.SetDutyStep(duty);
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <main+0xdc>)
 800062e:	edd3 7a00 	vldr	s15, [r3]
 8000632:	463b      	mov	r3, r7
 8000634:	eeb0 0a67 	vmov.f32	s0, s15
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff feba 	bl	80003b2 <_ZN12PhaseHandler11SetDutyStepEf>
      ph.SwitchStep();
 800063e:	463b      	mov	r3, r7
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff fec7 	bl	80003d4 <_ZN12PhaseHandler10SwitchStepEv>
      HAL_Delay(50);
 8000646:	2032      	movs	r0, #50	; 0x32
 8000648:	f000 fea0 	bl	800138c <HAL_Delay>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  }
 800064c:	e7d6      	b.n	80005fc <main+0x78>
 800064e:	bf00      	nop
 8000650:	200000bc 	.word	0x200000bc
 8000654:	42480000 	.word	0x42480000
 8000658:	200000fc 	.word	0x200000fc
 800065c:	20000028 	.word	0x20000028
 8000660:	2000023c 	.word	0x2000023c
 8000664:	42c80000 	.word	0x42c80000

08000668 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b09c      	sub	sp, #112	; 0x70
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000672:	2228      	movs	r2, #40	; 0x28
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f005 fc16 	bl	8005ea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800068c:	463b      	mov	r3, r7
 800068e:	2234      	movs	r2, #52	; 0x34
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f005 fc08 	bl	8005ea8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000698:	2301      	movs	r3, #1
 800069a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800069c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a6:	2301      	movs	r3, #1
 80006a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006b4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006be:	4618      	mov	r0, r3
 80006c0:	f002 fa48 	bl	8002b54 <HAL_RCC_OscConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	bf14      	ite	ne
 80006ca:	2301      	movne	r3, #1
 80006cc:	2300      	moveq	r3, #0
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 80006d4:	f000 fb30 	bl	8000d38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006e8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006f2:	2102      	movs	r1, #2
 80006f4:	4618      	mov	r0, r3
 80006f6:	f003 f935 	bl	8003964 <HAL_RCC_ClockConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	bf14      	ite	ne
 8000700:	2301      	movne	r3, #1
 8000702:	2300      	moveq	r3, #0
 8000704:	b2db      	uxtb	r3, r3
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800070a:	f000 fb15 	bl	8000d38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 800070e:	f241 0381 	movw	r3, #4225	; 0x1081
 8000712:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000718:	2300      	movs	r3, #0
 800071a:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4618      	mov	r0, r3
 8000726:	f003 fb53 	bl	8003dd0 <HAL_RCCEx_PeriphCLKConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	bf14      	ite	ne
 8000730:	2301      	movne	r3, #1
 8000732:	2300      	moveq	r3, #0
 8000734:	b2db      	uxtb	r3, r3
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 800073a:	f000 fafd 	bl	8000d38 <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	3770      	adds	r7, #112	; 0x70
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <_ZL12MX_NVIC_Initv>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000746:	b580      	push	{r7, lr}
 8000748:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 800074a:	2202      	movs	r2, #2
 800074c:	2100      	movs	r1, #0
 800074e:	201c      	movs	r0, #28
 8000750:	f001 feb9 	bl	80024c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000754:	201c      	movs	r0, #28
 8000756:	f001 fed2 	bl	80024fe <HAL_NVIC_EnableIRQ>
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000766:	463b      	mov	r3, r7
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
 8000774:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000776:	4b2d      	ldr	r3, [pc, #180]	; (800082c <_ZL12MX_ADC1_Initv+0xcc>)
 8000778:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800077c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800077e:	4b2b      	ldr	r3, [pc, #172]	; (800082c <_ZL12MX_ADC1_Initv+0xcc>)
 8000780:	2200      	movs	r2, #0
 8000782:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000784:	4b29      	ldr	r3, [pc, #164]	; (800082c <_ZL12MX_ADC1_Initv+0xcc>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800078a:	4b28      	ldr	r3, [pc, #160]	; (800082c <_ZL12MX_ADC1_Initv+0xcc>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000790:	4b26      	ldr	r3, [pc, #152]	; (800082c <_ZL12MX_ADC1_Initv+0xcc>)
 8000792:	2200      	movs	r2, #0
 8000794:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000796:	4b25      	ldr	r3, [pc, #148]	; (800082c <_ZL12MX_ADC1_Initv+0xcc>)
 8000798:	2200      	movs	r2, #0
 800079a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800079e:	4b23      	ldr	r3, [pc, #140]	; (800082c <_ZL12MX_ADC1_Initv+0xcc>)
 80007a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 80007a6:	4b21      	ldr	r3, [pc, #132]	; (800082c <_ZL12MX_ADC1_Initv+0xcc>)
 80007a8:	f44f 7210 	mov.w	r2, #576	; 0x240
 80007ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ae:	4b1f      	ldr	r3, [pc, #124]	; (800082c <_ZL12MX_ADC1_Initv+0xcc>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007b4:	4b1d      	ldr	r3, [pc, #116]	; (800082c <_ZL12MX_ADC1_Initv+0xcc>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007ba:	4b1c      	ldr	r3, [pc, #112]	; (800082c <_ZL12MX_ADC1_Initv+0xcc>)
 80007bc:	2200      	movs	r2, #0
 80007be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <_ZL12MX_ADC1_Initv+0xcc>)
 80007c4:	2204      	movs	r2, #4
 80007c6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <_ZL12MX_ADC1_Initv+0xcc>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80007ce:	4b17      	ldr	r3, [pc, #92]	; (800082c <_ZL12MX_ADC1_Initv+0xcc>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007d4:	4815      	ldr	r0, [pc, #84]	; (800082c <_ZL12MX_ADC1_Initv+0xcc>)
 80007d6:	f000 fe19 	bl	800140c <HAL_ADC_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	bf14      	ite	ne
 80007e0:	2301      	movne	r3, #1
 80007e2:	2300      	moveq	r3, #0
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <_ZL12MX_ADC1_Initv+0x8e>
  {
    Error_Handler();
 80007ea:	f000 faa5 	bl	8000d38 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007ee:	2301      	movs	r3, #1
 80007f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007f2:	2301      	movs	r3, #1
 80007f4:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000806:	463b      	mov	r3, r7
 8000808:	4619      	mov	r1, r3
 800080a:	4808      	ldr	r0, [pc, #32]	; (800082c <_ZL12MX_ADC1_Initv+0xcc>)
 800080c:	f001 fa0c 	bl	8001c28 <HAL_ADC_ConfigChannel>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	bf14      	ite	ne
 8000816:	2301      	movne	r3, #1
 8000818:	2300      	moveq	r3, #0
 800081a:	b2db      	uxtb	r3, r3
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <_ZL12MX_ADC1_Initv+0xc4>
  {
    Error_Handler();
 8000820:	f000 fa8a 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	3718      	adds	r7, #24
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000028 	.word	0x20000028

08000830 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b096      	sub	sp, #88	; 0x58
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000836:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000842:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]
 8000852:	615a      	str	r2, [r3, #20]
 8000854:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	222c      	movs	r2, #44	; 0x2c
 800085a:	2100      	movs	r1, #0
 800085c:	4618      	mov	r0, r3
 800085e:	f005 fb23 	bl	8005ea8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000862:	4b6e      	ldr	r3, [pc, #440]	; (8000a1c <_ZL12MX_TIM1_Initv+0x1ec>)
 8000864:	4a6e      	ldr	r2, [pc, #440]	; (8000a20 <_ZL12MX_TIM1_Initv+0x1f0>)
 8000866:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000868:	4b6c      	ldr	r3, [pc, #432]	; (8000a1c <_ZL12MX_TIM1_Initv+0x1ec>)
 800086a:	2200      	movs	r2, #0
 800086c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086e:	4b6b      	ldr	r3, [pc, #428]	; (8000a1c <_ZL12MX_TIM1_Initv+0x1ec>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1440;
 8000874:	4b69      	ldr	r3, [pc, #420]	; (8000a1c <_ZL12MX_TIM1_Initv+0x1ec>)
 8000876:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800087a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087c:	4b67      	ldr	r3, [pc, #412]	; (8000a1c <_ZL12MX_TIM1_Initv+0x1ec>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000882:	4b66      	ldr	r3, [pc, #408]	; (8000a1c <_ZL12MX_TIM1_Initv+0x1ec>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000888:	4b64      	ldr	r3, [pc, #400]	; (8000a1c <_ZL12MX_TIM1_Initv+0x1ec>)
 800088a:	2280      	movs	r2, #128	; 0x80
 800088c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800088e:	4863      	ldr	r0, [pc, #396]	; (8000a1c <_ZL12MX_TIM1_Initv+0x1ec>)
 8000890:	f003 fcbb 	bl	800420a <HAL_TIM_PWM_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	bf14      	ite	ne
 800089a:	2301      	movne	r3, #1
 800089c:	2300      	moveq	r3, #0
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <_ZL12MX_TIM1_Initv+0x78>
  {
    Error_Handler();
 80008a4:	f000 fa48 	bl	8000d38 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80008a8:	485c      	ldr	r0, [pc, #368]	; (8000a1c <_ZL12MX_TIM1_Initv+0x1ec>)
 80008aa:	f003 fc79 	bl	80041a0 <HAL_TIM_OC_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	bf14      	ite	ne
 80008b4:	2301      	movne	r3, #1
 80008b6:	2300      	moveq	r3, #0
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <_ZL12MX_TIM1_Initv+0x92>
  {
    Error_Handler();
 80008be:	f000 fa3b 	bl	8000d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008c2:	2320      	movs	r3, #32
 80008c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008c6:	2300      	movs	r3, #0
 80008c8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008d2:	4619      	mov	r1, r3
 80008d4:	4851      	ldr	r0, [pc, #324]	; (8000a1c <_ZL12MX_TIM1_Initv+0x1ec>)
 80008d6:	f004 fcbb 	bl	8005250 <HAL_TIMEx_MasterConfigSynchronization>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	bf14      	ite	ne
 80008e0:	2301      	movne	r3, #1
 80008e2:	2300      	moveq	r3, #0
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <_ZL12MX_TIM1_Initv+0xbe>
  {
    Error_Handler();
 80008ea:	f000 fa25 	bl	8000d38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ee:	2360      	movs	r3, #96	; 0x60
 80008f0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f6:	2300      	movs	r3, #0
 80008f8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008fa:	2300      	movs	r3, #0
 80008fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000902:	2300      	movs	r3, #0
 8000904:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000906:	2300      	movs	r3, #0
 8000908:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800090a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800090e:	2200      	movs	r2, #0
 8000910:	4619      	mov	r1, r3
 8000912:	4842      	ldr	r0, [pc, #264]	; (8000a1c <_ZL12MX_TIM1_Initv+0x1ec>)
 8000914:	f003 fe94 	bl	8004640 <HAL_TIM_PWM_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	bf14      	ite	ne
 800091e:	2301      	movne	r3, #1
 8000920:	2300      	moveq	r3, #0
 8000922:	b2db      	uxtb	r3, r3
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <_ZL12MX_TIM1_Initv+0xfc>
  {
    Error_Handler();
 8000928:	f000 fa06 	bl	8000d38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800092c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000930:	2204      	movs	r2, #4
 8000932:	4619      	mov	r1, r3
 8000934:	4839      	ldr	r0, [pc, #228]	; (8000a1c <_ZL12MX_TIM1_Initv+0x1ec>)
 8000936:	f003 fe83 	bl	8004640 <HAL_TIM_PWM_ConfigChannel>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	bf14      	ite	ne
 8000940:	2301      	movne	r3, #1
 8000942:	2300      	moveq	r3, #0
 8000944:	b2db      	uxtb	r3, r3
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <_ZL12MX_TIM1_Initv+0x11e>
  {
    Error_Handler();
 800094a:	f000 f9f5 	bl	8000d38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800094e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000952:	2208      	movs	r2, #8
 8000954:	4619      	mov	r1, r3
 8000956:	4831      	ldr	r0, [pc, #196]	; (8000a1c <_ZL12MX_TIM1_Initv+0x1ec>)
 8000958:	f003 fe72 	bl	8004640 <HAL_TIM_PWM_ConfigChannel>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	bf14      	ite	ne
 8000962:	2301      	movne	r3, #1
 8000964:	2300      	moveq	r3, #0
 8000966:	b2db      	uxtb	r3, r3
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <_ZL12MX_TIM1_Initv+0x140>
  {
    Error_Handler();
 800096c:	f000 f9e4 	bl	8000d38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000970:	2330      	movs	r3, #48	; 0x30
 8000972:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000974:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000978:	220c      	movs	r2, #12
 800097a:	4619      	mov	r1, r3
 800097c:	4827      	ldr	r0, [pc, #156]	; (8000a1c <_ZL12MX_TIM1_Initv+0x1ec>)
 800097e:	f003 fde1 	bl	8004544 <HAL_TIM_OC_ConfigChannel>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	bf14      	ite	ne
 8000988:	2301      	movne	r3, #1
 800098a:	2300      	moveq	r3, #0
 800098c:	b2db      	uxtb	r3, r3
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <_ZL12MX_TIM1_Initv+0x166>
  {
    Error_Handler();
 8000992:	f000 f9d1 	bl	8000d38 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8000996:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <_ZL12MX_TIM1_Initv+0x1ec>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	69da      	ldr	r2, [r3, #28]
 800099c:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <_ZL12MX_TIM1_Initv+0x1ec>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80009a4:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 10;
 80009b2:	230a      	movs	r3, #10
 80009b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 80009d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	4619      	mov	r1, r3
 80009dc:	480f      	ldr	r0, [pc, #60]	; (8000a1c <_ZL12MX_TIM1_Initv+0x1ec>)
 80009de:	f004 fc9d 	bl	800531c <HAL_TIMEx_ConfigBreakDeadTime>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	bf14      	ite	ne
 80009e8:	2301      	movne	r3, #1
 80009ea:	2300      	moveq	r3, #0
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <_ZL12MX_TIM1_Initv+0x1c6>
  {
    Error_Handler();
 80009f2:	f000 f9a1 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 80009f6:	2100      	movs	r1, #0
 80009f8:	4808      	ldr	r0, [pc, #32]	; (8000a1c <_ZL12MX_TIM1_Initv+0x1ec>)
 80009fa:	f004 fbf9 	bl	80051f0 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 80009fe:	2104      	movs	r1, #4
 8000a00:	4806      	ldr	r0, [pc, #24]	; (8000a1c <_ZL12MX_TIM1_Initv+0x1ec>)
 8000a02:	f004 fbf5 	bl	80051f0 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 8000a06:	2108      	movs	r1, #8
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <_ZL12MX_TIM1_Initv+0x1ec>)
 8000a0a:	f004 fbf1 	bl	80051f0 <HAL_TIMEx_PWMN_Start>

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a0e:	4803      	ldr	r0, [pc, #12]	; (8000a1c <_ZL12MX_TIM1_Initv+0x1ec>)
 8000a10:	f000 fa74 	bl	8000efc <HAL_TIM_MspPostInit>

}
 8000a14:	bf00      	nop
 8000a16:	3758      	adds	r7, #88	; 0x58
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200000bc 	.word	0x200000bc
 8000a20:	40012c00 	.word	0x40012c00

08000a24 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08e      	sub	sp, #56	; 0x38
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a44:	463b      	mov	r3, r7
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]
 8000a52:	615a      	str	r2, [r3, #20]
 8000a54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a56:	4b3a      	ldr	r3, [pc, #232]	; (8000b40 <_ZL12MX_TIM2_Initv+0x11c>)
 8000a58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a5c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8000a5e:	4b38      	ldr	r3, [pc, #224]	; (8000b40 <_ZL12MX_TIM2_Initv+0x11c>)
 8000a60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a66:	4b36      	ldr	r3, [pc, #216]	; (8000b40 <_ZL12MX_TIM2_Initv+0x11c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 72000;
 8000a6c:	4b34      	ldr	r3, [pc, #208]	; (8000b40 <_ZL12MX_TIM2_Initv+0x11c>)
 8000a6e:	4a35      	ldr	r2, [pc, #212]	; (8000b44 <_ZL12MX_TIM2_Initv+0x120>)
 8000a70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a72:	4b33      	ldr	r3, [pc, #204]	; (8000b40 <_ZL12MX_TIM2_Initv+0x11c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a78:	4b31      	ldr	r3, [pc, #196]	; (8000b40 <_ZL12MX_TIM2_Initv+0x11c>)
 8000a7a:	2280      	movs	r2, #128	; 0x80
 8000a7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a7e:	4830      	ldr	r0, [pc, #192]	; (8000b40 <_ZL12MX_TIM2_Initv+0x11c>)
 8000a80:	f003 fb38 	bl	80040f4 <HAL_TIM_Base_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	bf14      	ite	ne
 8000a8a:	2301      	movne	r3, #1
 8000a8c:	2300      	moveq	r3, #0
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <_ZL12MX_TIM2_Initv+0x74>
  {
    Error_Handler();
 8000a94:	f000 f950 	bl	8000d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4826      	ldr	r0, [pc, #152]	; (8000b40 <_ZL12MX_TIM2_Initv+0x11c>)
 8000aa6:	f003 fee3 	bl	8004870 <HAL_TIM_ConfigClockSource>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	bf14      	ite	ne
 8000ab0:	2301      	movne	r3, #1
 8000ab2:	2300      	moveq	r3, #0
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <_ZL12MX_TIM2_Initv+0x9a>
  {
    Error_Handler();
 8000aba:	f000 f93d 	bl	8000d38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000abe:	4820      	ldr	r0, [pc, #128]	; (8000b40 <_ZL12MX_TIM2_Initv+0x11c>)
 8000ac0:	f003 fba3 	bl	800420a <HAL_TIM_PWM_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	bf14      	ite	ne
 8000aca:	2301      	movne	r3, #1
 8000acc:	2300      	moveq	r3, #0
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <_ZL12MX_TIM2_Initv+0xb4>
  {
    Error_Handler();
 8000ad4:	f000 f930 	bl	8000d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8000ad8:	2340      	movs	r3, #64	; 0x40
 8000ada:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4816      	ldr	r0, [pc, #88]	; (8000b40 <_ZL12MX_TIM2_Initv+0x11c>)
 8000ae8:	f004 fbb2 	bl	8005250 <HAL_TIMEx_MasterConfigSynchronization>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	bf14      	ite	ne
 8000af2:	2301      	movne	r3, #1
 8000af4:	2300      	moveq	r3, #0
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 8000afc:	f000 f91c 	bl	8000d38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b00:	2360      	movs	r3, #96	; 0x60
 8000b02:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 18000;
 8000b04:	f244 6350 	movw	r3, #18000	; 0x4650
 8000b08:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b12:	463b      	mov	r3, r7
 8000b14:	2200      	movs	r2, #0
 8000b16:	4619      	mov	r1, r3
 8000b18:	4809      	ldr	r0, [pc, #36]	; (8000b40 <_ZL12MX_TIM2_Initv+0x11c>)
 8000b1a:	f003 fd91 	bl	8004640 <HAL_TIM_PWM_ConfigChannel>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	bf14      	ite	ne
 8000b24:	2301      	movne	r3, #1
 8000b26:	2300      	moveq	r3, #0
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <_ZL12MX_TIM2_Initv+0x10e>
  {
    Error_Handler();
 8000b2e:	f000 f903 	bl	8000d38 <Error_Handler>
  /* USER CODE BEGIN TIM2_Init 2 */



  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b32:	4803      	ldr	r0, [pc, #12]	; (8000b40 <_ZL12MX_TIM2_Initv+0x11c>)
 8000b34:	f000 f9e2 	bl	8000efc <HAL_TIM_MspPostInit>

}
 8000b38:	bf00      	nop
 8000b3a:	3738      	adds	r7, #56	; 0x38
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200000fc 	.word	0x200000fc
 8000b44:	00011940 	.word	0x00011940

08000b48 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b4c:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000b4e:	4a17      	ldr	r2, [pc, #92]	; (8000bac <_ZL19MX_USART1_UART_Initv+0x64>)
 8000b50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000b54:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000b58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5a:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000b6e:	220c      	movs	r2, #12
 8000b70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b8a:	4807      	ldr	r0, [pc, #28]	; (8000ba8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000b8c:	f004 fc81 	bl	8005492 <HAL_UART_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	bf14      	ite	ne
 8000b96:	2301      	movne	r3, #1
 8000b98:	2300      	moveq	r3, #0
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8000ba0:	f000 f8ca 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	2000013c 	.word	0x2000013c
 8000bac:	40013800 	.word	0x40013800

08000bb0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bb4:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000bb6:	4a17      	ldr	r2, [pc, #92]	; (8000c14 <_ZL19MX_USART2_UART_Initv+0x64>)
 8000bb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000bbc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000bc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc2:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bda:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be0:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bf2:	4807      	ldr	r0, [pc, #28]	; (8000c10 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000bf4:	f004 fc4d 	bl	8005492 <HAL_UART_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	bf14      	ite	ne
 8000bfe:	2301      	movne	r3, #1
 8000c00:	2300      	moveq	r3, #0
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8000c08:	f000 f896 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	200001bc 	.word	0x200001bc
 8000c14:	40004400 	.word	0x40004400

08000c18 <_ZL11MX_DMA_Initv>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <_ZL11MX_DMA_Initv+0x38>)
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	4a0b      	ldr	r2, [pc, #44]	; (8000c50 <_ZL11MX_DMA_Initv+0x38>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6153      	str	r3, [r2, #20]
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <_ZL11MX_DMA_Initv+0x38>)
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2100      	movs	r1, #0
 8000c3a:	200b      	movs	r0, #11
 8000c3c:	f001 fc43 	bl	80024c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c40:	200b      	movs	r0, #11
 8000c42:	f001 fc5c 	bl	80024fe <HAL_NVIC_EnableIRQ>

}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40021000 	.word	0x40021000

08000c54 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6a:	4b2f      	ldr	r3, [pc, #188]	; (8000d28 <_ZL12MX_GPIO_Initv+0xd4>)
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	4a2e      	ldr	r2, [pc, #184]	; (8000d28 <_ZL12MX_GPIO_Initv+0xd4>)
 8000c70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c74:	6153      	str	r3, [r2, #20]
 8000c76:	4b2c      	ldr	r3, [pc, #176]	; (8000d28 <_ZL12MX_GPIO_Initv+0xd4>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c82:	4b29      	ldr	r3, [pc, #164]	; (8000d28 <_ZL12MX_GPIO_Initv+0xd4>)
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	4a28      	ldr	r2, [pc, #160]	; (8000d28 <_ZL12MX_GPIO_Initv+0xd4>)
 8000c88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c8c:	6153      	str	r3, [r2, #20]
 8000c8e:	4b26      	ldr	r3, [pc, #152]	; (8000d28 <_ZL12MX_GPIO_Initv+0xd4>)
 8000c90:	695b      	ldr	r3, [r3, #20]
 8000c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	4b23      	ldr	r3, [pc, #140]	; (8000d28 <_ZL12MX_GPIO_Initv+0xd4>)
 8000c9c:	695b      	ldr	r3, [r3, #20]
 8000c9e:	4a22      	ldr	r2, [pc, #136]	; (8000d28 <_ZL12MX_GPIO_Initv+0xd4>)
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca4:	6153      	str	r3, [r2, #20]
 8000ca6:	4b20      	ldr	r3, [pc, #128]	; (8000d28 <_ZL12MX_GPIO_Initv+0xd4>)
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb2:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <_ZL12MX_GPIO_Initv+0xd4>)
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	4a1c      	ldr	r2, [pc, #112]	; (8000d28 <_ZL12MX_GPIO_Initv+0xd4>)
 8000cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cbc:	6153      	str	r3, [r2, #20]
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <_ZL12MX_GPIO_Initv+0xd4>)
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|GPIO_PIN_14, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000cd0:	4816      	ldr	r0, [pc, #88]	; (8000d2c <_ZL12MX_GPIO_Initv+0xd8>)
 8000cd2:	f001 fee9 	bl	8002aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cdc:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <_ZL12MX_GPIO_Initv+0xdc>)
 8000cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4812      	ldr	r0, [pc, #72]	; (8000d34 <_ZL12MX_GPIO_Initv+0xe0>)
 8000cec:	f001 fd6a 	bl	80027c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PB14 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_14;
 8000cf0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	4808      	ldr	r0, [pc, #32]	; (8000d2c <_ZL12MX_GPIO_Initv+0xd8>)
 8000d0a:	f001 fd5b 	bl	80027c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	2028      	movs	r0, #40	; 0x28
 8000d14:	f001 fbd7 	bl	80024c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d18:	2028      	movs	r0, #40	; 0x28
 8000d1a:	f001 fbf0 	bl	80024fe <HAL_NVIC_EnableIRQ>

}
 8000d1e:	bf00      	nop
 8000d20:	3728      	adds	r7, #40	; 0x28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	48000400 	.word	0x48000400
 8000d30:	10210000 	.word	0x10210000
 8000d34:	48000800 	.word	0x48000800

08000d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
	...

08000d48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <HAL_MspInit+0x54>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <HAL_MspInit+0x54>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6193      	str	r3, [r2, #24]
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <HAL_MspInit+0x54>)
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d66:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <HAL_MspInit+0x54>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	4a0c      	ldr	r2, [pc, #48]	; (8000d9c <HAL_MspInit+0x54>)
 8000d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d70:	61d3      	str	r3, [r2, #28]
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <HAL_MspInit+0x54>)
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d7e:	2007      	movs	r0, #7
 8000d80:	f001 fb96 	bl	80024b0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000d84:	2200      	movs	r2, #0
 8000d86:	2100      	movs	r1, #0
 8000d88:	2005      	movs	r0, #5
 8000d8a:	f001 fb9c 	bl	80024c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000d8e:	2005      	movs	r0, #5
 8000d90:	f001 fbb5 	bl	80024fe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40021000 	.word	0x40021000

08000da0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	; 0x28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dc0:	d154      	bne.n	8000e6c <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dc2:	4b2c      	ldr	r3, [pc, #176]	; (8000e74 <HAL_ADC_MspInit+0xd4>)
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	4a2b      	ldr	r2, [pc, #172]	; (8000e74 <HAL_ADC_MspInit+0xd4>)
 8000dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dcc:	6153      	str	r3, [r2, #20]
 8000dce:	4b29      	ldr	r3, [pc, #164]	; (8000e74 <HAL_ADC_MspInit+0xd4>)
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	4b26      	ldr	r3, [pc, #152]	; (8000e74 <HAL_ADC_MspInit+0xd4>)
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	4a25      	ldr	r2, [pc, #148]	; (8000e74 <HAL_ADC_MspInit+0xd4>)
 8000de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de4:	6153      	str	r3, [r2, #20]
 8000de6:	4b23      	ldr	r3, [pc, #140]	; (8000e74 <HAL_ADC_MspInit+0xd4>)
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000df2:	2301      	movs	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000df6:	2303      	movs	r3, #3
 8000df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e08:	f001 fcdc 	bl	80027c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <HAL_ADC_MspInit+0xd8>)
 8000e0e:	4a1b      	ldr	r2, [pc, #108]	; (8000e7c <HAL_ADC_MspInit+0xdc>)
 8000e10:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e12:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <HAL_ADC_MspInit+0xd8>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e18:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <HAL_ADC_MspInit+0xd8>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e1e:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <HAL_ADC_MspInit+0xd8>)
 8000e20:	2280      	movs	r2, #128	; 0x80
 8000e22:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e24:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <HAL_ADC_MspInit+0xd8>)
 8000e26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e2a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_ADC_MspInit+0xd8>)
 8000e2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e32:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e34:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <HAL_ADC_MspInit+0xd8>)
 8000e36:	2220      	movs	r2, #32
 8000e38:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <HAL_ADC_MspInit+0xd8>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e40:	480d      	ldr	r0, [pc, #52]	; (8000e78 <HAL_ADC_MspInit+0xd8>)
 8000e42:	f001 fb76 	bl	8002532 <HAL_DMA_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000e4c:	f7ff ff74 	bl	8000d38 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a09      	ldr	r2, [pc, #36]	; (8000e78 <HAL_ADC_MspInit+0xd8>)
 8000e54:	639a      	str	r2, [r3, #56]	; 0x38
 8000e56:	4a08      	ldr	r2, [pc, #32]	; (8000e78 <HAL_ADC_MspInit+0xd8>)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2100      	movs	r1, #0
 8000e60:	2012      	movs	r0, #18
 8000e62:	f001 fb30 	bl	80024c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000e66:	2012      	movs	r0, #18
 8000e68:	f001 fb49 	bl	80024fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e6c:	bf00      	nop
 8000e6e:	3728      	adds	r7, #40	; 0x28
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40021000 	.word	0x40021000
 8000e78:	20000078 	.word	0x20000078
 8000e7c:	40020008 	.word	0x40020008

08000e80 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <HAL_TIM_PWM_MspInit+0x38>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d10b      	bne.n	8000eaa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <HAL_TIM_PWM_MspInit+0x3c>)
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	4a09      	ldr	r2, [pc, #36]	; (8000ebc <HAL_TIM_PWM_MspInit+0x3c>)
 8000e98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e9c:	6193      	str	r3, [r2, #24]
 8000e9e:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <HAL_TIM_PWM_MspInit+0x3c>)
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000eaa:	bf00      	nop
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	40012c00 	.word	0x40012c00
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ed0:	d10b      	bne.n	8000eea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <HAL_TIM_Base_MspInit+0x38>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	4a08      	ldr	r2, [pc, #32]	; (8000ef8 <HAL_TIM_Base_MspInit+0x38>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	61d3      	str	r3, [r2, #28]
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_TIM_Base_MspInit+0x38>)
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000eea:	bf00      	nop
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	40021000 	.word	0x40021000

08000efc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08c      	sub	sp, #48	; 0x30
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 031c 	add.w	r3, r7, #28
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a3f      	ldr	r2, [pc, #252]	; (8001018 <HAL_TIM_MspPostInit+0x11c>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d155      	bne.n	8000fca <HAL_TIM_MspPostInit+0xce>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1e:	4b3f      	ldr	r3, [pc, #252]	; (800101c <HAL_TIM_MspPostInit+0x120>)
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	4a3e      	ldr	r2, [pc, #248]	; (800101c <HAL_TIM_MspPostInit+0x120>)
 8000f24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f28:	6153      	str	r3, [r2, #20]
 8000f2a:	4b3c      	ldr	r3, [pc, #240]	; (800101c <HAL_TIM_MspPostInit+0x120>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f32:	61bb      	str	r3, [r7, #24]
 8000f34:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	4b39      	ldr	r3, [pc, #228]	; (800101c <HAL_TIM_MspPostInit+0x120>)
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	4a38      	ldr	r2, [pc, #224]	; (800101c <HAL_TIM_MspPostInit+0x120>)
 8000f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f40:	6153      	str	r3, [r2, #20]
 8000f42:	4b36      	ldr	r3, [pc, #216]	; (800101c <HAL_TIM_MspPostInit+0x120>)
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	4b33      	ldr	r3, [pc, #204]	; (800101c <HAL_TIM_MspPostInit+0x120>)
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	4a32      	ldr	r2, [pc, #200]	; (800101c <HAL_TIM_MspPostInit+0x120>)
 8000f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f58:	6153      	str	r3, [r2, #20]
 8000f5a:	4b30      	ldr	r3, [pc, #192]	; (800101c <HAL_TIM_MspPostInit+0x120>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]
    PC3     ------> TIM1_CH4
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000f66:	230f      	movs	r3, #15
 8000f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000f76:	2302      	movs	r3, #2
 8000f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f7a:	f107 031c 	add.w	r3, r7, #28
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4827      	ldr	r0, [pc, #156]	; (8001020 <HAL_TIM_MspPostInit+0x124>)
 8000f82:	f001 fc1f 	bl	80027c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f86:	2380      	movs	r3, #128	; 0x80
 8000f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000f96:	2306      	movs	r3, #6
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9a:	f107 031c 	add.w	r3, r7, #28
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa4:	f001 fc0e 	bl	80027c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000fb8:	2306      	movs	r3, #6
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbc:	f107 031c 	add.w	r3, r7, #28
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4818      	ldr	r0, [pc, #96]	; (8001024 <HAL_TIM_MspPostInit+0x128>)
 8000fc4:	f001 fbfe 	bl	80027c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000fc8:	e021      	b.n	800100e <HAL_TIM_MspPostInit+0x112>
  else if(htim->Instance==TIM2)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fd2:	d11c      	bne.n	800100e <HAL_TIM_MspPostInit+0x112>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <HAL_TIM_MspPostInit+0x120>)
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	4a10      	ldr	r2, [pc, #64]	; (800101c <HAL_TIM_MspPostInit+0x120>)
 8000fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fde:	6153      	str	r3, [r2, #20]
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	; (800101c <HAL_TIM_MspPostInit+0x120>)
 8000fe2:	695b      	ldr	r3, [r3, #20]
 8000fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fec:	2320      	movs	r3, #32
 8000fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	4619      	mov	r1, r3
 8001006:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800100a:	f001 fbdb 	bl	80027c4 <HAL_GPIO_Init>
}
 800100e:	bf00      	nop
 8001010:	3730      	adds	r7, #48	; 0x30
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40012c00 	.word	0x40012c00
 800101c:	40021000 	.word	0x40021000
 8001020:	48000800 	.word	0x48000800
 8001024:	48000400 	.word	0x48000400

08001028 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08c      	sub	sp, #48	; 0x30
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 031c 	add.w	r3, r7, #28
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a32      	ldr	r2, [pc, #200]	; (8001110 <HAL_UART_MspInit+0xe8>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d130      	bne.n	80010ac <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800104a:	4b32      	ldr	r3, [pc, #200]	; (8001114 <HAL_UART_MspInit+0xec>)
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	4a31      	ldr	r2, [pc, #196]	; (8001114 <HAL_UART_MspInit+0xec>)
 8001050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001054:	6193      	str	r3, [r2, #24]
 8001056:	4b2f      	ldr	r3, [pc, #188]	; (8001114 <HAL_UART_MspInit+0xec>)
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800105e:	61bb      	str	r3, [r7, #24]
 8001060:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001062:	4b2c      	ldr	r3, [pc, #176]	; (8001114 <HAL_UART_MspInit+0xec>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	4a2b      	ldr	r2, [pc, #172]	; (8001114 <HAL_UART_MspInit+0xec>)
 8001068:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800106c:	6153      	str	r3, [r2, #20]
 800106e:	4b29      	ldr	r3, [pc, #164]	; (8001114 <HAL_UART_MspInit+0xec>)
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800107a:	2330      	movs	r3, #48	; 0x30
 800107c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001086:	2303      	movs	r3, #3
 8001088:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800108a:	2307      	movs	r3, #7
 800108c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	4619      	mov	r1, r3
 8001094:	4820      	ldr	r0, [pc, #128]	; (8001118 <HAL_UART_MspInit+0xf0>)
 8001096:	f001 fb95 	bl	80027c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2100      	movs	r1, #0
 800109e:	2025      	movs	r0, #37	; 0x25
 80010a0:	f001 fa11 	bl	80024c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010a4:	2025      	movs	r0, #37	; 0x25
 80010a6:	f001 fa2a 	bl	80024fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010aa:	e02d      	b.n	8001108 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a1a      	ldr	r2, [pc, #104]	; (800111c <HAL_UART_MspInit+0xf4>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d128      	bne.n	8001108 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010b6:	4b17      	ldr	r3, [pc, #92]	; (8001114 <HAL_UART_MspInit+0xec>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	4a16      	ldr	r2, [pc, #88]	; (8001114 <HAL_UART_MspInit+0xec>)
 80010bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c0:	61d3      	str	r3, [r2, #28]
 80010c2:	4b14      	ldr	r3, [pc, #80]	; (8001114 <HAL_UART_MspInit+0xec>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <HAL_UART_MspInit+0xec>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	4a10      	ldr	r2, [pc, #64]	; (8001114 <HAL_UART_MspInit+0xec>)
 80010d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d8:	6153      	str	r3, [r2, #20]
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <HAL_UART_MspInit+0xec>)
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010e6:	230c      	movs	r3, #12
 80010e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010f6:	2307      	movs	r3, #7
 80010f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	4619      	mov	r1, r3
 8001100:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001104:	f001 fb5e 	bl	80027c4 <HAL_GPIO_Init>
}
 8001108:	bf00      	nop
 800110a:	3730      	adds	r7, #48	; 0x30
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40013800 	.word	0x40013800
 8001114:	40021000 	.word	0x40021000
 8001118:	48000800 	.word	0x48000800
 800111c:	40004400 	.word	0x40004400

08001120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001132:	e7fe      	b.n	8001132 <HardFault_Handler+0x4>

08001134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <MemManage_Handler+0x4>

0800113a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113e:	e7fe      	b.n	800113e <BusFault_Handler+0x4>

08001140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <UsageFault_Handler+0x4>

08001146 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  //{
  //  toggleLED();
  //  cnt = 0;
  //}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001174:	f000 f8ea 	bl	800134c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}

0800117c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001190:	4802      	ldr	r0, [pc, #8]	; (800119c <DMA1_Channel1_IRQHandler+0x10>)
 8001192:	f001 fa53 	bl	800263c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000078 	.word	0x20000078

080011a0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80011a4:	4803      	ldr	r0, [pc, #12]	; (80011b4 <ADC1_IRQHandler+0x14>)
 80011a6:	f000 fb4f 	bl	8001848 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */
  togglePin();
 80011aa:	f7ff f9df 	bl	800056c <togglePin>
  /* USER CODE END ADC1_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000028 	.word	0x20000028

080011b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  toggleLED();
 80011bc:	f7ff f9ca 	bl	8000554 <toggleLED>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011c0:	4813      	ldr	r0, [pc, #76]	; (8001210 <TIM2_IRQHandler+0x58>)
 80011c2:	f003 f89f 	bl	8004304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  static float duty = 0.0F;
  setDuty(TIM2, duty);
 80011c6:	4b13      	ldr	r3, [pc, #76]	; (8001214 <TIM2_IRQHandler+0x5c>)
 80011c8:	edd3 7a00 	vldr	s15, [r3]
 80011cc:	eeb0 0a67 	vmov.f32	s0, s15
 80011d0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80011d4:	f7ff f996 	bl	8000504 <setDuty>
  duty += 10.0F;
 80011d8:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <TIM2_IRQHandler+0x5c>)
 80011da:	edd3 7a00 	vldr	s15, [r3]
 80011de:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <TIM2_IRQHandler+0x5c>)
 80011e8:	edc3 7a00 	vstr	s15, [r3]
  if (duty > 100.0F)
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <TIM2_IRQHandler+0x5c>)
 80011ee:	edd3 7a00 	vldr	s15, [r3]
 80011f2:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001218 <TIM2_IRQHandler+0x60>
 80011f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fe:	dc00      	bgt.n	8001202 <TIM2_IRQHandler+0x4a>
      duty = 0.0F;

  /* USER CODE END TIM2_IRQn 1 */
}
 8001200:	e003      	b.n	800120a <TIM2_IRQHandler+0x52>
      duty = 0.0F;
 8001202:	4b04      	ldr	r3, [pc, #16]	; (8001214 <TIM2_IRQHandler+0x5c>)
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	200000fc 	.word	0x200000fc
 8001214:	20000240 	.word	0x20000240
 8001218:	42c80000 	.word	0x42c80000

0800121c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001220:	4802      	ldr	r0, [pc, #8]	; (800122c <USART1_IRQHandler+0x10>)
 8001222:	f004 f985 	bl	8005530 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	2000013c 	.word	0x2000013c

08001230 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001234:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001238:	f001 fc68 	bl	8002b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}

08001240 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <SystemInit+0x28>)
 8001246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800124a:	4a07      	ldr	r2, [pc, #28]	; (8001268 <SystemInit+0x28>)
 800124c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001250:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <SystemInit+0x28>)
 8001256:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800125a:	609a      	str	r2, [r3, #8]
#endif
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800126c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001270:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001272:	e003      	b.n	800127c <LoopCopyDataInit>

08001274 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001276:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001278:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800127a:	3104      	adds	r1, #4

0800127c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800127c:	480b      	ldr	r0, [pc, #44]	; (80012ac <LoopForever+0xa>)
	ldr	r3, =_edata
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001280:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001282:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001284:	d3f6      	bcc.n	8001274 <CopyDataInit>
	ldr	r2, =_sbss
 8001286:	4a0b      	ldr	r2, [pc, #44]	; (80012b4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001288:	e002      	b.n	8001290 <LoopFillZerobss>

0800128a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800128a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800128c:	f842 3b04 	str.w	r3, [r2], #4

08001290 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <LoopForever+0x16>)
	cmp	r2, r3
 8001292:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001294:	d3f9      	bcc.n	800128a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001296:	f7ff ffd3 	bl	8001240 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800129a:	f004 fde1 	bl	8005e60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800129e:	f7ff f971 	bl	8000584 <main>

080012a2 <LoopForever>:

LoopForever:
    b LoopForever
 80012a2:	e7fe      	b.n	80012a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012a4:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 80012a8:	08005f10 	.word	0x08005f10
	ldr	r0, =_sdata
 80012ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80012b0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80012b4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80012b8:	20000248 	.word	0x20000248

080012bc <CAN_RX1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012bc:	e7fe      	b.n	80012bc <CAN_RX1_IRQHandler>
	...

080012c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <HAL_Init+0x28>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a07      	ldr	r2, [pc, #28]	; (80012e8 <HAL_Init+0x28>)
 80012ca:	f043 0310 	orr.w	r3, r3, #16
 80012ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d0:	2003      	movs	r0, #3
 80012d2:	f001 f8ed 	bl	80024b0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f000 f808 	bl	80012ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012dc:	f7ff fd34 	bl	8000d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40022000 	.word	0x40022000

080012ec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_InitTick+0x54>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_InitTick+0x58>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4619      	mov	r1, r3
 80012fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001302:	fbb3 f3f1 	udiv	r3, r3, r1
 8001306:	fbb2 f3f3 	udiv	r3, r2, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f001 f905 	bl	800251a <HAL_SYSTICK_Config>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e00e      	b.n	8001338 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b0f      	cmp	r3, #15
 800131e:	d80a      	bhi.n	8001336 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001320:	2200      	movs	r2, #0
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	f001 f8cd 	bl	80024c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800132c:	4a06      	ldr	r2, [pc, #24]	; (8001348 <HAL_InitTick+0x5c>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	e000      	b.n	8001338 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
}
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000000 	.word	0x20000000
 8001344:	20000008 	.word	0x20000008
 8001348:	20000004 	.word	0x20000004

0800134c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_IncTick+0x20>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_IncTick+0x24>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4413      	add	r3, r2
 800135c:	4a04      	ldr	r2, [pc, #16]	; (8001370 <HAL_IncTick+0x24>)
 800135e:	6013      	str	r3, [r2, #0]
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	20000008 	.word	0x20000008
 8001370:	20000244 	.word	0x20000244

08001374 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return uwTick;  
 8001378:	4b03      	ldr	r3, [pc, #12]	; (8001388 <HAL_GetTick+0x14>)
 800137a:	681b      	ldr	r3, [r3, #0]
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20000244 	.word	0x20000244

0800138c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001394:	f7ff ffee 	bl	8001374 <HAL_GetTick>
 8001398:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a4:	d005      	beq.n	80013b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <HAL_Delay+0x40>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4413      	add	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80013b2:	bf00      	nop
 80013b4:	f7ff ffde 	bl	8001374 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d8f7      	bhi.n	80013b4 <HAL_Delay+0x28>
  {
  }
}
 80013c4:	bf00      	nop
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000008 	.word	0x20000008

080013d0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b09a      	sub	sp, #104	; 0x68
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001414:	2300      	movs	r3, #0
 8001416:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800141a:	2300      	movs	r3, #0
 800141c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e169      	b.n	8001700 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f003 0310 	and.w	r3, r3, #16
 800143a:	2b00      	cmp	r3, #0
 800143c:	d176      	bne.n	800152c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	2b00      	cmp	r3, #0
 8001444:	d152      	bne.n	80014ec <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff fc9d 	bl	8000da0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d13b      	bne.n	80014ec <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f000 feeb 	bl	8002250 <ADC_Disable>
 800147a:	4603      	mov	r3, r0
 800147c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	f003 0310 	and.w	r3, r3, #16
 8001488:	2b00      	cmp	r3, #0
 800148a:	d12f      	bne.n	80014ec <HAL_ADC_Init+0xe0>
 800148c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001490:	2b00      	cmp	r3, #0
 8001492:	d12b      	bne.n	80014ec <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800149c:	f023 0302 	bic.w	r3, r3, #2
 80014a0:	f043 0202 	orr.w	r2, r3, #2
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014b6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	689a      	ldr	r2, [r3, #8]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014c6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014c8:	4b8f      	ldr	r3, [pc, #572]	; (8001708 <HAL_ADC_Init+0x2fc>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a8f      	ldr	r2, [pc, #572]	; (800170c <HAL_ADC_Init+0x300>)
 80014ce:	fba2 2303 	umull	r2, r3, r2, r3
 80014d2:	0c9a      	lsrs	r2, r3, #18
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014de:	e002      	b.n	80014e6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1f9      	bne.n	80014e0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d007      	beq.n	800150a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001508:	d110      	bne.n	800152c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	f023 0312 	bic.w	r3, r3, #18
 8001512:	f043 0210 	orr.w	r2, r3, #16
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	f043 0201 	orr.w	r2, r3, #1
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	f003 0310 	and.w	r3, r3, #16
 8001534:	2b00      	cmp	r3, #0
 8001536:	f040 80d6 	bne.w	80016e6 <HAL_ADC_Init+0x2da>
 800153a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800153e:	2b00      	cmp	r3, #0
 8001540:	f040 80d1 	bne.w	80016e6 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800154e:	2b00      	cmp	r3, #0
 8001550:	f040 80c9 	bne.w	80016e6 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800155c:	f043 0202 	orr.w	r2, r3, #2
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001564:	4b6a      	ldr	r3, [pc, #424]	; (8001710 <HAL_ADC_Init+0x304>)
 8001566:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	2b01      	cmp	r3, #1
 8001578:	d108      	bne.n	800158c <HAL_ADC_Init+0x180>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b01      	cmp	r3, #1
 8001586:	d101      	bne.n	800158c <HAL_ADC_Init+0x180>
 8001588:	2301      	movs	r3, #1
 800158a:	e000      	b.n	800158e <HAL_ADC_Init+0x182>
 800158c:	2300      	movs	r3, #0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d11c      	bne.n	80015cc <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001592:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001594:	2b00      	cmp	r3, #0
 8001596:	d010      	beq.n	80015ba <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f003 0303 	and.w	r3, r3, #3
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d107      	bne.n	80015b4 <HAL_ADC_Init+0x1a8>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d101      	bne.n	80015b4 <HAL_ADC_Init+0x1a8>
 80015b0:	2301      	movs	r3, #1
 80015b2:	e000      	b.n	80015b6 <HAL_ADC_Init+0x1aa>
 80015b4:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d108      	bne.n	80015cc <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80015ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	431a      	orrs	r2, r3
 80015c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015ca:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	7e5b      	ldrb	r3, [r3, #25]
 80015d0:	035b      	lsls	r3, r3, #13
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015d6:	2a01      	cmp	r2, #1
 80015d8:	d002      	beq.n	80015e0 <HAL_ADC_Init+0x1d4>
 80015da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015de:	e000      	b.n	80015e2 <HAL_ADC_Init+0x1d6>
 80015e0:	2200      	movs	r2, #0
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	431a      	orrs	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015f2:	4313      	orrs	r3, r2
 80015f4:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d11b      	bne.n	8001638 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	7e5b      	ldrb	r3, [r3, #25]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d109      	bne.n	800161c <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160c:	3b01      	subs	r3, #1
 800160e:	045a      	lsls	r2, r3, #17
 8001610:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001612:	4313      	orrs	r3, r2
 8001614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001618:	663b      	str	r3, [r7, #96]	; 0x60
 800161a:	e00d      	b.n	8001638 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001624:	f043 0220 	orr.w	r2, r3, #32
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001630:	f043 0201 	orr.w	r2, r3, #1
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163c:	2b01      	cmp	r3, #1
 800163e:	d007      	beq.n	8001650 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001648:	4313      	orrs	r3, r2
 800164a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800164c:	4313      	orrs	r3, r2
 800164e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	2b00      	cmp	r3, #0
 800165c:	d114      	bne.n	8001688 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	6812      	ldr	r2, [r2, #0]
 8001668:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800166c:	f023 0302 	bic.w	r3, r3, #2
 8001670:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	7e1b      	ldrb	r3, [r3, #24]
 8001676:	039a      	lsls	r2, r3, #14
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4313      	orrs	r3, r2
 8001682:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001684:	4313      	orrs	r3, r2
 8001686:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	68da      	ldr	r2, [r3, #12]
 800168e:	4b21      	ldr	r3, [pc, #132]	; (8001714 <HAL_ADC_Init+0x308>)
 8001690:	4013      	ands	r3, r2
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6812      	ldr	r2, [r2, #0]
 8001696:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001698:	430b      	orrs	r3, r1
 800169a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d10c      	bne.n	80016be <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f023 010f 	bic.w	r1, r3, #15
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	1e5a      	subs	r2, r3, #1
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	631a      	str	r2, [r3, #48]	; 0x30
 80016bc:	e007      	b.n	80016ce <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 020f 	bic.w	r2, r2, #15
 80016cc:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	f023 0303 	bic.w	r3, r3, #3
 80016dc:	f043 0201 	orr.w	r2, r3, #1
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	641a      	str	r2, [r3, #64]	; 0x40
 80016e4:	e00a      	b.n	80016fc <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	f023 0312 	bic.w	r3, r3, #18
 80016ee:	f043 0210 	orr.w	r2, r3, #16
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80016f6:	2301      	movs	r3, #1
 80016f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80016fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001700:	4618      	mov	r0, r3
 8001702:	3768      	adds	r7, #104	; 0x68
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000000 	.word	0x20000000
 800170c:	431bde83 	.word	0x431bde83
 8001710:	50000300 	.word	0x50000300
 8001714:	fff0c007 	.word	0xfff0c007

08001718 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 0304 	and.w	r3, r3, #4
 800172e:	2b00      	cmp	r3, #0
 8001730:	f040 8083 	bne.w	800183a <HAL_ADC_Start_IT+0x122>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800173a:	2b01      	cmp	r3, #1
 800173c:	d101      	bne.n	8001742 <HAL_ADC_Start_IT+0x2a>
 800173e:	2302      	movs	r3, #2
 8001740:	e07e      	b.n	8001840 <HAL_ADC_Start_IT+0x128>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 fd22 	bl	8002194 <ADC_Enable>
 8001750:	4603      	mov	r3, r0
 8001752:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d16a      	bne.n	8001830 <HAL_ADC_Start_IT+0x118>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001762:	f023 0301 	bic.w	r3, r3, #1
 8001766:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d007      	beq.n	8001798 <HAL_ADC_Start_IT+0x80>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001790:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017a4:	d106      	bne.n	80017b4 <HAL_ADC_Start_IT+0x9c>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	f023 0206 	bic.w	r2, r3, #6
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	645a      	str	r2, [r3, #68]	; 0x44
 80017b2:	e002      	b.n	80017ba <HAL_ADC_Start_IT+0xa2>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	221c      	movs	r2, #28
 80017c8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	2b08      	cmp	r3, #8
 80017d0:	d110      	bne.n	80017f4 <HAL_ADC_Start_IT+0xdc>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 0204 	bic.w	r2, r2, #4
 80017e0:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f042 0208 	orr.w	r2, r2, #8
 80017f0:	605a      	str	r2, [r3, #4]
          break;
 80017f2:	e008      	b.n	8001806 <HAL_ADC_Start_IT+0xee>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f042 020c 	orr.w	r2, r2, #12
 8001802:	605a      	str	r2, [r3, #4]
          break;
 8001804:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800180a:	2b01      	cmp	r3, #1
 800180c:	d107      	bne.n	800181e <HAL_ADC_Start_IT+0x106>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 0210 	bic.w	r2, r2, #16
 800181c:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f042 0204 	orr.w	r2, r2, #4
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	e006      	b.n	800183e <HAL_ADC_Start_IT+0x126>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001838:	e001      	b.n	800183e <HAL_ADC_Start_IT+0x126>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800183a:	2302      	movs	r3, #2
 800183c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800183e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001854:	2300      	movs	r3, #0
 8001856:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	2b04      	cmp	r3, #4
 8001868:	d106      	bne.n	8001878 <HAL_ADC_IRQHandler+0x30>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b04      	cmp	r3, #4
 8001876:	d00d      	beq.n	8001894 <HAL_ADC_IRQHandler+0x4c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001882:	2b08      	cmp	r3, #8
 8001884:	d15e      	bne.n	8001944 <HAL_ADC_IRQHandler+0xfc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0308 	and.w	r3, r3, #8
 8001890:	2b08      	cmp	r3, #8
 8001892:	d157      	bne.n	8001944 <HAL_ADC_IRQHandler+0xfc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	f003 0310 	and.w	r3, r3, #16
 800189c:	2b00      	cmp	r3, #0
 800189e:	d105      	bne.n	80018ac <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	641a      	str	r2, [r3, #64]	; 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d139      	bne.n	8001936 <HAL_ADC_IRQHandler+0xee>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d134      	bne.n	8001936 <HAL_ADC_IRQHandler+0xee>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	2b08      	cmp	r3, #8
 80018d8:	d12d      	bne.n	8001936 <HAL_ADC_IRQHandler+0xee>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d11a      	bne.n	800191e <HAL_ADC_IRQHandler+0xd6>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 020c 	bic.w	r2, r2, #12
 80018f6:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d112      	bne.n	8001936 <HAL_ADC_IRQHandler+0xee>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001914:	f043 0201 	orr.w	r2, r3, #1
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	641a      	str	r2, [r3, #64]	; 0x40
 800191c:	e00b      	b.n	8001936 <HAL_ADC_IRQHandler+0xee>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f043 0210 	orr.w	r2, r3, #16
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	f043 0201 	orr.w	r2, r3, #1
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff fd4a 	bl	80013d0 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	220c      	movs	r2, #12
 8001942:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0320 	and.w	r3, r3, #32
 800194e:	2b20      	cmp	r3, #32
 8001950:	d106      	bne.n	8001960 <HAL_ADC_IRQHandler+0x118>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 0320 	and.w	r3, r3, #32
 800195c:	2b20      	cmp	r3, #32
 800195e:	d00d      	beq.n	800197c <HAL_ADC_IRQHandler+0x134>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800196a:	2b40      	cmp	r3, #64	; 0x40
 800196c:	d16d      	bne.n	8001a4a <HAL_ADC_IRQHandler+0x202>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001978:	2b40      	cmp	r3, #64	; 0x40
 800197a:	d166      	bne.n	8001a4a <HAL_ADC_IRQHandler+0x202>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001980:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	641a      	str	r2, [r3, #64]	; 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001996:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d010      	beq.n	80019c0 <HAL_ADC_IRQHandler+0x178>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d149      	bne.n	8001a3c <HAL_ADC_IRQHandler+0x1f4>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d142      	bne.n	8001a3c <HAL_ADC_IRQHandler+0x1f4>
        (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )   )
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d13d      	bne.n	8001a3c <HAL_ADC_IRQHandler+0x1f4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ca:	2b40      	cmp	r3, #64	; 0x40
 80019cc:	d136      	bne.n	8001a3c <HAL_ADC_IRQHandler+0x1f4>
        /* Get relevant register CFGR in ADC instance of ADC master or slave  */
        /* in function of multimode state (for devices with multimode         */
        /* available).                                                        */
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
        {
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	60fb      	str	r3, [r7, #12]
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d12d      	bne.n	8001a3c <HAL_ADC_IRQHandler+0x1f4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d11a      	bne.n	8001a24 <HAL_ADC_IRQHandler+0x1dc>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80019fc:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	641a      	str	r2, [r3, #64]	; 0x40

            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d112      	bne.n	8001a3c <HAL_ADC_IRQHandler+0x1f4>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	f043 0201 	orr.w	r2, r3, #1
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	641a      	str	r2, [r3, #64]	; 0x40
 8001a22:	e00b      	b.n	8001a3c <HAL_ADC_IRQHandler+0x1f4>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	f043 0210 	orr.w	r2, r3, #16
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	641a      	str	r2, [r3, #64]	; 0x40
          
            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a34:	f043 0201 	orr.w	r2, r3, #1
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f8cb 	bl	8001bd8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2260      	movs	r2, #96	; 0x60
 8001a48:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a54:	2b80      	cmp	r3, #128	; 0x80
 8001a56:	d113      	bne.n	8001a80 <HAL_ADC_IRQHandler+0x238>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a62:	2b80      	cmp	r3, #128	; 0x80
 8001a64:	d10c      	bne.n	8001a80 <HAL_ADC_IRQHandler+0x238>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff fcb6 	bl	80013e4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2280      	movs	r2, #128	; 0x80
 8001a7e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a8e:	d115      	bne.n	8001abc <HAL_ADC_IRQHandler+0x274>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a9e:	d10d      	bne.n	8001abc <HAL_ADC_IRQHandler+0x274>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 f8a7 	bl	8001c00 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aba:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aca:	d115      	bne.n	8001af8 <HAL_ADC_IRQHandler+0x2b0>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ad6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ada:	d10d      	bne.n	8001af8 <HAL_ADC_IRQHandler+0x2b0>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 f893 	bl	8001c14 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af6:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0310 	and.w	r3, r3, #16
 8001b02:	2b10      	cmp	r3, #16
 8001b04:	d13d      	bne.n	8001b82 <HAL_ADC_IRQHandler+0x33a>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 0310 	and.w	r3, r3, #16
 8001b10:	2b10      	cmp	r3, #16
 8001b12:	d136      	bne.n	8001b82 <HAL_ADC_IRQHandler+0x33a>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d102      	bne.n	8001b22 <HAL_ADC_IRQHandler+0x2da>
    {
      overrun_error = 1U;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	e019      	b.n	8001b56 <HAL_ADC_IRQHandler+0x30e>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b22:	4b2c      	ldr	r3, [pc, #176]	; (8001bd4 <HAL_ADC_IRQHandler+0x38c>)
 8001b24:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d109      	bne.n	8001b46 <HAL_ADC_IRQHandler+0x2fe>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d10a      	bne.n	8001b56 <HAL_ADC_IRQHandler+0x30e>
        {
          overrun_error = 1U;  
 8001b40:	2301      	movs	r3, #1
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	e007      	b.n	8001b56 <HAL_ADC_IRQHandler+0x30e>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_ADC_IRQHandler+0x30e>
        {
          overrun_error = 1U;  
 8001b52:	2301      	movs	r3, #1
 8001b54:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d10e      	bne.n	8001b7a <HAL_ADC_IRQHandler+0x332>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6c:	f043 0202 	orr.w	r2, r3, #2
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff fc3f 	bl	80013f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2210      	movs	r2, #16
 8001b80:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b90:	d11b      	bne.n	8001bca <HAL_ADC_IRQHandler+0x382>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ba0:	d113      	bne.n	8001bca <HAL_ADC_IRQHandler+0x382>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	f043 0208 	orr.w	r2, r3, #8
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bc2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 f811 	bl	8001bec <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001bca:	bf00      	nop
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	50000300 	.word	0x50000300

08001bd8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b09b      	sub	sp, #108	; 0x6c
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d101      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x22>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e299      	b.n	800217e <HAL_ADC_ConfigChannel+0x556>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f040 827d 	bne.w	800215c <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d81c      	bhi.n	8001ca4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	4413      	add	r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	231f      	movs	r3, #31
 8001c80:	4093      	lsls	r3, r2
 8001c82:	43db      	mvns	r3, r3
 8001c84:	4019      	ands	r1, r3
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	6818      	ldr	r0, [r3, #0]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	fa00 f203 	lsl.w	r2, r0, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	631a      	str	r2, [r3, #48]	; 0x30
 8001ca2:	e063      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b09      	cmp	r3, #9
 8001caa:	d81e      	bhi.n	8001cea <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	4413      	add	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	3b1e      	subs	r3, #30
 8001cc0:	221f      	movs	r2, #31
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	4019      	ands	r1, r3
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	6818      	ldr	r0, [r3, #0]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	4413      	add	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	3b1e      	subs	r3, #30
 8001cdc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	635a      	str	r2, [r3, #52]	; 0x34
 8001ce8:	e040      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b0e      	cmp	r3, #14
 8001cf0:	d81e      	bhi.n	8001d30 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	3b3c      	subs	r3, #60	; 0x3c
 8001d06:	221f      	movs	r2, #31
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	4019      	ands	r1, r3
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	4413      	add	r3, r2
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	3b3c      	subs	r3, #60	; 0x3c
 8001d22:	fa00 f203 	lsl.w	r2, r0, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	639a      	str	r2, [r3, #56]	; 0x38
 8001d2e:	e01d      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	4413      	add	r3, r2
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	3b5a      	subs	r3, #90	; 0x5a
 8001d44:	221f      	movs	r2, #31
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	4019      	ands	r1, r3
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	4413      	add	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	3b5a      	subs	r3, #90	; 0x5a
 8001d60:	fa00 f203 	lsl.w	r2, r0, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f040 80e5 	bne.w	8001f46 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b09      	cmp	r3, #9
 8001d82:	d91c      	bls.n	8001dbe <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6999      	ldr	r1, [r3, #24]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	4413      	add	r3, r2
 8001d94:	3b1e      	subs	r3, #30
 8001d96:	2207      	movs	r2, #7
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	4019      	ands	r1, r3
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	6898      	ldr	r0, [r3, #8]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4613      	mov	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4413      	add	r3, r2
 8001dae:	3b1e      	subs	r3, #30
 8001db0:	fa00 f203 	lsl.w	r2, r0, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	619a      	str	r2, [r3, #24]
 8001dbc:	e019      	b.n	8001df2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6959      	ldr	r1, [r3, #20]
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	2207      	movs	r2, #7
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	4019      	ands	r1, r3
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	6898      	ldr	r0, [r3, #8]
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	4613      	mov	r3, r2
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	4413      	add	r3, r2
 8001de6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	695a      	ldr	r2, [r3, #20]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	08db      	lsrs	r3, r3, #3
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d84f      	bhi.n	8001eb4 <HAL_ADC_ConfigChannel+0x28c>
 8001e14:	a201      	add	r2, pc, #4	; (adr r2, 8001e1c <HAL_ADC_ConfigChannel+0x1f4>)
 8001e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1a:	bf00      	nop
 8001e1c:	08001e2d 	.word	0x08001e2d
 8001e20:	08001e4f 	.word	0x08001e4f
 8001e24:	08001e71 	.word	0x08001e71
 8001e28:	08001e93 	.word	0x08001e93
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e32:	4b99      	ldr	r3, [pc, #612]	; (8002098 <HAL_ADC_ConfigChannel+0x470>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	0691      	lsls	r1, r2, #26
 8001e3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	431a      	orrs	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e4a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e4c:	e07e      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e54:	4b90      	ldr	r3, [pc, #576]	; (8002098 <HAL_ADC_ConfigChannel+0x470>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	0691      	lsls	r1, r2, #26
 8001e5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e60:	430a      	orrs	r2, r1
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e6c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e6e:	e06d      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001e76:	4b88      	ldr	r3, [pc, #544]	; (8002098 <HAL_ADC_ConfigChannel+0x470>)
 8001e78:	4013      	ands	r3, r2
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	6812      	ldr	r2, [r2, #0]
 8001e7e:	0691      	lsls	r1, r2, #26
 8001e80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e82:	430a      	orrs	r2, r1
 8001e84:	431a      	orrs	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e8e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e90:	e05c      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e98:	4b7f      	ldr	r3, [pc, #508]	; (8002098 <HAL_ADC_ConfigChannel+0x470>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	6812      	ldr	r2, [r2, #0]
 8001ea0:	0691      	lsls	r1, r2, #26
 8001ea2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001eb0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001eb2:	e04b      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	069b      	lsls	r3, r3, #26
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d107      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ed6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ede:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	069b      	lsls	r3, r3, #26
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d107      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001efa:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	069b      	lsls	r3, r3, #26
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d107      	bne.n	8001f20 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f1e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	069b      	lsls	r3, r3, #26
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d10a      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f42:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001f44:	e001      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001f46:	bf00      	nop
 8001f48:	e000      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x324>
      break;
 8001f4a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d108      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x344>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d101      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x344>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <HAL_ADC_ConfigChannel+0x346>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f040 80ff 	bne.w	8002172 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d00f      	beq.n	8001f9c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43da      	mvns	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	400a      	ands	r2, r1
 8001f96:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001f9a:	e049      	b.n	8002030 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	409a      	lsls	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2b09      	cmp	r3, #9
 8001fbc:	d91c      	bls.n	8001ff8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6999      	ldr	r1, [r3, #24]
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	4413      	add	r3, r2
 8001fce:	3b1b      	subs	r3, #27
 8001fd0:	2207      	movs	r2, #7
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	4019      	ands	r1, r3
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	6898      	ldr	r0, [r3, #8]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3b1b      	subs	r3, #27
 8001fea:	fa00 f203 	lsl.w	r2, r0, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	619a      	str	r2, [r3, #24]
 8001ff6:	e01b      	b.n	8002030 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6959      	ldr	r1, [r3, #20]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	4613      	mov	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4413      	add	r3, r2
 800200a:	2207      	movs	r2, #7
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	4019      	ands	r1, r3
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	6898      	ldr	r0, [r3, #8]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	4613      	mov	r3, r2
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	4413      	add	r3, r2
 8002024:	fa00 f203 	lsl.w	r2, r0, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002030:	4b1a      	ldr	r3, [pc, #104]	; (800209c <HAL_ADC_ConfigChannel+0x474>)
 8002032:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b10      	cmp	r3, #16
 800203a:	d105      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800203c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002044:	2b00      	cmp	r3, #0
 8002046:	d014      	beq.n	8002072 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800204c:	2b11      	cmp	r3, #17
 800204e:	d105      	bne.n	800205c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002050:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00a      	beq.n	8002072 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002060:	2b12      	cmp	r3, #18
 8002062:	f040 8086 	bne.w	8002172 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800206e:	2b00      	cmp	r3, #0
 8002070:	d17f      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 0303 	and.w	r3, r3, #3
 8002080:	2b01      	cmp	r3, #1
 8002082:	d10d      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x478>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b01      	cmp	r3, #1
 8002090:	d106      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x478>
 8002092:	2301      	movs	r3, #1
 8002094:	e005      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x47a>
 8002096:	bf00      	nop
 8002098:	83fff000 	.word	0x83fff000
 800209c:	50000300 	.word	0x50000300
 80020a0:	2300      	movs	r3, #0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d150      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80020a6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d010      	beq.n	80020ce <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d107      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x4a0>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d101      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x4a0>
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <HAL_ADC_ConfigChannel+0x4a2>
 80020c8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d13c      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2b10      	cmp	r3, #16
 80020d4:	d11d      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x4ea>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020de:	d118      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80020e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020ea:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020ec:	4b27      	ldr	r3, [pc, #156]	; (800218c <HAL_ADC_ConfigChannel+0x564>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a27      	ldr	r2, [pc, #156]	; (8002190 <HAL_ADC_ConfigChannel+0x568>)
 80020f2:	fba2 2303 	umull	r2, r3, r2, r3
 80020f6:	0c9a      	lsrs	r2, r3, #18
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002102:	e002      	b.n	800210a <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	3b01      	subs	r3, #1
 8002108:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1f9      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002110:	e02e      	b.n	8002170 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2b11      	cmp	r3, #17
 8002118:	d10b      	bne.n	8002132 <HAL_ADC_ConfigChannel+0x50a>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002122:	d106      	bne.n	8002132 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800212c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800212e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002130:	e01e      	b.n	8002170 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2b12      	cmp	r3, #18
 8002138:	d11a      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800213a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002144:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002146:	e013      	b.n	8002170 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	f043 0220 	orr.w	r2, r3, #32
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800215a:	e00a      	b.n	8002172 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	f043 0220 	orr.w	r2, r3, #32
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800216e:	e000      	b.n	8002172 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002170:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800217a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800217e:	4618      	mov	r0, r3
 8002180:	376c      	adds	r7, #108	; 0x6c
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	20000000 	.word	0x20000000
 8002190:	431bde83 	.word	0x431bde83

08002194 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d108      	bne.n	80021c0 <ADC_Enable+0x2c>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <ADC_Enable+0x2c>
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <ADC_Enable+0x2e>
 80021c0:	2300      	movs	r3, #0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d13c      	bne.n	8002240 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	4b1f      	ldr	r3, [pc, #124]	; (800224c <ADC_Enable+0xb8>)
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00d      	beq.n	80021f0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d8:	f043 0210 	orr.w	r2, r3, #16
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e4:	f043 0201 	orr.w	r2, r3, #1
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e028      	b.n	8002242 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0201 	orr.w	r2, r2, #1
 80021fe:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002200:	f7ff f8b8 	bl	8001374 <HAL_GetTick>
 8002204:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002206:	e014      	b.n	8002232 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002208:	f7ff f8b4 	bl	8001374 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d90d      	bls.n	8002232 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f043 0210 	orr.w	r2, r3, #16
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	f043 0201 	orr.w	r2, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e007      	b.n	8002242 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b01      	cmp	r3, #1
 800223e:	d1e3      	bne.n	8002208 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	8000003f 	.word	0x8000003f

08002250 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	2b01      	cmp	r3, #1
 8002268:	d108      	bne.n	800227c <ADC_Disable+0x2c>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <ADC_Disable+0x2c>
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <ADC_Disable+0x2e>
 800227c:	2300      	movs	r3, #0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d040      	beq.n	8002304 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 030d 	and.w	r3, r3, #13
 800228c:	2b01      	cmp	r3, #1
 800228e:	d10f      	bne.n	80022b0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f042 0202 	orr.w	r2, r2, #2
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2203      	movs	r2, #3
 80022a6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80022a8:	f7ff f864 	bl	8001374 <HAL_GetTick>
 80022ac:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80022ae:	e022      	b.n	80022f6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	f043 0210 	orr.w	r2, r3, #16
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c0:	f043 0201 	orr.w	r2, r3, #1
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e01c      	b.n	8002306 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022cc:	f7ff f852 	bl	8001374 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d90d      	bls.n	80022f6 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f043 0210 	orr.w	r2, r3, #16
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	f043 0201 	orr.w	r2, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e007      	b.n	8002306 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b01      	cmp	r3, #1
 8002302:	d0e3      	beq.n	80022cc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002320:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <__NVIC_SetPriorityGrouping+0x44>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800232c:	4013      	ands	r3, r2
 800232e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002338:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800233c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002342:	4a04      	ldr	r2, [pc, #16]	; (8002354 <__NVIC_SetPriorityGrouping+0x44>)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	60d3      	str	r3, [r2, #12]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800235c:	4b04      	ldr	r3, [pc, #16]	; (8002370 <__NVIC_GetPriorityGrouping+0x18>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	0a1b      	lsrs	r3, r3, #8
 8002362:	f003 0307 	and.w	r3, r3, #7
}
 8002366:	4618      	mov	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	2b00      	cmp	r3, #0
 8002384:	db0b      	blt.n	800239e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	f003 021f 	and.w	r2, r3, #31
 800238c:	4907      	ldr	r1, [pc, #28]	; (80023ac <__NVIC_EnableIRQ+0x38>)
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	2001      	movs	r0, #1
 8002396:	fa00 f202 	lsl.w	r2, r0, r2
 800239a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	e000e100 	.word	0xe000e100

080023b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	6039      	str	r1, [r7, #0]
 80023ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	db0a      	blt.n	80023da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	490c      	ldr	r1, [pc, #48]	; (80023fc <__NVIC_SetPriority+0x4c>)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	0112      	lsls	r2, r2, #4
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	440b      	add	r3, r1
 80023d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d8:	e00a      	b.n	80023f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	4908      	ldr	r1, [pc, #32]	; (8002400 <__NVIC_SetPriority+0x50>)
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	3b04      	subs	r3, #4
 80023e8:	0112      	lsls	r2, r2, #4
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	440b      	add	r3, r1
 80023ee:	761a      	strb	r2, [r3, #24]
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000e100 	.word	0xe000e100
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002404:	b480      	push	{r7}
 8002406:	b089      	sub	sp, #36	; 0x24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f1c3 0307 	rsb	r3, r3, #7
 800241e:	2b04      	cmp	r3, #4
 8002420:	bf28      	it	cs
 8002422:	2304      	movcs	r3, #4
 8002424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3304      	adds	r3, #4
 800242a:	2b06      	cmp	r3, #6
 800242c:	d902      	bls.n	8002434 <NVIC_EncodePriority+0x30>
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3b03      	subs	r3, #3
 8002432:	e000      	b.n	8002436 <NVIC_EncodePriority+0x32>
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002438:	f04f 32ff 	mov.w	r2, #4294967295
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43da      	mvns	r2, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	401a      	ands	r2, r3
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800244c:	f04f 31ff 	mov.w	r1, #4294967295
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	fa01 f303 	lsl.w	r3, r1, r3
 8002456:	43d9      	mvns	r1, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800245c:	4313      	orrs	r3, r2
         );
}
 800245e:	4618      	mov	r0, r3
 8002460:	3724      	adds	r7, #36	; 0x24
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3b01      	subs	r3, #1
 8002478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800247c:	d301      	bcc.n	8002482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800247e:	2301      	movs	r3, #1
 8002480:	e00f      	b.n	80024a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002482:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <SysTick_Config+0x40>)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3b01      	subs	r3, #1
 8002488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800248a:	210f      	movs	r1, #15
 800248c:	f04f 30ff 	mov.w	r0, #4294967295
 8002490:	f7ff ff8e 	bl	80023b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002494:	4b05      	ldr	r3, [pc, #20]	; (80024ac <SysTick_Config+0x40>)
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800249a:	4b04      	ldr	r3, [pc, #16]	; (80024ac <SysTick_Config+0x40>)
 800249c:	2207      	movs	r2, #7
 800249e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	e000e010 	.word	0xe000e010

080024b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7ff ff29 	bl	8002310 <__NVIC_SetPriorityGrouping>
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b086      	sub	sp, #24
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	4603      	mov	r3, r0
 80024ce:	60b9      	str	r1, [r7, #8]
 80024d0:	607a      	str	r2, [r7, #4]
 80024d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024d8:	f7ff ff3e 	bl	8002358 <__NVIC_GetPriorityGrouping>
 80024dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	68b9      	ldr	r1, [r7, #8]
 80024e2:	6978      	ldr	r0, [r7, #20]
 80024e4:	f7ff ff8e 	bl	8002404 <NVIC_EncodePriority>
 80024e8:	4602      	mov	r2, r0
 80024ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ee:	4611      	mov	r1, r2
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff5d 	bl	80023b0 <__NVIC_SetPriority>
}
 80024f6:	bf00      	nop
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	4603      	mov	r3, r0
 8002506:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff ff31 	bl	8002374 <__NVIC_EnableIRQ>
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff ffa2 	bl	800246c <SysTick_Config>
 8002528:	4603      	mov	r3, r0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002532:	b580      	push	{r7, lr}
 8002534:	b084      	sub	sp, #16
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e037      	b.n	80025b8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2202      	movs	r2, #2
 800254c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800255e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002562:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800256c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002578:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002584:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	4313      	orrs	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f8f2 	bl	8002784 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}  
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d005      	beq.n	80025e2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2204      	movs	r2, #4
 80025da:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
 80025e0:	e027      	b.n	8002632 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 020e 	bic.w	r2, r2, #14
 80025f0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0201 	bic.w	r2, r2, #1
 8002600:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260a:	2101      	movs	r1, #1
 800260c:	fa01 f202 	lsl.w	r2, r1, r2
 8002610:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	4798      	blx	r3
    } 
  }
  return status;
 8002632:	7bfb      	ldrb	r3, [r7, #15]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	2204      	movs	r2, #4
 800265a:	409a      	lsls	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	4013      	ands	r3, r2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d024      	beq.n	80026ae <HAL_DMA_IRQHandler+0x72>
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	2b00      	cmp	r3, #0
 800266c:	d01f      	beq.n	80026ae <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0320 	and.w	r3, r3, #32
 8002678:	2b00      	cmp	r3, #0
 800267a:	d107      	bne.n	800268c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0204 	bic.w	r2, r2, #4
 800268a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002694:	2104      	movs	r1, #4
 8002696:	fa01 f202 	lsl.w	r2, r1, r2
 800269a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d06a      	beq.n	800277a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80026ac:	e065      	b.n	800277a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	2202      	movs	r2, #2
 80026b4:	409a      	lsls	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4013      	ands	r3, r2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d02c      	beq.n	8002718 <HAL_DMA_IRQHandler+0xdc>
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d027      	beq.n	8002718 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0320 	and.w	r3, r3, #32
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10b      	bne.n	80026ee <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 020a 	bic.w	r2, r2, #10
 80026e4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f6:	2102      	movs	r1, #2
 80026f8:	fa01 f202 	lsl.w	r2, r1, r2
 80026fc:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270a:	2b00      	cmp	r3, #0
 800270c:	d035      	beq.n	800277a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002716:	e030      	b.n	800277a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	2208      	movs	r2, #8
 800271e:	409a      	lsls	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4013      	ands	r3, r2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d028      	beq.n	800277a <HAL_DMA_IRQHandler+0x13e>
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	2b00      	cmp	r3, #0
 8002730:	d023      	beq.n	800277a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 020e 	bic.w	r2, r2, #14
 8002740:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274a:	2101      	movs	r1, #1
 800274c:	fa01 f202 	lsl.w	r2, r1, r2
 8002750:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276c:	2b00      	cmp	r3, #0
 800276e:	d004      	beq.n	800277a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	4798      	blx	r3
    }
  }
}  
 8002778:	e7ff      	b.n	800277a <HAL_DMA_IRQHandler+0x13e>
 800277a:	bf00      	nop
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	461a      	mov	r2, r3
 8002792:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <DMA_CalcBaseAndBitshift+0x34>)
 8002794:	4413      	add	r3, r2
 8002796:	4a09      	ldr	r2, [pc, #36]	; (80027bc <DMA_CalcBaseAndBitshift+0x38>)
 8002798:	fba2 2303 	umull	r2, r3, r2, r3
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	009a      	lsls	r2, r3, #2
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a06      	ldr	r2, [pc, #24]	; (80027c0 <DMA_CalcBaseAndBitshift+0x3c>)
 80027a8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	bffdfff8 	.word	0xbffdfff8
 80027bc:	cccccccd 	.word	0xcccccccd
 80027c0:	40020000 	.word	0x40020000

080027c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027d2:	e14e      	b.n	8002a72 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	2101      	movs	r1, #1
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	fa01 f303 	lsl.w	r3, r1, r3
 80027e0:	4013      	ands	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 8140 	beq.w	8002a6c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d00b      	beq.n	800280c <HAL_GPIO_Init+0x48>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d007      	beq.n	800280c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002800:	2b11      	cmp	r3, #17
 8002802:	d003      	beq.n	800280c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b12      	cmp	r3, #18
 800280a:	d130      	bne.n	800286e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	2203      	movs	r2, #3
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	43db      	mvns	r3, r3
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	4013      	ands	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	4313      	orrs	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002842:	2201      	movs	r2, #1
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	4013      	ands	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	091b      	lsrs	r3, r3, #4
 8002858:	f003 0201 	and.w	r2, r3, #1
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	2203      	movs	r2, #3
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43db      	mvns	r3, r3
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4013      	ands	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	4313      	orrs	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d003      	beq.n	80028ae <HAL_GPIO_Init+0xea>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b12      	cmp	r3, #18
 80028ac:	d123      	bne.n	80028f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	08da      	lsrs	r2, r3, #3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3208      	adds	r2, #8
 80028b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	220f      	movs	r2, #15
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43db      	mvns	r3, r3
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	4013      	ands	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	691a      	ldr	r2, [r3, #16]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	08da      	lsrs	r2, r3, #3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3208      	adds	r2, #8
 80028f0:	6939      	ldr	r1, [r7, #16]
 80028f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	2203      	movs	r2, #3
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43db      	mvns	r3, r3
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	4013      	ands	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 0203 	and.w	r2, r3, #3
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 809a 	beq.w	8002a6c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002938:	4b55      	ldr	r3, [pc, #340]	; (8002a90 <HAL_GPIO_Init+0x2cc>)
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	4a54      	ldr	r2, [pc, #336]	; (8002a90 <HAL_GPIO_Init+0x2cc>)
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	6193      	str	r3, [r2, #24]
 8002944:	4b52      	ldr	r3, [pc, #328]	; (8002a90 <HAL_GPIO_Init+0x2cc>)
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002950:	4a50      	ldr	r2, [pc, #320]	; (8002a94 <HAL_GPIO_Init+0x2d0>)
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	089b      	lsrs	r3, r3, #2
 8002956:	3302      	adds	r3, #2
 8002958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800295c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f003 0303 	and.w	r3, r3, #3
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	220f      	movs	r2, #15
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	4013      	ands	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800297a:	d013      	beq.n	80029a4 <HAL_GPIO_Init+0x1e0>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a46      	ldr	r2, [pc, #280]	; (8002a98 <HAL_GPIO_Init+0x2d4>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d00d      	beq.n	80029a0 <HAL_GPIO_Init+0x1dc>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a45      	ldr	r2, [pc, #276]	; (8002a9c <HAL_GPIO_Init+0x2d8>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d007      	beq.n	800299c <HAL_GPIO_Init+0x1d8>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a44      	ldr	r2, [pc, #272]	; (8002aa0 <HAL_GPIO_Init+0x2dc>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d101      	bne.n	8002998 <HAL_GPIO_Init+0x1d4>
 8002994:	2303      	movs	r3, #3
 8002996:	e006      	b.n	80029a6 <HAL_GPIO_Init+0x1e2>
 8002998:	2305      	movs	r3, #5
 800299a:	e004      	b.n	80029a6 <HAL_GPIO_Init+0x1e2>
 800299c:	2302      	movs	r3, #2
 800299e:	e002      	b.n	80029a6 <HAL_GPIO_Init+0x1e2>
 80029a0:	2301      	movs	r3, #1
 80029a2:	e000      	b.n	80029a6 <HAL_GPIO_Init+0x1e2>
 80029a4:	2300      	movs	r3, #0
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	f002 0203 	and.w	r2, r2, #3
 80029ac:	0092      	lsls	r2, r2, #2
 80029ae:	4093      	lsls	r3, r2
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029b6:	4937      	ldr	r1, [pc, #220]	; (8002a94 <HAL_GPIO_Init+0x2d0>)
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	089b      	lsrs	r3, r3, #2
 80029bc:	3302      	adds	r3, #2
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029c4:	4b37      	ldr	r3, [pc, #220]	; (8002aa4 <HAL_GPIO_Init+0x2e0>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	43db      	mvns	r3, r3
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4013      	ands	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80029e8:	4a2e      	ldr	r2, [pc, #184]	; (8002aa4 <HAL_GPIO_Init+0x2e0>)
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029ee:	4b2d      	ldr	r3, [pc, #180]	; (8002aa4 <HAL_GPIO_Init+0x2e0>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	4013      	ands	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a12:	4a24      	ldr	r2, [pc, #144]	; (8002aa4 <HAL_GPIO_Init+0x2e0>)
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a18:	4b22      	ldr	r3, [pc, #136]	; (8002aa4 <HAL_GPIO_Init+0x2e0>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	43db      	mvns	r3, r3
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4013      	ands	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a3c:	4a19      	ldr	r2, [pc, #100]	; (8002aa4 <HAL_GPIO_Init+0x2e0>)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a42:	4b18      	ldr	r3, [pc, #96]	; (8002aa4 <HAL_GPIO_Init+0x2e0>)
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a66:	4a0f      	ldr	r2, [pc, #60]	; (8002aa4 <HAL_GPIO_Init+0x2e0>)
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f47f aea9 	bne.w	80027d4 <HAL_GPIO_Init+0x10>
  }
}
 8002a82:	bf00      	nop
 8002a84:	371c      	adds	r7, #28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40021000 	.word	0x40021000
 8002a94:	40010000 	.word	0x40010000
 8002a98:	48000400 	.word	0x48000400
 8002a9c:	48000800 	.word	0x48000800
 8002aa0:	48000c00 	.word	0x48000c00
 8002aa4:	40010400 	.word	0x40010400

08002aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	807b      	strh	r3, [r7, #2]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ab8:	787b      	ldrb	r3, [r7, #1]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002abe:	887a      	ldrh	r2, [r7, #2]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ac4:	e002      	b.n	8002acc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ac6:	887a      	ldrh	r2, [r7, #2]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002aea:	887a      	ldrh	r2, [r7, #2]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4013      	ands	r3, r2
 8002af0:	041a      	lsls	r2, r3, #16
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	43d9      	mvns	r1, r3
 8002af6:	887b      	ldrh	r3, [r7, #2]
 8002af8:	400b      	ands	r3, r1
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	619a      	str	r2, [r3, #24]
}
 8002b00:	bf00      	nop
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b16:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b18:	695a      	ldr	r2, [r3, #20]
 8002b1a:	88fb      	ldrh	r3, [r7, #6]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d006      	beq.n	8002b30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b22:	4a05      	ldr	r2, [pc, #20]	; (8002b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b24:	88fb      	ldrh	r3, [r7, #6]
 8002b26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b28:	88fb      	ldrh	r3, [r7, #6]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 f806 	bl	8002b3c <HAL_GPIO_EXTI_Callback>
  }
}
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40010400 	.word	0x40010400

08002b3c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
	...

08002b54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	1d3b      	adds	r3, r7, #4
 8002b5e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b60:	1d3b      	adds	r3, r7, #4
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d102      	bne.n	8002b6e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	f000 bef4 	b.w	8003956 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b6e:	1d3b      	adds	r3, r7, #4
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 816a 	beq.w	8002e52 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b7e:	4bb3      	ldr	r3, [pc, #716]	; (8002e4c <HAL_RCC_OscConfig+0x2f8>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d00c      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b8a:	4bb0      	ldr	r3, [pc, #704]	; (8002e4c <HAL_RCC_OscConfig+0x2f8>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f003 030c 	and.w	r3, r3, #12
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d159      	bne.n	8002c4a <HAL_RCC_OscConfig+0xf6>
 8002b96:	4bad      	ldr	r3, [pc, #692]	; (8002e4c <HAL_RCC_OscConfig+0x2f8>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba2:	d152      	bne.n	8002c4a <HAL_RCC_OscConfig+0xf6>
 8002ba4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ba8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bac:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002bb0:	fa93 f3a3 	rbit	r3, r3
 8002bb4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bb8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bbc:	fab3 f383 	clz	r3, r3
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d102      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x82>
 8002bd0:	4b9e      	ldr	r3, [pc, #632]	; (8002e4c <HAL_RCC_OscConfig+0x2f8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	e015      	b.n	8002c02 <HAL_RCC_OscConfig+0xae>
 8002bd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bda:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002be2:	fa93 f3a3 	rbit	r3, r3
 8002be6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002bea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bee:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002bf2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002bfe:	4b93      	ldr	r3, [pc, #588]	; (8002e4c <HAL_RCC_OscConfig+0x2f8>)
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c06:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002c0a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002c0e:	fa92 f2a2 	rbit	r2, r2
 8002c12:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002c16:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002c1a:	fab2 f282 	clz	r2, r2
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	f042 0220 	orr.w	r2, r2, #32
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	f002 021f 	and.w	r2, r2, #31
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c30:	4013      	ands	r3, r2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 810c 	beq.w	8002e50 <HAL_RCC_OscConfig+0x2fc>
 8002c38:	1d3b      	adds	r3, r7, #4
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f040 8106 	bne.w	8002e50 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	f000 be86 	b.w	8003956 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c4a:	1d3b      	adds	r3, r7, #4
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c54:	d106      	bne.n	8002c64 <HAL_RCC_OscConfig+0x110>
 8002c56:	4b7d      	ldr	r3, [pc, #500]	; (8002e4c <HAL_RCC_OscConfig+0x2f8>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a7c      	ldr	r2, [pc, #496]	; (8002e4c <HAL_RCC_OscConfig+0x2f8>)
 8002c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	e030      	b.n	8002cc6 <HAL_RCC_OscConfig+0x172>
 8002c64:	1d3b      	adds	r3, r7, #4
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10c      	bne.n	8002c88 <HAL_RCC_OscConfig+0x134>
 8002c6e:	4b77      	ldr	r3, [pc, #476]	; (8002e4c <HAL_RCC_OscConfig+0x2f8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a76      	ldr	r2, [pc, #472]	; (8002e4c <HAL_RCC_OscConfig+0x2f8>)
 8002c74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	4b74      	ldr	r3, [pc, #464]	; (8002e4c <HAL_RCC_OscConfig+0x2f8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a73      	ldr	r2, [pc, #460]	; (8002e4c <HAL_RCC_OscConfig+0x2f8>)
 8002c80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	e01e      	b.n	8002cc6 <HAL_RCC_OscConfig+0x172>
 8002c88:	1d3b      	adds	r3, r7, #4
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c92:	d10c      	bne.n	8002cae <HAL_RCC_OscConfig+0x15a>
 8002c94:	4b6d      	ldr	r3, [pc, #436]	; (8002e4c <HAL_RCC_OscConfig+0x2f8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a6c      	ldr	r2, [pc, #432]	; (8002e4c <HAL_RCC_OscConfig+0x2f8>)
 8002c9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c9e:	6013      	str	r3, [r2, #0]
 8002ca0:	4b6a      	ldr	r3, [pc, #424]	; (8002e4c <HAL_RCC_OscConfig+0x2f8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a69      	ldr	r2, [pc, #420]	; (8002e4c <HAL_RCC_OscConfig+0x2f8>)
 8002ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002caa:	6013      	str	r3, [r2, #0]
 8002cac:	e00b      	b.n	8002cc6 <HAL_RCC_OscConfig+0x172>
 8002cae:	4b67      	ldr	r3, [pc, #412]	; (8002e4c <HAL_RCC_OscConfig+0x2f8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a66      	ldr	r2, [pc, #408]	; (8002e4c <HAL_RCC_OscConfig+0x2f8>)
 8002cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	4b64      	ldr	r3, [pc, #400]	; (8002e4c <HAL_RCC_OscConfig+0x2f8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a63      	ldr	r2, [pc, #396]	; (8002e4c <HAL_RCC_OscConfig+0x2f8>)
 8002cc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cc6:	4b61      	ldr	r3, [pc, #388]	; (8002e4c <HAL_RCC_OscConfig+0x2f8>)
 8002cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cca:	f023 020f 	bic.w	r2, r3, #15
 8002cce:	1d3b      	adds	r3, r7, #4
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	495d      	ldr	r1, [pc, #372]	; (8002e4c <HAL_RCC_OscConfig+0x2f8>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cda:	1d3b      	adds	r3, r7, #4
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d059      	beq.n	8002d98 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fb46 	bl	8001374 <HAL_GetTick>
 8002ce8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cec:	e00a      	b.n	8002d04 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cee:	f7fe fb41 	bl	8001374 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b64      	cmp	r3, #100	; 0x64
 8002cfc:	d902      	bls.n	8002d04 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	f000 be29 	b.w	8003956 <HAL_RCC_OscConfig+0xe02>
 8002d04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d08:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002d10:	fa93 f3a3 	rbit	r3, r3
 8002d14:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002d18:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d1c:	fab3 f383 	clz	r3, r3
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d102      	bne.n	8002d36 <HAL_RCC_OscConfig+0x1e2>
 8002d30:	4b46      	ldr	r3, [pc, #280]	; (8002e4c <HAL_RCC_OscConfig+0x2f8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	e015      	b.n	8002d62 <HAL_RCC_OscConfig+0x20e>
 8002d36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d3a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002d42:	fa93 f3a3 	rbit	r3, r3
 8002d46:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002d4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d4e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002d52:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002d56:	fa93 f3a3 	rbit	r3, r3
 8002d5a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002d5e:	4b3b      	ldr	r3, [pc, #236]	; (8002e4c <HAL_RCC_OscConfig+0x2f8>)
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d66:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002d6a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002d6e:	fa92 f2a2 	rbit	r2, r2
 8002d72:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002d76:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002d7a:	fab2 f282 	clz	r2, r2
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	f042 0220 	orr.w	r2, r2, #32
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	f002 021f 	and.w	r2, r2, #31
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0ab      	beq.n	8002cee <HAL_RCC_OscConfig+0x19a>
 8002d96:	e05c      	b.n	8002e52 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d98:	f7fe faec 	bl	8001374 <HAL_GetTick>
 8002d9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da0:	e00a      	b.n	8002db8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002da2:	f7fe fae7 	bl	8001374 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b64      	cmp	r3, #100	; 0x64
 8002db0:	d902      	bls.n	8002db8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	f000 bdcf 	b.w	8003956 <HAL_RCC_OscConfig+0xe02>
 8002db8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dbc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002dc4:	fa93 f3a3 	rbit	r3, r3
 8002dc8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002dcc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dd0:	fab3 f383 	clz	r3, r3
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	095b      	lsrs	r3, r3, #5
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	f043 0301 	orr.w	r3, r3, #1
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d102      	bne.n	8002dea <HAL_RCC_OscConfig+0x296>
 8002de4:	4b19      	ldr	r3, [pc, #100]	; (8002e4c <HAL_RCC_OscConfig+0x2f8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	e015      	b.n	8002e16 <HAL_RCC_OscConfig+0x2c2>
 8002dea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dee:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002df6:	fa93 f3a3 	rbit	r3, r3
 8002dfa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002dfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e02:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002e06:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002e0a:	fa93 f3a3 	rbit	r3, r3
 8002e0e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002e12:	4b0e      	ldr	r3, [pc, #56]	; (8002e4c <HAL_RCC_OscConfig+0x2f8>)
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e1a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002e1e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002e22:	fa92 f2a2 	rbit	r2, r2
 8002e26:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002e2a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002e2e:	fab2 f282 	clz	r2, r2
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	f042 0220 	orr.w	r2, r2, #32
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	f002 021f 	and.w	r2, r2, #31
 8002e3e:	2101      	movs	r1, #1
 8002e40:	fa01 f202 	lsl.w	r2, r1, r2
 8002e44:	4013      	ands	r3, r2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1ab      	bne.n	8002da2 <HAL_RCC_OscConfig+0x24e>
 8002e4a:	e002      	b.n	8002e52 <HAL_RCC_OscConfig+0x2fe>
 8002e4c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e52:	1d3b      	adds	r3, r7, #4
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 816f 	beq.w	8003140 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e62:	4bd0      	ldr	r3, [pc, #832]	; (80031a4 <HAL_RCC_OscConfig+0x650>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f003 030c 	and.w	r3, r3, #12
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00b      	beq.n	8002e86 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e6e:	4bcd      	ldr	r3, [pc, #820]	; (80031a4 <HAL_RCC_OscConfig+0x650>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f003 030c 	and.w	r3, r3, #12
 8002e76:	2b08      	cmp	r3, #8
 8002e78:	d16c      	bne.n	8002f54 <HAL_RCC_OscConfig+0x400>
 8002e7a:	4bca      	ldr	r3, [pc, #808]	; (80031a4 <HAL_RCC_OscConfig+0x650>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d166      	bne.n	8002f54 <HAL_RCC_OscConfig+0x400>
 8002e86:	2302      	movs	r3, #2
 8002e88:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002e90:	fa93 f3a3 	rbit	r3, r3
 8002e94:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002e98:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e9c:	fab3 f383 	clz	r3, r3
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	095b      	lsrs	r3, r3, #5
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d102      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x362>
 8002eb0:	4bbc      	ldr	r3, [pc, #752]	; (80031a4 <HAL_RCC_OscConfig+0x650>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	e013      	b.n	8002ede <HAL_RCC_OscConfig+0x38a>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002ec0:	fa93 f3a3 	rbit	r3, r3
 8002ec4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002ec8:	2302      	movs	r3, #2
 8002eca:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002ece:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ed2:	fa93 f3a3 	rbit	r3, r3
 8002ed6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002eda:	4bb2      	ldr	r3, [pc, #712]	; (80031a4 <HAL_RCC_OscConfig+0x650>)
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	2202      	movs	r2, #2
 8002ee0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002ee4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002ee8:	fa92 f2a2 	rbit	r2, r2
 8002eec:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002ef0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002ef4:	fab2 f282 	clz	r2, r2
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	f042 0220 	orr.w	r2, r2, #32
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	f002 021f 	and.w	r2, r2, #31
 8002f04:	2101      	movs	r1, #1
 8002f06:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d007      	beq.n	8002f20 <HAL_RCC_OscConfig+0x3cc>
 8002f10:	1d3b      	adds	r3, r7, #4
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d002      	beq.n	8002f20 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	f000 bd1b 	b.w	8003956 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f20:	4ba0      	ldr	r3, [pc, #640]	; (80031a4 <HAL_RCC_OscConfig+0x650>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f28:	1d3b      	adds	r3, r7, #4
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	21f8      	movs	r1, #248	; 0xf8
 8002f30:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f34:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002f38:	fa91 f1a1 	rbit	r1, r1
 8002f3c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002f40:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002f44:	fab1 f181 	clz	r1, r1
 8002f48:	b2c9      	uxtb	r1, r1
 8002f4a:	408b      	lsls	r3, r1
 8002f4c:	4995      	ldr	r1, [pc, #596]	; (80031a4 <HAL_RCC_OscConfig+0x650>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f52:	e0f5      	b.n	8003140 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f54:	1d3b      	adds	r3, r7, #4
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 8085 	beq.w	800306a <HAL_RCC_OscConfig+0x516>
 8002f60:	2301      	movs	r3, #1
 8002f62:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f66:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002f72:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f76:	fab3 f383 	clz	r3, r3
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	461a      	mov	r2, r3
 8002f88:	2301      	movs	r3, #1
 8002f8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8c:	f7fe f9f2 	bl	8001374 <HAL_GetTick>
 8002f90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f94:	e00a      	b.n	8002fac <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f96:	f7fe f9ed 	bl	8001374 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d902      	bls.n	8002fac <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	f000 bcd5 	b.w	8003956 <HAL_RCC_OscConfig+0xe02>
 8002fac:	2302      	movs	r3, #2
 8002fae:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002fbe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc2:	fab3 f383 	clz	r3, r3
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	095b      	lsrs	r3, r3, #5
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d102      	bne.n	8002fdc <HAL_RCC_OscConfig+0x488>
 8002fd6:	4b73      	ldr	r3, [pc, #460]	; (80031a4 <HAL_RCC_OscConfig+0x650>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	e013      	b.n	8003004 <HAL_RCC_OscConfig+0x4b0>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002fe6:	fa93 f3a3 	rbit	r3, r3
 8002fea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002fee:	2302      	movs	r3, #2
 8002ff0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002ff4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002ff8:	fa93 f3a3 	rbit	r3, r3
 8002ffc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003000:	4b68      	ldr	r3, [pc, #416]	; (80031a4 <HAL_RCC_OscConfig+0x650>)
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	2202      	movs	r2, #2
 8003006:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800300a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800300e:	fa92 f2a2 	rbit	r2, r2
 8003012:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003016:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800301a:	fab2 f282 	clz	r2, r2
 800301e:	b2d2      	uxtb	r2, r2
 8003020:	f042 0220 	orr.w	r2, r2, #32
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	f002 021f 	and.w	r2, r2, #31
 800302a:	2101      	movs	r1, #1
 800302c:	fa01 f202 	lsl.w	r2, r1, r2
 8003030:	4013      	ands	r3, r2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0af      	beq.n	8002f96 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003036:	4b5b      	ldr	r3, [pc, #364]	; (80031a4 <HAL_RCC_OscConfig+0x650>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800303e:	1d3b      	adds	r3, r7, #4
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	21f8      	movs	r1, #248	; 0xf8
 8003046:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800304e:	fa91 f1a1 	rbit	r1, r1
 8003052:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003056:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800305a:	fab1 f181 	clz	r1, r1
 800305e:	b2c9      	uxtb	r1, r1
 8003060:	408b      	lsls	r3, r1
 8003062:	4950      	ldr	r1, [pc, #320]	; (80031a4 <HAL_RCC_OscConfig+0x650>)
 8003064:	4313      	orrs	r3, r2
 8003066:	600b      	str	r3, [r1, #0]
 8003068:	e06a      	b.n	8003140 <HAL_RCC_OscConfig+0x5ec>
 800306a:	2301      	movs	r3, #1
 800306c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003070:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003074:	fa93 f3a3 	rbit	r3, r3
 8003078:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800307c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003080:	fab3 f383 	clz	r3, r3
 8003084:	b2db      	uxtb	r3, r3
 8003086:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800308a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	461a      	mov	r2, r3
 8003092:	2300      	movs	r3, #0
 8003094:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003096:	f7fe f96d 	bl	8001374 <HAL_GetTick>
 800309a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309e:	e00a      	b.n	80030b6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030a0:	f7fe f968 	bl	8001374 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d902      	bls.n	80030b6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	f000 bc50 	b.w	8003956 <HAL_RCC_OscConfig+0xe02>
 80030b6:	2302      	movs	r3, #2
 80030b8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80030c0:	fa93 f3a3 	rbit	r3, r3
 80030c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80030c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030cc:	fab3 f383 	clz	r3, r3
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	f043 0301 	orr.w	r3, r3, #1
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d102      	bne.n	80030e6 <HAL_RCC_OscConfig+0x592>
 80030e0:	4b30      	ldr	r3, [pc, #192]	; (80031a4 <HAL_RCC_OscConfig+0x650>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	e013      	b.n	800310e <HAL_RCC_OscConfig+0x5ba>
 80030e6:	2302      	movs	r3, #2
 80030e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80030f0:	fa93 f3a3 	rbit	r3, r3
 80030f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80030f8:	2302      	movs	r3, #2
 80030fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80030fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003102:	fa93 f3a3 	rbit	r3, r3
 8003106:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800310a:	4b26      	ldr	r3, [pc, #152]	; (80031a4 <HAL_RCC_OscConfig+0x650>)
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	2202      	movs	r2, #2
 8003110:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003114:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003118:	fa92 f2a2 	rbit	r2, r2
 800311c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003120:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003124:	fab2 f282 	clz	r2, r2
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	f042 0220 	orr.w	r2, r2, #32
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	f002 021f 	and.w	r2, r2, #31
 8003134:	2101      	movs	r1, #1
 8003136:	fa01 f202 	lsl.w	r2, r1, r2
 800313a:	4013      	ands	r3, r2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1af      	bne.n	80030a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003140:	1d3b      	adds	r3, r7, #4
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0308 	and.w	r3, r3, #8
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 80da 	beq.w	8003304 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003150:	1d3b      	adds	r3, r7, #4
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d069      	beq.n	800322e <HAL_RCC_OscConfig+0x6da>
 800315a:	2301      	movs	r3, #1
 800315c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003160:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003164:	fa93 f3a3 	rbit	r3, r3
 8003168:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800316c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003170:	fab3 f383 	clz	r3, r3
 8003174:	b2db      	uxtb	r3, r3
 8003176:	461a      	mov	r2, r3
 8003178:	4b0b      	ldr	r3, [pc, #44]	; (80031a8 <HAL_RCC_OscConfig+0x654>)
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	461a      	mov	r2, r3
 8003180:	2301      	movs	r3, #1
 8003182:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003184:	f7fe f8f6 	bl	8001374 <HAL_GetTick>
 8003188:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318c:	e00e      	b.n	80031ac <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800318e:	f7fe f8f1 	bl	8001374 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d906      	bls.n	80031ac <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e3d9      	b.n	8003956 <HAL_RCC_OscConfig+0xe02>
 80031a2:	bf00      	nop
 80031a4:	40021000 	.word	0x40021000
 80031a8:	10908120 	.word	0x10908120
 80031ac:	2302      	movs	r3, #2
 80031ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80031b6:	fa93 f3a3 	rbit	r3, r3
 80031ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80031be:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80031c2:	2202      	movs	r2, #2
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	fa93 f2a3 	rbit	r2, r3
 80031d0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80031da:	2202      	movs	r2, #2
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	fa93 f2a3 	rbit	r2, r3
 80031e8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80031ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ee:	4ba5      	ldr	r3, [pc, #660]	; (8003484 <HAL_RCC_OscConfig+0x930>)
 80031f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031f2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80031f6:	2102      	movs	r1, #2
 80031f8:	6019      	str	r1, [r3, #0]
 80031fa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	fa93 f1a3 	rbit	r1, r3
 8003204:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003208:	6019      	str	r1, [r3, #0]
  return result;
 800320a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	fab3 f383 	clz	r3, r3
 8003214:	b2db      	uxtb	r3, r3
 8003216:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800321a:	b2db      	uxtb	r3, r3
 800321c:	f003 031f 	and.w	r3, r3, #31
 8003220:	2101      	movs	r1, #1
 8003222:	fa01 f303 	lsl.w	r3, r1, r3
 8003226:	4013      	ands	r3, r2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0b0      	beq.n	800318e <HAL_RCC_OscConfig+0x63a>
 800322c:	e06a      	b.n	8003304 <HAL_RCC_OscConfig+0x7b0>
 800322e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003232:	2201      	movs	r2, #1
 8003234:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003236:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	fa93 f2a3 	rbit	r2, r3
 8003240:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003244:	601a      	str	r2, [r3, #0]
  return result;
 8003246:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800324a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800324c:	fab3 f383 	clz	r3, r3
 8003250:	b2db      	uxtb	r3, r3
 8003252:	461a      	mov	r2, r3
 8003254:	4b8c      	ldr	r3, [pc, #560]	; (8003488 <HAL_RCC_OscConfig+0x934>)
 8003256:	4413      	add	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	461a      	mov	r2, r3
 800325c:	2300      	movs	r3, #0
 800325e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003260:	f7fe f888 	bl	8001374 <HAL_GetTick>
 8003264:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003268:	e009      	b.n	800327e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800326a:	f7fe f883 	bl	8001374 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e36b      	b.n	8003956 <HAL_RCC_OscConfig+0xe02>
 800327e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003282:	2202      	movs	r2, #2
 8003284:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	fa93 f2a3 	rbit	r2, r3
 8003290:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800329a:	2202      	movs	r2, #2
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	fa93 f2a3 	rbit	r2, r3
 80032a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80032b2:	2202      	movs	r2, #2
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	fa93 f2a3 	rbit	r2, r3
 80032c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80032c4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c6:	4b6f      	ldr	r3, [pc, #444]	; (8003484 <HAL_RCC_OscConfig+0x930>)
 80032c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032ca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80032ce:	2102      	movs	r1, #2
 80032d0:	6019      	str	r1, [r3, #0]
 80032d2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	fa93 f1a3 	rbit	r1, r3
 80032dc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80032e0:	6019      	str	r1, [r3, #0]
  return result;
 80032e2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	fab3 f383 	clz	r3, r3
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	2101      	movs	r1, #1
 80032fa:	fa01 f303 	lsl.w	r3, r1, r3
 80032fe:	4013      	ands	r3, r2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1b2      	bne.n	800326a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003304:	1d3b      	adds	r3, r7, #4
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0304 	and.w	r3, r3, #4
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 8158 	beq.w	80035c4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003314:	2300      	movs	r3, #0
 8003316:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800331a:	4b5a      	ldr	r3, [pc, #360]	; (8003484 <HAL_RCC_OscConfig+0x930>)
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d112      	bne.n	800334c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003326:	4b57      	ldr	r3, [pc, #348]	; (8003484 <HAL_RCC_OscConfig+0x930>)
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	4a56      	ldr	r2, [pc, #344]	; (8003484 <HAL_RCC_OscConfig+0x930>)
 800332c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003330:	61d3      	str	r3, [r2, #28]
 8003332:	4b54      	ldr	r3, [pc, #336]	; (8003484 <HAL_RCC_OscConfig+0x930>)
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800333a:	f107 0308 	add.w	r3, r7, #8
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	f107 0308 	add.w	r3, r7, #8
 8003344:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003346:	2301      	movs	r3, #1
 8003348:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334c:	4b4f      	ldr	r3, [pc, #316]	; (800348c <HAL_RCC_OscConfig+0x938>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003354:	2b00      	cmp	r3, #0
 8003356:	d11a      	bne.n	800338e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003358:	4b4c      	ldr	r3, [pc, #304]	; (800348c <HAL_RCC_OscConfig+0x938>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a4b      	ldr	r2, [pc, #300]	; (800348c <HAL_RCC_OscConfig+0x938>)
 800335e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003362:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003364:	f7fe f806 	bl	8001374 <HAL_GetTick>
 8003368:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336c:	e009      	b.n	8003382 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800336e:	f7fe f801 	bl	8001374 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b64      	cmp	r3, #100	; 0x64
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e2e9      	b.n	8003956 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003382:	4b42      	ldr	r3, [pc, #264]	; (800348c <HAL_RCC_OscConfig+0x938>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0ef      	beq.n	800336e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800338e:	1d3b      	adds	r3, r7, #4
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d106      	bne.n	80033a6 <HAL_RCC_OscConfig+0x852>
 8003398:	4b3a      	ldr	r3, [pc, #232]	; (8003484 <HAL_RCC_OscConfig+0x930>)
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	4a39      	ldr	r2, [pc, #228]	; (8003484 <HAL_RCC_OscConfig+0x930>)
 800339e:	f043 0301 	orr.w	r3, r3, #1
 80033a2:	6213      	str	r3, [r2, #32]
 80033a4:	e02f      	b.n	8003406 <HAL_RCC_OscConfig+0x8b2>
 80033a6:	1d3b      	adds	r3, r7, #4
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10c      	bne.n	80033ca <HAL_RCC_OscConfig+0x876>
 80033b0:	4b34      	ldr	r3, [pc, #208]	; (8003484 <HAL_RCC_OscConfig+0x930>)
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	4a33      	ldr	r2, [pc, #204]	; (8003484 <HAL_RCC_OscConfig+0x930>)
 80033b6:	f023 0301 	bic.w	r3, r3, #1
 80033ba:	6213      	str	r3, [r2, #32]
 80033bc:	4b31      	ldr	r3, [pc, #196]	; (8003484 <HAL_RCC_OscConfig+0x930>)
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	4a30      	ldr	r2, [pc, #192]	; (8003484 <HAL_RCC_OscConfig+0x930>)
 80033c2:	f023 0304 	bic.w	r3, r3, #4
 80033c6:	6213      	str	r3, [r2, #32]
 80033c8:	e01d      	b.n	8003406 <HAL_RCC_OscConfig+0x8b2>
 80033ca:	1d3b      	adds	r3, r7, #4
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	2b05      	cmp	r3, #5
 80033d2:	d10c      	bne.n	80033ee <HAL_RCC_OscConfig+0x89a>
 80033d4:	4b2b      	ldr	r3, [pc, #172]	; (8003484 <HAL_RCC_OscConfig+0x930>)
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	4a2a      	ldr	r2, [pc, #168]	; (8003484 <HAL_RCC_OscConfig+0x930>)
 80033da:	f043 0304 	orr.w	r3, r3, #4
 80033de:	6213      	str	r3, [r2, #32]
 80033e0:	4b28      	ldr	r3, [pc, #160]	; (8003484 <HAL_RCC_OscConfig+0x930>)
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	4a27      	ldr	r2, [pc, #156]	; (8003484 <HAL_RCC_OscConfig+0x930>)
 80033e6:	f043 0301 	orr.w	r3, r3, #1
 80033ea:	6213      	str	r3, [r2, #32]
 80033ec:	e00b      	b.n	8003406 <HAL_RCC_OscConfig+0x8b2>
 80033ee:	4b25      	ldr	r3, [pc, #148]	; (8003484 <HAL_RCC_OscConfig+0x930>)
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	4a24      	ldr	r2, [pc, #144]	; (8003484 <HAL_RCC_OscConfig+0x930>)
 80033f4:	f023 0301 	bic.w	r3, r3, #1
 80033f8:	6213      	str	r3, [r2, #32]
 80033fa:	4b22      	ldr	r3, [pc, #136]	; (8003484 <HAL_RCC_OscConfig+0x930>)
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	4a21      	ldr	r2, [pc, #132]	; (8003484 <HAL_RCC_OscConfig+0x930>)
 8003400:	f023 0304 	bic.w	r3, r3, #4
 8003404:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003406:	1d3b      	adds	r3, r7, #4
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d06b      	beq.n	80034e8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003410:	f7fd ffb0 	bl	8001374 <HAL_GetTick>
 8003414:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003418:	e00b      	b.n	8003432 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800341a:	f7fd ffab 	bl	8001374 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	f241 3288 	movw	r2, #5000	; 0x1388
 800342a:	4293      	cmp	r3, r2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e291      	b.n	8003956 <HAL_RCC_OscConfig+0xe02>
 8003432:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003436:	2202      	movs	r2, #2
 8003438:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	fa93 f2a3 	rbit	r2, r3
 8003444:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800344e:	2202      	movs	r2, #2
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	fa93 f2a3 	rbit	r2, r3
 800345c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003460:	601a      	str	r2, [r3, #0]
  return result;
 8003462:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003466:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003468:	fab3 f383 	clz	r3, r3
 800346c:	b2db      	uxtb	r3, r3
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	b2db      	uxtb	r3, r3
 8003472:	f043 0302 	orr.w	r3, r3, #2
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d109      	bne.n	8003490 <HAL_RCC_OscConfig+0x93c>
 800347c:	4b01      	ldr	r3, [pc, #4]	; (8003484 <HAL_RCC_OscConfig+0x930>)
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	e014      	b.n	80034ac <HAL_RCC_OscConfig+0x958>
 8003482:	bf00      	nop
 8003484:	40021000 	.word	0x40021000
 8003488:	10908120 	.word	0x10908120
 800348c:	40007000 	.word	0x40007000
 8003490:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003494:	2202      	movs	r2, #2
 8003496:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003498:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	fa93 f2a3 	rbit	r2, r3
 80034a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	4bbb      	ldr	r3, [pc, #748]	; (8003798 <HAL_RCC_OscConfig+0xc44>)
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80034b0:	2102      	movs	r1, #2
 80034b2:	6011      	str	r1, [r2, #0]
 80034b4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80034b8:	6812      	ldr	r2, [r2, #0]
 80034ba:	fa92 f1a2 	rbit	r1, r2
 80034be:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80034c2:	6011      	str	r1, [r2, #0]
  return result;
 80034c4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80034c8:	6812      	ldr	r2, [r2, #0]
 80034ca:	fab2 f282 	clz	r2, r2
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	f002 021f 	and.w	r2, r2, #31
 80034da:	2101      	movs	r1, #1
 80034dc:	fa01 f202 	lsl.w	r2, r1, r2
 80034e0:	4013      	ands	r3, r2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d099      	beq.n	800341a <HAL_RCC_OscConfig+0x8c6>
 80034e6:	e063      	b.n	80035b0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e8:	f7fd ff44 	bl	8001374 <HAL_GetTick>
 80034ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034f0:	e00b      	b.n	800350a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034f2:	f7fd ff3f 	bl	8001374 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003502:	4293      	cmp	r3, r2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e225      	b.n	8003956 <HAL_RCC_OscConfig+0xe02>
 800350a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800350e:	2202      	movs	r2, #2
 8003510:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003512:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	fa93 f2a3 	rbit	r2, r3
 800351c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003526:	2202      	movs	r2, #2
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	fa93 f2a3 	rbit	r2, r3
 8003534:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003538:	601a      	str	r2, [r3, #0]
  return result;
 800353a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800353e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003540:	fab3 f383 	clz	r3, r3
 8003544:	b2db      	uxtb	r3, r3
 8003546:	095b      	lsrs	r3, r3, #5
 8003548:	b2db      	uxtb	r3, r3
 800354a:	f043 0302 	orr.w	r3, r3, #2
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d102      	bne.n	800355a <HAL_RCC_OscConfig+0xa06>
 8003554:	4b90      	ldr	r3, [pc, #576]	; (8003798 <HAL_RCC_OscConfig+0xc44>)
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	e00d      	b.n	8003576 <HAL_RCC_OscConfig+0xa22>
 800355a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800355e:	2202      	movs	r2, #2
 8003560:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003562:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	fa93 f2a3 	rbit	r2, r3
 800356c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	4b89      	ldr	r3, [pc, #548]	; (8003798 <HAL_RCC_OscConfig+0xc44>)
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800357a:	2102      	movs	r1, #2
 800357c:	6011      	str	r1, [r2, #0]
 800357e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003582:	6812      	ldr	r2, [r2, #0]
 8003584:	fa92 f1a2 	rbit	r1, r2
 8003588:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800358c:	6011      	str	r1, [r2, #0]
  return result;
 800358e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003592:	6812      	ldr	r2, [r2, #0]
 8003594:	fab2 f282 	clz	r2, r2
 8003598:	b2d2      	uxtb	r2, r2
 800359a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	f002 021f 	and.w	r2, r2, #31
 80035a4:	2101      	movs	r1, #1
 80035a6:	fa01 f202 	lsl.w	r2, r1, r2
 80035aa:	4013      	ands	r3, r2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1a0      	bne.n	80034f2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035b0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d105      	bne.n	80035c4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b8:	4b77      	ldr	r3, [pc, #476]	; (8003798 <HAL_RCC_OscConfig+0xc44>)
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	4a76      	ldr	r2, [pc, #472]	; (8003798 <HAL_RCC_OscConfig+0xc44>)
 80035be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035c2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035c4:	1d3b      	adds	r3, r7, #4
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 81c2 	beq.w	8003954 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035d0:	4b71      	ldr	r3, [pc, #452]	; (8003798 <HAL_RCC_OscConfig+0xc44>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 030c 	and.w	r3, r3, #12
 80035d8:	2b08      	cmp	r3, #8
 80035da:	f000 819c 	beq.w	8003916 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035de:	1d3b      	adds	r3, r7, #4
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	f040 8114 	bne.w	8003812 <HAL_RCC_OscConfig+0xcbe>
 80035ea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80035ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	fa93 f2a3 	rbit	r2, r3
 80035fe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003602:	601a      	str	r2, [r3, #0]
  return result;
 8003604:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003608:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360a:	fab3 f383 	clz	r3, r3
 800360e:	b2db      	uxtb	r3, r3
 8003610:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003614:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	461a      	mov	r2, r3
 800361c:	2300      	movs	r3, #0
 800361e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003620:	f7fd fea8 	bl	8001374 <HAL_GetTick>
 8003624:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003628:	e009      	b.n	800363e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800362a:	f7fd fea3 	bl	8001374 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e18b      	b.n	8003956 <HAL_RCC_OscConfig+0xe02>
 800363e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003642:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003646:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003648:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	fa93 f2a3 	rbit	r2, r3
 8003652:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003656:	601a      	str	r2, [r3, #0]
  return result;
 8003658:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800365c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800365e:	fab3 f383 	clz	r3, r3
 8003662:	b2db      	uxtb	r3, r3
 8003664:	095b      	lsrs	r3, r3, #5
 8003666:	b2db      	uxtb	r3, r3
 8003668:	f043 0301 	orr.w	r3, r3, #1
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b01      	cmp	r3, #1
 8003670:	d102      	bne.n	8003678 <HAL_RCC_OscConfig+0xb24>
 8003672:	4b49      	ldr	r3, [pc, #292]	; (8003798 <HAL_RCC_OscConfig+0xc44>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	e01b      	b.n	80036b0 <HAL_RCC_OscConfig+0xb5c>
 8003678:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800367c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003680:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003682:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	fa93 f2a3 	rbit	r2, r3
 800368c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003696:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	fa93 f2a3 	rbit	r2, r3
 80036a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	4b3a      	ldr	r3, [pc, #232]	; (8003798 <HAL_RCC_OscConfig+0xc44>)
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80036b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036b8:	6011      	str	r1, [r2, #0]
 80036ba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80036be:	6812      	ldr	r2, [r2, #0]
 80036c0:	fa92 f1a2 	rbit	r1, r2
 80036c4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80036c8:	6011      	str	r1, [r2, #0]
  return result;
 80036ca:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80036ce:	6812      	ldr	r2, [r2, #0]
 80036d0:	fab2 f282 	clz	r2, r2
 80036d4:	b2d2      	uxtb	r2, r2
 80036d6:	f042 0220 	orr.w	r2, r2, #32
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	f002 021f 	and.w	r2, r2, #31
 80036e0:	2101      	movs	r1, #1
 80036e2:	fa01 f202 	lsl.w	r2, r1, r2
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d19e      	bne.n	800362a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036ec:	4b2a      	ldr	r3, [pc, #168]	; (8003798 <HAL_RCC_OscConfig+0xc44>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036f4:	1d3b      	adds	r3, r7, #4
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80036fa:	1d3b      	adds	r3, r7, #4
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	430b      	orrs	r3, r1
 8003702:	4925      	ldr	r1, [pc, #148]	; (8003798 <HAL_RCC_OscConfig+0xc44>)
 8003704:	4313      	orrs	r3, r2
 8003706:	604b      	str	r3, [r1, #4]
 8003708:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800370c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003710:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003712:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	fa93 f2a3 	rbit	r2, r3
 800371c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003720:	601a      	str	r2, [r3, #0]
  return result;
 8003722:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003726:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003728:	fab3 f383 	clz	r3, r3
 800372c:	b2db      	uxtb	r3, r3
 800372e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003732:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	461a      	mov	r2, r3
 800373a:	2301      	movs	r3, #1
 800373c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373e:	f7fd fe19 	bl	8001374 <HAL_GetTick>
 8003742:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003746:	e009      	b.n	800375c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003748:	f7fd fe14 	bl	8001374 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e0fc      	b.n	8003956 <HAL_RCC_OscConfig+0xe02>
 800375c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003760:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003764:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003766:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	fa93 f2a3 	rbit	r2, r3
 8003770:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003774:	601a      	str	r2, [r3, #0]
  return result;
 8003776:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800377a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800377c:	fab3 f383 	clz	r3, r3
 8003780:	b2db      	uxtb	r3, r3
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	b2db      	uxtb	r3, r3
 8003786:	f043 0301 	orr.w	r3, r3, #1
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b01      	cmp	r3, #1
 800378e:	d105      	bne.n	800379c <HAL_RCC_OscConfig+0xc48>
 8003790:	4b01      	ldr	r3, [pc, #4]	; (8003798 <HAL_RCC_OscConfig+0xc44>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	e01e      	b.n	80037d4 <HAL_RCC_OscConfig+0xc80>
 8003796:	bf00      	nop
 8003798:	40021000 	.word	0x40021000
 800379c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	fa93 f2a3 	rbit	r2, r3
 80037b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	fa93 f2a3 	rbit	r2, r3
 80037ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	4b63      	ldr	r3, [pc, #396]	; (8003960 <HAL_RCC_OscConfig+0xe0c>)
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80037d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80037dc:	6011      	str	r1, [r2, #0]
 80037de:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80037e2:	6812      	ldr	r2, [r2, #0]
 80037e4:	fa92 f1a2 	rbit	r1, r2
 80037e8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80037ec:	6011      	str	r1, [r2, #0]
  return result;
 80037ee:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80037f2:	6812      	ldr	r2, [r2, #0]
 80037f4:	fab2 f282 	clz	r2, r2
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	f042 0220 	orr.w	r2, r2, #32
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	f002 021f 	and.w	r2, r2, #31
 8003804:	2101      	movs	r1, #1
 8003806:	fa01 f202 	lsl.w	r2, r1, r2
 800380a:	4013      	ands	r3, r2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d09b      	beq.n	8003748 <HAL_RCC_OscConfig+0xbf4>
 8003810:	e0a0      	b.n	8003954 <HAL_RCC_OscConfig+0xe00>
 8003812:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003816:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800381a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	fa93 f2a3 	rbit	r2, r3
 8003826:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800382a:	601a      	str	r2, [r3, #0]
  return result;
 800382c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003830:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003832:	fab3 f383 	clz	r3, r3
 8003836:	b2db      	uxtb	r3, r3
 8003838:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800383c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	461a      	mov	r2, r3
 8003844:	2300      	movs	r3, #0
 8003846:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003848:	f7fd fd94 	bl	8001374 <HAL_GetTick>
 800384c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003850:	e009      	b.n	8003866 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003852:	f7fd fd8f 	bl	8001374 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e077      	b.n	8003956 <HAL_RCC_OscConfig+0xe02>
 8003866:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800386a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800386e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003870:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	fa93 f2a3 	rbit	r2, r3
 800387a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800387e:	601a      	str	r2, [r3, #0]
  return result;
 8003880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003884:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003886:	fab3 f383 	clz	r3, r3
 800388a:	b2db      	uxtb	r3, r3
 800388c:	095b      	lsrs	r3, r3, #5
 800388e:	b2db      	uxtb	r3, r3
 8003890:	f043 0301 	orr.w	r3, r3, #1
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b01      	cmp	r3, #1
 8003898:	d102      	bne.n	80038a0 <HAL_RCC_OscConfig+0xd4c>
 800389a:	4b31      	ldr	r3, [pc, #196]	; (8003960 <HAL_RCC_OscConfig+0xe0c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	e01b      	b.n	80038d8 <HAL_RCC_OscConfig+0xd84>
 80038a0:	f107 0320 	add.w	r3, r7, #32
 80038a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038aa:	f107 0320 	add.w	r3, r7, #32
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	fa93 f2a3 	rbit	r2, r3
 80038b4:	f107 031c 	add.w	r3, r7, #28
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	f107 0318 	add.w	r3, r7, #24
 80038be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	f107 0318 	add.w	r3, r7, #24
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	fa93 f2a3 	rbit	r2, r3
 80038ce:	f107 0314 	add.w	r3, r7, #20
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	4b22      	ldr	r3, [pc, #136]	; (8003960 <HAL_RCC_OscConfig+0xe0c>)
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	f107 0210 	add.w	r2, r7, #16
 80038dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80038e0:	6011      	str	r1, [r2, #0]
 80038e2:	f107 0210 	add.w	r2, r7, #16
 80038e6:	6812      	ldr	r2, [r2, #0]
 80038e8:	fa92 f1a2 	rbit	r1, r2
 80038ec:	f107 020c 	add.w	r2, r7, #12
 80038f0:	6011      	str	r1, [r2, #0]
  return result;
 80038f2:	f107 020c 	add.w	r2, r7, #12
 80038f6:	6812      	ldr	r2, [r2, #0]
 80038f8:	fab2 f282 	clz	r2, r2
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	f042 0220 	orr.w	r2, r2, #32
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	f002 021f 	and.w	r2, r2, #31
 8003908:	2101      	movs	r1, #1
 800390a:	fa01 f202 	lsl.w	r2, r1, r2
 800390e:	4013      	ands	r3, r2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d19e      	bne.n	8003852 <HAL_RCC_OscConfig+0xcfe>
 8003914:	e01e      	b.n	8003954 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003916:	1d3b      	adds	r3, r7, #4
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e018      	b.n	8003956 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003924:	4b0e      	ldr	r3, [pc, #56]	; (8003960 <HAL_RCC_OscConfig+0xe0c>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800392c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003930:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003934:	1d3b      	adds	r3, r7, #4
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	429a      	cmp	r2, r3
 800393c:	d108      	bne.n	8003950 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800393e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003942:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003946:	1d3b      	adds	r3, r7, #4
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800394c:	429a      	cmp	r2, r3
 800394e:	d001      	beq.n	8003954 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e000      	b.n	8003956 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40021000 	.word	0x40021000

08003964 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b09e      	sub	sp, #120	; 0x78
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800396e:	2300      	movs	r3, #0
 8003970:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e162      	b.n	8003c42 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800397c:	4b90      	ldr	r3, [pc, #576]	; (8003bc0 <HAL_RCC_ClockConfig+0x25c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	d910      	bls.n	80039ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398a:	4b8d      	ldr	r3, [pc, #564]	; (8003bc0 <HAL_RCC_ClockConfig+0x25c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f023 0207 	bic.w	r2, r3, #7
 8003992:	498b      	ldr	r1, [pc, #556]	; (8003bc0 <HAL_RCC_ClockConfig+0x25c>)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	4313      	orrs	r3, r2
 8003998:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800399a:	4b89      	ldr	r3, [pc, #548]	; (8003bc0 <HAL_RCC_ClockConfig+0x25c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d001      	beq.n	80039ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e14a      	b.n	8003c42 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d008      	beq.n	80039ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039b8:	4b82      	ldr	r3, [pc, #520]	; (8003bc4 <HAL_RCC_ClockConfig+0x260>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	497f      	ldr	r1, [pc, #508]	; (8003bc4 <HAL_RCC_ClockConfig+0x260>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 80dc 	beq.w	8003b90 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d13c      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xf6>
 80039e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039e8:	fa93 f3a3 	rbit	r3, r3
 80039ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80039ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039f0:	fab3 f383 	clz	r3, r3
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	095b      	lsrs	r3, r3, #5
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	f043 0301 	orr.w	r3, r3, #1
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d102      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xa6>
 8003a04:	4b6f      	ldr	r3, [pc, #444]	; (8003bc4 <HAL_RCC_ClockConfig+0x260>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	e00f      	b.n	8003a2a <HAL_RCC_ClockConfig+0xc6>
 8003a0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a0e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a12:	fa93 f3a3 	rbit	r3, r3
 8003a16:	667b      	str	r3, [r7, #100]	; 0x64
 8003a18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a1c:	663b      	str	r3, [r7, #96]	; 0x60
 8003a1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a20:	fa93 f3a3 	rbit	r3, r3
 8003a24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a26:	4b67      	ldr	r3, [pc, #412]	; (8003bc4 <HAL_RCC_ClockConfig+0x260>)
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a2e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a32:	fa92 f2a2 	rbit	r2, r2
 8003a36:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003a38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a3a:	fab2 f282 	clz	r2, r2
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	f042 0220 	orr.w	r2, r2, #32
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	f002 021f 	and.w	r2, r2, #31
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a50:	4013      	ands	r3, r2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d17b      	bne.n	8003b4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e0f3      	b.n	8003c42 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d13c      	bne.n	8003adc <HAL_RCC_ClockConfig+0x178>
 8003a62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a66:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a6a:	fa93 f3a3 	rbit	r3, r3
 8003a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a72:	fab3 f383 	clz	r3, r3
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	095b      	lsrs	r3, r3, #5
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d102      	bne.n	8003a8c <HAL_RCC_ClockConfig+0x128>
 8003a86:	4b4f      	ldr	r3, [pc, #316]	; (8003bc4 <HAL_RCC_ClockConfig+0x260>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	e00f      	b.n	8003aac <HAL_RCC_ClockConfig+0x148>
 8003a8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a90:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a94:	fa93 f3a3 	rbit	r3, r3
 8003a98:	647b      	str	r3, [r7, #68]	; 0x44
 8003a9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a9e:	643b      	str	r3, [r7, #64]	; 0x40
 8003aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aa2:	fa93 f3a3 	rbit	r3, r3
 8003aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aa8:	4b46      	ldr	r3, [pc, #280]	; (8003bc4 <HAL_RCC_ClockConfig+0x260>)
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ab0:	63ba      	str	r2, [r7, #56]	; 0x38
 8003ab2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ab4:	fa92 f2a2 	rbit	r2, r2
 8003ab8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003aba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003abc:	fab2 f282 	clz	r2, r2
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	f042 0220 	orr.w	r2, r2, #32
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	f002 021f 	and.w	r2, r2, #31
 8003acc:	2101      	movs	r1, #1
 8003ace:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d13a      	bne.n	8003b4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e0b2      	b.n	8003c42 <HAL_RCC_ClockConfig+0x2de>
 8003adc:	2302      	movs	r3, #2
 8003ade:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae2:	fa93 f3a3 	rbit	r3, r3
 8003ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aea:	fab3 f383 	clz	r3, r3
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	095b      	lsrs	r3, r3, #5
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	f043 0301 	orr.w	r3, r3, #1
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d102      	bne.n	8003b04 <HAL_RCC_ClockConfig+0x1a0>
 8003afe:	4b31      	ldr	r3, [pc, #196]	; (8003bc4 <HAL_RCC_ClockConfig+0x260>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	e00d      	b.n	8003b20 <HAL_RCC_ClockConfig+0x1bc>
 8003b04:	2302      	movs	r3, #2
 8003b06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0a:	fa93 f3a3 	rbit	r3, r3
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b10:	2302      	movs	r3, #2
 8003b12:	623b      	str	r3, [r7, #32]
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	fa93 f3a3 	rbit	r3, r3
 8003b1a:	61fb      	str	r3, [r7, #28]
 8003b1c:	4b29      	ldr	r3, [pc, #164]	; (8003bc4 <HAL_RCC_ClockConfig+0x260>)
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	2202      	movs	r2, #2
 8003b22:	61ba      	str	r2, [r7, #24]
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	fa92 f2a2 	rbit	r2, r2
 8003b2a:	617a      	str	r2, [r7, #20]
  return result;
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	fab2 f282 	clz	r2, r2
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	f042 0220 	orr.w	r2, r2, #32
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	f002 021f 	and.w	r2, r2, #31
 8003b3e:	2101      	movs	r1, #1
 8003b40:	fa01 f202 	lsl.w	r2, r1, r2
 8003b44:	4013      	ands	r3, r2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e079      	b.n	8003c42 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b4e:	4b1d      	ldr	r3, [pc, #116]	; (8003bc4 <HAL_RCC_ClockConfig+0x260>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f023 0203 	bic.w	r2, r3, #3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	491a      	ldr	r1, [pc, #104]	; (8003bc4 <HAL_RCC_ClockConfig+0x260>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b60:	f7fd fc08 	bl	8001374 <HAL_GetTick>
 8003b64:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b66:	e00a      	b.n	8003b7e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b68:	f7fd fc04 	bl	8001374 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e061      	b.n	8003c42 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7e:	4b11      	ldr	r3, [pc, #68]	; (8003bc4 <HAL_RCC_ClockConfig+0x260>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f003 020c 	and.w	r2, r3, #12
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d1eb      	bne.n	8003b68 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b90:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <HAL_RCC_ClockConfig+0x25c>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d214      	bcs.n	8003bc8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9e:	4b08      	ldr	r3, [pc, #32]	; (8003bc0 <HAL_RCC_ClockConfig+0x25c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f023 0207 	bic.w	r2, r3, #7
 8003ba6:	4906      	ldr	r1, [pc, #24]	; (8003bc0 <HAL_RCC_ClockConfig+0x25c>)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bae:	4b04      	ldr	r3, [pc, #16]	; (8003bc0 <HAL_RCC_ClockConfig+0x25c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d005      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e040      	b.n	8003c42 <HAL_RCC_ClockConfig+0x2de>
 8003bc0:	40022000 	.word	0x40022000
 8003bc4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d008      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bd4:	4b1d      	ldr	r3, [pc, #116]	; (8003c4c <HAL_RCC_ClockConfig+0x2e8>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	491a      	ldr	r1, [pc, #104]	; (8003c4c <HAL_RCC_ClockConfig+0x2e8>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d009      	beq.n	8003c06 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bf2:	4b16      	ldr	r3, [pc, #88]	; (8003c4c <HAL_RCC_ClockConfig+0x2e8>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	4912      	ldr	r1, [pc, #72]	; (8003c4c <HAL_RCC_ClockConfig+0x2e8>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c06:	f000 f829 	bl	8003c5c <HAL_RCC_GetSysClockFreq>
 8003c0a:	4601      	mov	r1, r0
 8003c0c:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <HAL_RCC_ClockConfig+0x2e8>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c14:	22f0      	movs	r2, #240	; 0xf0
 8003c16:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	fa92 f2a2 	rbit	r2, r2
 8003c1e:	60fa      	str	r2, [r7, #12]
  return result;
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	fab2 f282 	clz	r2, r2
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	40d3      	lsrs	r3, r2
 8003c2a:	4a09      	ldr	r2, [pc, #36]	; (8003c50 <HAL_RCC_ClockConfig+0x2ec>)
 8003c2c:	5cd3      	ldrb	r3, [r2, r3]
 8003c2e:	fa21 f303 	lsr.w	r3, r1, r3
 8003c32:	4a08      	ldr	r2, [pc, #32]	; (8003c54 <HAL_RCC_ClockConfig+0x2f0>)
 8003c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003c36:	4b08      	ldr	r3, [pc, #32]	; (8003c58 <HAL_RCC_ClockConfig+0x2f4>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fd fb56 	bl	80012ec <HAL_InitTick>
  
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3778      	adds	r7, #120	; 0x78
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	08005ed0 	.word	0x08005ed0
 8003c54:	20000000 	.word	0x20000000
 8003c58:	20000004 	.word	0x20000004

08003c5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b08b      	sub	sp, #44	; 0x2c
 8003c60:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	61fb      	str	r3, [r7, #28]
 8003c66:	2300      	movs	r3, #0
 8003c68:	61bb      	str	r3, [r7, #24]
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6e:	2300      	movs	r3, #0
 8003c70:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003c76:	4b29      	ldr	r3, [pc, #164]	; (8003d1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f003 030c 	and.w	r3, r3, #12
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d002      	beq.n	8003c8c <HAL_RCC_GetSysClockFreq+0x30>
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d003      	beq.n	8003c92 <HAL_RCC_GetSysClockFreq+0x36>
 8003c8a:	e03c      	b.n	8003d06 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c8c:	4b24      	ldr	r3, [pc, #144]	; (8003d20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c8e:	623b      	str	r3, [r7, #32]
      break;
 8003c90:	e03c      	b.n	8003d0c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003c98:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003c9c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	fa92 f2a2 	rbit	r2, r2
 8003ca4:	607a      	str	r2, [r7, #4]
  return result;
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	fab2 f282 	clz	r2, r2
 8003cac:	b2d2      	uxtb	r2, r2
 8003cae:	40d3      	lsrs	r3, r2
 8003cb0:	4a1c      	ldr	r2, [pc, #112]	; (8003d24 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003cb2:	5cd3      	ldrb	r3, [r2, r3]
 8003cb4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003cb6:	4b19      	ldr	r3, [pc, #100]	; (8003d1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	220f      	movs	r2, #15
 8003cc0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	fa92 f2a2 	rbit	r2, r2
 8003cc8:	60fa      	str	r2, [r7, #12]
  return result;
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	fab2 f282 	clz	r2, r2
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	40d3      	lsrs	r3, r2
 8003cd4:	4a14      	ldr	r2, [pc, #80]	; (8003d28 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003cd6:	5cd3      	ldrb	r3, [r2, r3]
 8003cd8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d008      	beq.n	8003cf6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ce4:	4a0e      	ldr	r2, [pc, #56]	; (8003d20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	fb02 f303 	mul.w	r3, r2, r3
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf4:	e004      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	4a0c      	ldr	r2, [pc, #48]	; (8003d2c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003cfa:	fb02 f303 	mul.w	r3, r2, r3
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	623b      	str	r3, [r7, #32]
      break;
 8003d04:	e002      	b.n	8003d0c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d06:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d08:	623b      	str	r3, [r7, #32]
      break;
 8003d0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	372c      	adds	r7, #44	; 0x2c
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	007a1200 	.word	0x007a1200
 8003d24:	08005ee8 	.word	0x08005ee8
 8003d28:	08005ef8 	.word	0x08005ef8
 8003d2c:	003d0900 	.word	0x003d0900

08003d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d34:	4b03      	ldr	r3, [pc, #12]	; (8003d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d36:	681b      	ldr	r3, [r3, #0]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	20000000 	.word	0x20000000

08003d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003d4e:	f7ff ffef 	bl	8003d30 <HAL_RCC_GetHCLKFreq>
 8003d52:	4601      	mov	r1, r0
 8003d54:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d5c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003d60:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	fa92 f2a2 	rbit	r2, r2
 8003d68:	603a      	str	r2, [r7, #0]
  return result;
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	fab2 f282 	clz	r2, r2
 8003d70:	b2d2      	uxtb	r2, r2
 8003d72:	40d3      	lsrs	r3, r2
 8003d74:	4a04      	ldr	r2, [pc, #16]	; (8003d88 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003d76:	5cd3      	ldrb	r3, [r2, r3]
 8003d78:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40021000 	.word	0x40021000
 8003d88:	08005ee0 	.word	0x08005ee0

08003d8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003d92:	f7ff ffcd 	bl	8003d30 <HAL_RCC_GetHCLKFreq>
 8003d96:	4601      	mov	r1, r0
 8003d98:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003da0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003da4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	fa92 f2a2 	rbit	r2, r2
 8003dac:	603a      	str	r2, [r7, #0]
  return result;
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	fab2 f282 	clz	r2, r2
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	40d3      	lsrs	r3, r2
 8003db8:	4a04      	ldr	r2, [pc, #16]	; (8003dcc <HAL_RCC_GetPCLK2Freq+0x40>)
 8003dba:	5cd3      	ldrb	r3, [r2, r3]
 8003dbc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	08005ee0 	.word	0x08005ee0

08003dd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b092      	sub	sp, #72	; 0x48
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 80d7 	beq.w	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003dee:	2300      	movs	r3, #0
 8003df0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003df4:	4b4e      	ldr	r3, [pc, #312]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10e      	bne.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e00:	4b4b      	ldr	r3, [pc, #300]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	4a4a      	ldr	r2, [pc, #296]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	61d3      	str	r3, [r2, #28]
 8003e0c:	4b48      	ldr	r3, [pc, #288]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e14:	60bb      	str	r3, [r7, #8]
 8003e16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1e:	4b45      	ldr	r3, [pc, #276]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d118      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e2a:	4b42      	ldr	r3, [pc, #264]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a41      	ldr	r2, [pc, #260]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e34:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e36:	f7fd fa9d 	bl	8001374 <HAL_GetTick>
 8003e3a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3c:	e008      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e3e:	f7fd fa99 	bl	8001374 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b64      	cmp	r3, #100	; 0x64
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e14b      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e50:	4b38      	ldr	r3, [pc, #224]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0f0      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e5c:	4b34      	ldr	r3, [pc, #208]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e64:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 8084 	beq.w	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d07c      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e7c:	4b2c      	ldr	r3, [pc, #176]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8e:	fa93 f3a3 	rbit	r3, r3
 8003e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e96:	fab3 f383 	clz	r3, r3
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	4b26      	ldr	r3, [pc, #152]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ea0:	4413      	add	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	6013      	str	r3, [r2, #0]
 8003eaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003eae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb2:	fa93 f3a3 	rbit	r3, r3
 8003eb6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003eba:	fab3 f383 	clz	r3, r3
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	4b1d      	ldr	r3, [pc, #116]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	461a      	mov	r2, r3
 8003eca:	2300      	movs	r3, #0
 8003ecc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ece:	4a18      	ldr	r2, [pc, #96]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ed2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d04b      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ede:	f7fd fa49 	bl	8001374 <HAL_GetTick>
 8003ee2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee4:	e00a      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee6:	f7fd fa45 	bl	8001374 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d901      	bls.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e0f5      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003efc:	2302      	movs	r3, #2
 8003efe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f02:	fa93 f3a3 	rbit	r3, r3
 8003f06:	627b      	str	r3, [r7, #36]	; 0x24
 8003f08:	2302      	movs	r3, #2
 8003f0a:	623b      	str	r3, [r7, #32]
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	fa93 f3a3 	rbit	r3, r3
 8003f12:	61fb      	str	r3, [r7, #28]
  return result;
 8003f14:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f16:	fab3 f383 	clz	r3, r3
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	095b      	lsrs	r3, r3, #5
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	f043 0302 	orr.w	r3, r3, #2
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d108      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003f2a:	4b01      	ldr	r3, [pc, #4]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	e00d      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003f30:	40021000 	.word	0x40021000
 8003f34:	40007000 	.word	0x40007000
 8003f38:	10908100 	.word	0x10908100
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	fa93 f3a3 	rbit	r3, r3
 8003f46:	617b      	str	r3, [r7, #20]
 8003f48:	4b69      	ldr	r3, [pc, #420]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	613a      	str	r2, [r7, #16]
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	fa92 f2a2 	rbit	r2, r2
 8003f56:	60fa      	str	r2, [r7, #12]
  return result;
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	fab2 f282 	clz	r2, r2
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f64:	b2d2      	uxtb	r2, r2
 8003f66:	f002 021f 	and.w	r2, r2, #31
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f70:	4013      	ands	r3, r2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0b7      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003f76:	4b5e      	ldr	r3, [pc, #376]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	495b      	ldr	r1, [pc, #364]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d105      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f90:	4b57      	ldr	r3, [pc, #348]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	4a56      	ldr	r2, [pc, #344]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d008      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fa8:	4b51      	ldr	r3, [pc, #324]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fac:	f023 0203 	bic.w	r2, r3, #3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	494e      	ldr	r1, [pc, #312]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0320 	and.w	r3, r3, #32
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d008      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fc6:	4b4a      	ldr	r3, [pc, #296]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fca:	f023 0210 	bic.w	r2, r3, #16
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	4947      	ldr	r1, [pc, #284]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d008      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003fe4:	4b42      	ldr	r3, [pc, #264]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff0:	493f      	ldr	r1, [pc, #252]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d008      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004002:	4b3b      	ldr	r3, [pc, #236]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	f023 0220 	bic.w	r2, r3, #32
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	4938      	ldr	r1, [pc, #224]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004010:	4313      	orrs	r3, r2
 8004012:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d008      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004020:	4b33      	ldr	r3, [pc, #204]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004024:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	4930      	ldr	r1, [pc, #192]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800402e:	4313      	orrs	r3, r2
 8004030:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800403a:	2b00      	cmp	r3, #0
 800403c:	d008      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800403e:	4b2c      	ldr	r3, [pc, #176]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	4929      	ldr	r1, [pc, #164]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800404c:	4313      	orrs	r3, r2
 800404e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004058:	2b00      	cmp	r3, #0
 800405a:	d008      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800405c:	4b24      	ldr	r3, [pc, #144]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	4921      	ldr	r1, [pc, #132]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800406a:	4313      	orrs	r3, r2
 800406c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d008      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800407a:	4b1d      	ldr	r3, [pc, #116]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800407c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	491a      	ldr	r1, [pc, #104]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004088:	4313      	orrs	r3, r2
 800408a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d008      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004098:	4b15      	ldr	r3, [pc, #84]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800409a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	4912      	ldr	r1, [pc, #72]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d008      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80040b6:	4b0e      	ldr	r3, [pc, #56]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c2:	490b      	ldr	r1, [pc, #44]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d008      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80040d4:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e0:	4903      	ldr	r1, [pc, #12]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3748      	adds	r7, #72	; 0x48
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40021000 	.word	0x40021000

080040f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e01d      	b.n	8004142 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d106      	bne.n	8004120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fc fed0 	bl	8000ec0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3304      	adds	r3, #4
 8004130:	4619      	mov	r1, r3
 8004132:	4610      	mov	r0, r2
 8004134:	f000 fc88 	bl	8004a48 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
	...

0800414c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0201 	orr.w	r2, r2, #1
 8004162:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	4b0c      	ldr	r3, [pc, #48]	; (800419c <HAL_TIM_Base_Start_IT+0x50>)
 800416c:	4013      	ands	r3, r2
 800416e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b06      	cmp	r3, #6
 8004174:	d00b      	beq.n	800418e <HAL_TIM_Base_Start_IT+0x42>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800417c:	d007      	beq.n	800418e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0201 	orr.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	00010007 	.word	0x00010007

080041a0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e01d      	b.n	80041ee <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d106      	bne.n	80041cc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f815 	bl	80041f6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3304      	adds	r3, #4
 80041dc:	4619      	mov	r1, r3
 80041de:	4610      	mov	r0, r2
 80041e0:	f000 fc32 	bl	8004a48 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b082      	sub	sp, #8
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e01d      	b.n	8004258 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b00      	cmp	r3, #0
 8004226:	d106      	bne.n	8004236 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f7fc fe25 	bl	8000e80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2202      	movs	r2, #2
 800423a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	3304      	adds	r3, #4
 8004246:	4619      	mov	r1, r3
 8004248:	4610      	mov	r0, r2
 800424a:	f000 fbfd 	bl	8004a48 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2201      	movs	r2, #1
 8004270:	6839      	ldr	r1, [r7, #0]
 8004272:	4618      	mov	r0, r3
 8004274:	f000 ff96 	bl	80051a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a1c      	ldr	r2, [pc, #112]	; (80042f0 <HAL_TIM_PWM_Start+0x90>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d00e      	beq.n	80042a0 <HAL_TIM_PWM_Start+0x40>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a1b      	ldr	r2, [pc, #108]	; (80042f4 <HAL_TIM_PWM_Start+0x94>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d009      	beq.n	80042a0 <HAL_TIM_PWM_Start+0x40>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a19      	ldr	r2, [pc, #100]	; (80042f8 <HAL_TIM_PWM_Start+0x98>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d004      	beq.n	80042a0 <HAL_TIM_PWM_Start+0x40>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a18      	ldr	r2, [pc, #96]	; (80042fc <HAL_TIM_PWM_Start+0x9c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d101      	bne.n	80042a4 <HAL_TIM_PWM_Start+0x44>
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <HAL_TIM_PWM_Start+0x46>
 80042a4:	2300      	movs	r3, #0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d007      	beq.n	80042ba <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	4b0f      	ldr	r3, [pc, #60]	; (8004300 <HAL_TIM_PWM_Start+0xa0>)
 80042c2:	4013      	ands	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2b06      	cmp	r3, #6
 80042ca:	d00b      	beq.n	80042e4 <HAL_TIM_PWM_Start+0x84>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d2:	d007      	beq.n	80042e4 <HAL_TIM_PWM_Start+0x84>
  {
    __HAL_TIM_ENABLE(htim);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0201 	orr.w	r2, r2, #1
 80042e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	40012c00 	.word	0x40012c00
 80042f4:	40014000 	.word	0x40014000
 80042f8:	40014400 	.word	0x40014400
 80042fc:	40014800 	.word	0x40014800
 8004300:	00010007 	.word	0x00010007

08004304 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b02      	cmp	r3, #2
 8004318:	d122      	bne.n	8004360 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b02      	cmp	r3, #2
 8004326:	d11b      	bne.n	8004360 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f06f 0202 	mvn.w	r2, #2
 8004330:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	f003 0303 	and.w	r3, r3, #3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 fb5f 	bl	8004a0a <HAL_TIM_IC_CaptureCallback>
 800434c:	e005      	b.n	800435a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fb51 	bl	80049f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 fb62 	bl	8004a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f003 0304 	and.w	r3, r3, #4
 800436a:	2b04      	cmp	r3, #4
 800436c:	d122      	bne.n	80043b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b04      	cmp	r3, #4
 800437a:	d11b      	bne.n	80043b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f06f 0204 	mvn.w	r2, #4
 8004384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2202      	movs	r2, #2
 800438a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fb35 	bl	8004a0a <HAL_TIM_IC_CaptureCallback>
 80043a0:	e005      	b.n	80043ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 fb27 	bl	80049f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 fb38 	bl	8004a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b08      	cmp	r3, #8
 80043c0:	d122      	bne.n	8004408 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f003 0308 	and.w	r3, r3, #8
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d11b      	bne.n	8004408 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f06f 0208 	mvn.w	r2, #8
 80043d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2204      	movs	r2, #4
 80043de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fb0b 	bl	8004a0a <HAL_TIM_IC_CaptureCallback>
 80043f4:	e005      	b.n	8004402 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 fafd 	bl	80049f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 fb0e 	bl	8004a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f003 0310 	and.w	r3, r3, #16
 8004412:	2b10      	cmp	r3, #16
 8004414:	d122      	bne.n	800445c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f003 0310 	and.w	r3, r3, #16
 8004420:	2b10      	cmp	r3, #16
 8004422:	d11b      	bne.n	800445c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0210 	mvn.w	r2, #16
 800442c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2208      	movs	r2, #8
 8004432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fae1 	bl	8004a0a <HAL_TIM_IC_CaptureCallback>
 8004448:	e005      	b.n	8004456 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fad3 	bl	80049f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 fae4 	bl	8004a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b01      	cmp	r3, #1
 8004468:	d10e      	bne.n	8004488 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b01      	cmp	r3, #1
 8004476:	d107      	bne.n	8004488 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0201 	mvn.w	r2, #1
 8004480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 faad 	bl	80049e2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004492:	2b80      	cmp	r3, #128	; 0x80
 8004494:	d10e      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a0:	2b80      	cmp	r3, #128	; 0x80
 80044a2:	d107      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 ffb6 	bl	8005420 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044c2:	d10e      	bne.n	80044e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ce:	2b80      	cmp	r3, #128	; 0x80
 80044d0:	d107      	bne.n	80044e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 ffa9 	bl	8005434 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ec:	2b40      	cmp	r3, #64	; 0x40
 80044ee:	d10e      	bne.n	800450e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fa:	2b40      	cmp	r3, #64	; 0x40
 80044fc:	d107      	bne.n	800450e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 fa92 	bl	8004a32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b20      	cmp	r3, #32
 800451a:	d10e      	bne.n	800453a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f003 0320 	and.w	r3, r3, #32
 8004526:	2b20      	cmp	r3, #32
 8004528:	d107      	bne.n	800453a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f06f 0220 	mvn.w	r2, #32
 8004532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 ff69 	bl	800540c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800453a:	bf00      	nop
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004556:	2b01      	cmp	r3, #1
 8004558:	d101      	bne.n	800455e <HAL_TIM_OC_ConfigChannel+0x1a>
 800455a:	2302      	movs	r3, #2
 800455c:	e06c      	b.n	8004638 <HAL_TIM_OC_ConfigChannel+0xf4>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2202      	movs	r2, #2
 800456a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b14      	cmp	r3, #20
 8004572:	d857      	bhi.n	8004624 <HAL_TIM_OC_ConfigChannel+0xe0>
 8004574:	a201      	add	r2, pc, #4	; (adr r2, 800457c <HAL_TIM_OC_ConfigChannel+0x38>)
 8004576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457a:	bf00      	nop
 800457c:	080045d1 	.word	0x080045d1
 8004580:	08004625 	.word	0x08004625
 8004584:	08004625 	.word	0x08004625
 8004588:	08004625 	.word	0x08004625
 800458c:	080045df 	.word	0x080045df
 8004590:	08004625 	.word	0x08004625
 8004594:	08004625 	.word	0x08004625
 8004598:	08004625 	.word	0x08004625
 800459c:	080045ed 	.word	0x080045ed
 80045a0:	08004625 	.word	0x08004625
 80045a4:	08004625 	.word	0x08004625
 80045a8:	08004625 	.word	0x08004625
 80045ac:	080045fb 	.word	0x080045fb
 80045b0:	08004625 	.word	0x08004625
 80045b4:	08004625 	.word	0x08004625
 80045b8:	08004625 	.word	0x08004625
 80045bc:	08004609 	.word	0x08004609
 80045c0:	08004625 	.word	0x08004625
 80045c4:	08004625 	.word	0x08004625
 80045c8:	08004625 	.word	0x08004625
 80045cc:	08004617 	.word	0x08004617
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68b9      	ldr	r1, [r7, #8]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 faa4 	bl	8004b24 <TIM_OC1_SetConfig>
      break;
 80045dc:	e023      	b.n	8004626 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68b9      	ldr	r1, [r7, #8]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 fb23 	bl	8004c30 <TIM_OC2_SetConfig>
      break;
 80045ea:	e01c      	b.n	8004626 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68b9      	ldr	r1, [r7, #8]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 fb9c 	bl	8004d30 <TIM_OC3_SetConfig>
      break;
 80045f8:	e015      	b.n	8004626 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68b9      	ldr	r1, [r7, #8]
 8004600:	4618      	mov	r0, r3
 8004602:	f000 fc13 	bl	8004e2c <TIM_OC4_SetConfig>
      break;
 8004606:	e00e      	b.n	8004626 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68b9      	ldr	r1, [r7, #8]
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fc70 	bl	8004ef4 <TIM_OC5_SetConfig>
      break;
 8004614:	e007      	b.n	8004626 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68b9      	ldr	r1, [r7, #8]
 800461c:	4618      	mov	r0, r3
 800461e:	f000 fcc7 	bl	8004fb0 <TIM_OC6_SetConfig>
      break;
 8004622:	e000      	b.n	8004626 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8004624:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004656:	2302      	movs	r3, #2
 8004658:	e105      	b.n	8004866 <HAL_TIM_PWM_ConfigChannel+0x226>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2202      	movs	r2, #2
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b14      	cmp	r3, #20
 800466e:	f200 80f0 	bhi.w	8004852 <HAL_TIM_PWM_ConfigChannel+0x212>
 8004672:	a201      	add	r2, pc, #4	; (adr r2, 8004678 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004678:	080046cd 	.word	0x080046cd
 800467c:	08004853 	.word	0x08004853
 8004680:	08004853 	.word	0x08004853
 8004684:	08004853 	.word	0x08004853
 8004688:	0800470d 	.word	0x0800470d
 800468c:	08004853 	.word	0x08004853
 8004690:	08004853 	.word	0x08004853
 8004694:	08004853 	.word	0x08004853
 8004698:	0800474f 	.word	0x0800474f
 800469c:	08004853 	.word	0x08004853
 80046a0:	08004853 	.word	0x08004853
 80046a4:	08004853 	.word	0x08004853
 80046a8:	0800478f 	.word	0x0800478f
 80046ac:	08004853 	.word	0x08004853
 80046b0:	08004853 	.word	0x08004853
 80046b4:	08004853 	.word	0x08004853
 80046b8:	080047d1 	.word	0x080047d1
 80046bc:	08004853 	.word	0x08004853
 80046c0:	08004853 	.word	0x08004853
 80046c4:	08004853 	.word	0x08004853
 80046c8:	08004811 	.word	0x08004811
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68b9      	ldr	r1, [r7, #8]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 fa26 	bl	8004b24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699a      	ldr	r2, [r3, #24]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0208 	orr.w	r2, r2, #8
 80046e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699a      	ldr	r2, [r3, #24]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0204 	bic.w	r2, r2, #4
 80046f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6999      	ldr	r1, [r3, #24]
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	691a      	ldr	r2, [r3, #16]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	619a      	str	r2, [r3, #24]
      break;
 800470a:	e0a3      	b.n	8004854 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68b9      	ldr	r1, [r7, #8]
 8004712:	4618      	mov	r0, r3
 8004714:	f000 fa8c 	bl	8004c30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699a      	ldr	r2, [r3, #24]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699a      	ldr	r2, [r3, #24]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6999      	ldr	r1, [r3, #24]
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	021a      	lsls	r2, r3, #8
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	619a      	str	r2, [r3, #24]
      break;
 800474c:	e082      	b.n	8004854 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68b9      	ldr	r1, [r7, #8]
 8004754:	4618      	mov	r0, r3
 8004756:	f000 faeb 	bl	8004d30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	69da      	ldr	r2, [r3, #28]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f042 0208 	orr.w	r2, r2, #8
 8004768:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69da      	ldr	r2, [r3, #28]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0204 	bic.w	r2, r2, #4
 8004778:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69d9      	ldr	r1, [r3, #28]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	691a      	ldr	r2, [r3, #16]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	430a      	orrs	r2, r1
 800478a:	61da      	str	r2, [r3, #28]
      break;
 800478c:	e062      	b.n	8004854 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68b9      	ldr	r1, [r7, #8]
 8004794:	4618      	mov	r0, r3
 8004796:	f000 fb49 	bl	8004e2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69da      	ldr	r2, [r3, #28]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69da      	ldr	r2, [r3, #28]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	69d9      	ldr	r1, [r3, #28]
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	021a      	lsls	r2, r3, #8
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	61da      	str	r2, [r3, #28]
      break;
 80047ce:	e041      	b.n	8004854 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68b9      	ldr	r1, [r7, #8]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 fb8c 	bl	8004ef4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0208 	orr.w	r2, r2, #8
 80047ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0204 	bic.w	r2, r2, #4
 80047fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	691a      	ldr	r2, [r3, #16]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800480e:	e021      	b.n	8004854 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68b9      	ldr	r1, [r7, #8]
 8004816:	4618      	mov	r0, r3
 8004818:	f000 fbca 	bl	8004fb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800482a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800483a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	021a      	lsls	r2, r3, #8
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004850:	e000      	b.n	8004854 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8004852:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop

08004870 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004880:	2b01      	cmp	r3, #1
 8004882:	d101      	bne.n	8004888 <HAL_TIM_ConfigClockSource+0x18>
 8004884:	2302      	movs	r3, #2
 8004886:	e0a8      	b.n	80049da <HAL_TIM_ConfigClockSource+0x16a>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b40      	cmp	r3, #64	; 0x40
 80048c2:	d067      	beq.n	8004994 <HAL_TIM_ConfigClockSource+0x124>
 80048c4:	2b40      	cmp	r3, #64	; 0x40
 80048c6:	d80b      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x70>
 80048c8:	2b10      	cmp	r3, #16
 80048ca:	d073      	beq.n	80049b4 <HAL_TIM_ConfigClockSource+0x144>
 80048cc:	2b10      	cmp	r3, #16
 80048ce:	d802      	bhi.n	80048d6 <HAL_TIM_ConfigClockSource+0x66>
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d06f      	beq.n	80049b4 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80048d4:	e078      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80048d6:	2b20      	cmp	r3, #32
 80048d8:	d06c      	beq.n	80049b4 <HAL_TIM_ConfigClockSource+0x144>
 80048da:	2b30      	cmp	r3, #48	; 0x30
 80048dc:	d06a      	beq.n	80049b4 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80048de:	e073      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80048e0:	2b70      	cmp	r3, #112	; 0x70
 80048e2:	d00d      	beq.n	8004900 <HAL_TIM_ConfigClockSource+0x90>
 80048e4:	2b70      	cmp	r3, #112	; 0x70
 80048e6:	d804      	bhi.n	80048f2 <HAL_TIM_ConfigClockSource+0x82>
 80048e8:	2b50      	cmp	r3, #80	; 0x50
 80048ea:	d033      	beq.n	8004954 <HAL_TIM_ConfigClockSource+0xe4>
 80048ec:	2b60      	cmp	r3, #96	; 0x60
 80048ee:	d041      	beq.n	8004974 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80048f0:	e06a      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80048f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f6:	d066      	beq.n	80049c6 <HAL_TIM_ConfigClockSource+0x156>
 80048f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048fc:	d017      	beq.n	800492e <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80048fe:	e063      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6818      	ldr	r0, [r3, #0]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	6899      	ldr	r1, [r3, #8]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f000 fc28 	bl	8005164 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004922:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	609a      	str	r2, [r3, #8]
      break;
 800492c:	e04c      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6818      	ldr	r0, [r3, #0]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	6899      	ldr	r1, [r3, #8]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f000 fc11 	bl	8005164 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004950:	609a      	str	r2, [r3, #8]
      break;
 8004952:	e039      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6818      	ldr	r0, [r3, #0]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	6859      	ldr	r1, [r3, #4]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	461a      	mov	r2, r3
 8004962:	f000 fb85 	bl	8005070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2150      	movs	r1, #80	; 0x50
 800496c:	4618      	mov	r0, r3
 800496e:	f000 fbde 	bl	800512e <TIM_ITRx_SetConfig>
      break;
 8004972:	e029      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6818      	ldr	r0, [r3, #0]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	6859      	ldr	r1, [r3, #4]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	461a      	mov	r2, r3
 8004982:	f000 fba4 	bl	80050ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2160      	movs	r1, #96	; 0x60
 800498c:	4618      	mov	r0, r3
 800498e:	f000 fbce 	bl	800512e <TIM_ITRx_SetConfig>
      break;
 8004992:	e019      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6818      	ldr	r0, [r3, #0]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	6859      	ldr	r1, [r3, #4]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	461a      	mov	r2, r3
 80049a2:	f000 fb65 	bl	8005070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2140      	movs	r1, #64	; 0x40
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 fbbe 	bl	800512e <TIM_ITRx_SetConfig>
      break;
 80049b2:	e009      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4619      	mov	r1, r3
 80049be:	4610      	mov	r0, r2
 80049c0:	f000 fbb5 	bl	800512e <TIM_ITRx_SetConfig>
      break;
 80049c4:	e000      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80049c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b083      	sub	sp, #12
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049fe:	bf00      	nop
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
	...

08004a48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a2e      	ldr	r2, [pc, #184]	; (8004b14 <TIM_Base_SetConfig+0xcc>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d003      	beq.n	8004a68 <TIM_Base_SetConfig+0x20>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a66:	d108      	bne.n	8004a7a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a25      	ldr	r2, [pc, #148]	; (8004b14 <TIM_Base_SetConfig+0xcc>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00f      	beq.n	8004aa2 <TIM_Base_SetConfig+0x5a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a88:	d00b      	beq.n	8004aa2 <TIM_Base_SetConfig+0x5a>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a22      	ldr	r2, [pc, #136]	; (8004b18 <TIM_Base_SetConfig+0xd0>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d007      	beq.n	8004aa2 <TIM_Base_SetConfig+0x5a>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a21      	ldr	r2, [pc, #132]	; (8004b1c <TIM_Base_SetConfig+0xd4>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d003      	beq.n	8004aa2 <TIM_Base_SetConfig+0x5a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a20      	ldr	r2, [pc, #128]	; (8004b20 <TIM_Base_SetConfig+0xd8>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d108      	bne.n	8004ab4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a0e      	ldr	r2, [pc, #56]	; (8004b14 <TIM_Base_SetConfig+0xcc>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d00b      	beq.n	8004af8 <TIM_Base_SetConfig+0xb0>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a0d      	ldr	r2, [pc, #52]	; (8004b18 <TIM_Base_SetConfig+0xd0>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d007      	beq.n	8004af8 <TIM_Base_SetConfig+0xb0>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a0c      	ldr	r2, [pc, #48]	; (8004b1c <TIM_Base_SetConfig+0xd4>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d003      	beq.n	8004af8 <TIM_Base_SetConfig+0xb0>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a0b      	ldr	r2, [pc, #44]	; (8004b20 <TIM_Base_SetConfig+0xd8>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d103      	bne.n	8004b00 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	691a      	ldr	r2, [r3, #16]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	615a      	str	r2, [r3, #20]
}
 8004b06:	bf00      	nop
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40012c00 	.word	0x40012c00
 8004b18:	40014000 	.word	0x40014000
 8004b1c:	40014400 	.word	0x40014400
 8004b20:	40014800 	.word	0x40014800

08004b24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b087      	sub	sp, #28
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	f023 0201 	bic.w	r2, r3, #1
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 0303 	bic.w	r3, r3, #3
 8004b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f023 0302 	bic.w	r3, r3, #2
 8004b70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a28      	ldr	r2, [pc, #160]	; (8004c20 <TIM_OC1_SetConfig+0xfc>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d00b      	beq.n	8004b9c <TIM_OC1_SetConfig+0x78>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a27      	ldr	r2, [pc, #156]	; (8004c24 <TIM_OC1_SetConfig+0x100>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d007      	beq.n	8004b9c <TIM_OC1_SetConfig+0x78>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a26      	ldr	r2, [pc, #152]	; (8004c28 <TIM_OC1_SetConfig+0x104>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d003      	beq.n	8004b9c <TIM_OC1_SetConfig+0x78>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a25      	ldr	r2, [pc, #148]	; (8004c2c <TIM_OC1_SetConfig+0x108>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d10c      	bne.n	8004bb6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f023 0308 	bic.w	r3, r3, #8
 8004ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f023 0304 	bic.w	r3, r3, #4
 8004bb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a19      	ldr	r2, [pc, #100]	; (8004c20 <TIM_OC1_SetConfig+0xfc>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d00b      	beq.n	8004bd6 <TIM_OC1_SetConfig+0xb2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a18      	ldr	r2, [pc, #96]	; (8004c24 <TIM_OC1_SetConfig+0x100>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d007      	beq.n	8004bd6 <TIM_OC1_SetConfig+0xb2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a17      	ldr	r2, [pc, #92]	; (8004c28 <TIM_OC1_SetConfig+0x104>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d003      	beq.n	8004bd6 <TIM_OC1_SetConfig+0xb2>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a16      	ldr	r2, [pc, #88]	; (8004c2c <TIM_OC1_SetConfig+0x108>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d111      	bne.n	8004bfa <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004be4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	621a      	str	r2, [r3, #32]
}
 8004c14:	bf00      	nop
 8004c16:	371c      	adds	r7, #28
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	40012c00 	.word	0x40012c00
 8004c24:	40014000 	.word	0x40014000
 8004c28:	40014400 	.word	0x40014400
 8004c2c:	40014800 	.word	0x40014800

08004c30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	f023 0210 	bic.w	r2, r3, #16
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	021b      	lsls	r3, r3, #8
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f023 0320 	bic.w	r3, r3, #32
 8004c7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	011b      	lsls	r3, r3, #4
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a24      	ldr	r2, [pc, #144]	; (8004d20 <TIM_OC2_SetConfig+0xf0>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d10d      	bne.n	8004cb0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	011b      	lsls	r3, r3, #4
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a1b      	ldr	r2, [pc, #108]	; (8004d20 <TIM_OC2_SetConfig+0xf0>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d00b      	beq.n	8004cd0 <TIM_OC2_SetConfig+0xa0>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a1a      	ldr	r2, [pc, #104]	; (8004d24 <TIM_OC2_SetConfig+0xf4>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d007      	beq.n	8004cd0 <TIM_OC2_SetConfig+0xa0>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a19      	ldr	r2, [pc, #100]	; (8004d28 <TIM_OC2_SetConfig+0xf8>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d003      	beq.n	8004cd0 <TIM_OC2_SetConfig+0xa0>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a18      	ldr	r2, [pc, #96]	; (8004d2c <TIM_OC2_SetConfig+0xfc>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d113      	bne.n	8004cf8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cd6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cde:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	621a      	str	r2, [r3, #32]
}
 8004d12:	bf00      	nop
 8004d14:	371c      	adds	r7, #28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40012c00 	.word	0x40012c00
 8004d24:	40014000 	.word	0x40014000
 8004d28:	40014400 	.word	0x40014400
 8004d2c:	40014800 	.word	0x40014800

08004d30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b087      	sub	sp, #28
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f023 0303 	bic.w	r3, r3, #3
 8004d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	021b      	lsls	r3, r3, #8
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a23      	ldr	r2, [pc, #140]	; (8004e1c <TIM_OC3_SetConfig+0xec>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d10d      	bne.n	8004dae <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	021b      	lsls	r3, r3, #8
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dac:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a1a      	ldr	r2, [pc, #104]	; (8004e1c <TIM_OC3_SetConfig+0xec>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d00b      	beq.n	8004dce <TIM_OC3_SetConfig+0x9e>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a19      	ldr	r2, [pc, #100]	; (8004e20 <TIM_OC3_SetConfig+0xf0>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d007      	beq.n	8004dce <TIM_OC3_SetConfig+0x9e>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a18      	ldr	r2, [pc, #96]	; (8004e24 <TIM_OC3_SetConfig+0xf4>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d003      	beq.n	8004dce <TIM_OC3_SetConfig+0x9e>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a17      	ldr	r2, [pc, #92]	; (8004e28 <TIM_OC3_SetConfig+0xf8>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d113      	bne.n	8004df6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	011b      	lsls	r3, r3, #4
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	011b      	lsls	r3, r3, #4
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	621a      	str	r2, [r3, #32]
}
 8004e10:	bf00      	nop
 8004e12:	371c      	adds	r7, #28
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	40012c00 	.word	0x40012c00
 8004e20:	40014000 	.word	0x40014000
 8004e24:	40014400 	.word	0x40014400
 8004e28:	40014800 	.word	0x40014800

08004e2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	021b      	lsls	r3, r3, #8
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	031b      	lsls	r3, r3, #12
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a16      	ldr	r2, [pc, #88]	; (8004ee4 <TIM_OC4_SetConfig+0xb8>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d00b      	beq.n	8004ea8 <TIM_OC4_SetConfig+0x7c>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a15      	ldr	r2, [pc, #84]	; (8004ee8 <TIM_OC4_SetConfig+0xbc>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d007      	beq.n	8004ea8 <TIM_OC4_SetConfig+0x7c>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a14      	ldr	r2, [pc, #80]	; (8004eec <TIM_OC4_SetConfig+0xc0>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d003      	beq.n	8004ea8 <TIM_OC4_SetConfig+0x7c>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a13      	ldr	r2, [pc, #76]	; (8004ef0 <TIM_OC4_SetConfig+0xc4>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d109      	bne.n	8004ebc <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	019b      	lsls	r3, r3, #6
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	621a      	str	r2, [r3, #32]
}
 8004ed6:	bf00      	nop
 8004ed8:	371c      	adds	r7, #28
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	40012c00 	.word	0x40012c00
 8004ee8:	40014000 	.word	0x40014000
 8004eec:	40014400 	.word	0x40014400
 8004ef0:	40014800 	.word	0x40014800

08004ef4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b087      	sub	sp, #28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004f38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	041b      	lsls	r3, r3, #16
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a15      	ldr	r2, [pc, #84]	; (8004fa0 <TIM_OC5_SetConfig+0xac>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d00b      	beq.n	8004f66 <TIM_OC5_SetConfig+0x72>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a14      	ldr	r2, [pc, #80]	; (8004fa4 <TIM_OC5_SetConfig+0xb0>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d007      	beq.n	8004f66 <TIM_OC5_SetConfig+0x72>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a13      	ldr	r2, [pc, #76]	; (8004fa8 <TIM_OC5_SetConfig+0xb4>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d003      	beq.n	8004f66 <TIM_OC5_SetConfig+0x72>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a12      	ldr	r2, [pc, #72]	; (8004fac <TIM_OC5_SetConfig+0xb8>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d109      	bne.n	8004f7a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	021b      	lsls	r3, r3, #8
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	621a      	str	r2, [r3, #32]
}
 8004f94:	bf00      	nop
 8004f96:	371c      	adds	r7, #28
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	40012c00 	.word	0x40012c00
 8004fa4:	40014000 	.word	0x40014000
 8004fa8:	40014400 	.word	0x40014400
 8004fac:	40014800 	.word	0x40014800

08004fb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	021b      	lsls	r3, r3, #8
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	051b      	lsls	r3, r3, #20
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	4313      	orrs	r3, r2
 8005002:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a16      	ldr	r2, [pc, #88]	; (8005060 <TIM_OC6_SetConfig+0xb0>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d00b      	beq.n	8005024 <TIM_OC6_SetConfig+0x74>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a15      	ldr	r2, [pc, #84]	; (8005064 <TIM_OC6_SetConfig+0xb4>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d007      	beq.n	8005024 <TIM_OC6_SetConfig+0x74>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a14      	ldr	r2, [pc, #80]	; (8005068 <TIM_OC6_SetConfig+0xb8>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d003      	beq.n	8005024 <TIM_OC6_SetConfig+0x74>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a13      	ldr	r2, [pc, #76]	; (800506c <TIM_OC6_SetConfig+0xbc>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d109      	bne.n	8005038 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800502a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	029b      	lsls	r3, r3, #10
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	4313      	orrs	r3, r2
 8005036:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	621a      	str	r2, [r3, #32]
}
 8005052:	bf00      	nop
 8005054:	371c      	adds	r7, #28
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	40012c00 	.word	0x40012c00
 8005064:	40014000 	.word	0x40014000
 8005068:	40014400 	.word	0x40014400
 800506c:	40014800 	.word	0x40014800

08005070 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005070:	b480      	push	{r7}
 8005072:	b087      	sub	sp, #28
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	f023 0201 	bic.w	r2, r3, #1
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800509a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	011b      	lsls	r3, r3, #4
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f023 030a 	bic.w	r3, r3, #10
 80050ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	621a      	str	r2, [r3, #32]
}
 80050c2:	bf00      	nop
 80050c4:	371c      	adds	r7, #28
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b087      	sub	sp, #28
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	60f8      	str	r0, [r7, #12]
 80050d6:	60b9      	str	r1, [r7, #8]
 80050d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	f023 0210 	bic.w	r2, r3, #16
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	031b      	lsls	r3, r3, #12
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	4313      	orrs	r3, r2
 8005102:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800510a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	011b      	lsls	r3, r3, #4
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	4313      	orrs	r3, r2
 8005114:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	621a      	str	r2, [r3, #32]
}
 8005122:	bf00      	nop
 8005124:	371c      	adds	r7, #28
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800512e:	b480      	push	{r7}
 8005130:	b085      	sub	sp, #20
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
 8005136:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005144:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4313      	orrs	r3, r2
 800514c:	f043 0307 	orr.w	r3, r3, #7
 8005150:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	609a      	str	r2, [r3, #8]
}
 8005158:	bf00      	nop
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
 8005170:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800517e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	021a      	lsls	r2, r3, #8
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	431a      	orrs	r2, r3
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	4313      	orrs	r3, r2
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	4313      	orrs	r3, r2
 8005190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	609a      	str	r2, [r3, #8]
}
 8005198:	bf00      	nop
 800519a:	371c      	adds	r7, #28
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f003 031f 	and.w	r3, r3, #31
 80051b6:	2201      	movs	r2, #1
 80051b8:	fa02 f303 	lsl.w	r3, r2, r3
 80051bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a1a      	ldr	r2, [r3, #32]
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	43db      	mvns	r3, r3
 80051c6:	401a      	ands	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6a1a      	ldr	r2, [r3, #32]
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	f003 031f 	and.w	r3, r3, #31
 80051d6:	6879      	ldr	r1, [r7, #4]
 80051d8:	fa01 f303 	lsl.w	r3, r1, r3
 80051dc:	431a      	orrs	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	621a      	str	r2, [r3, #32]
}
 80051e2:	bf00      	nop
 80051e4:	371c      	adds	r7, #28
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
	...

080051f0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2204      	movs	r2, #4
 8005200:	6839      	ldr	r1, [r7, #0]
 8005202:	4618      	mov	r0, r3
 8005204:	f000 f920 	bl	8005448 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005216:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689a      	ldr	r2, [r3, #8]
 800521e:	4b0b      	ldr	r3, [pc, #44]	; (800524c <HAL_TIMEx_PWMN_Start+0x5c>)
 8005220:	4013      	ands	r3, r2
 8005222:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2b06      	cmp	r3, #6
 8005228:	d00b      	beq.n	8005242 <HAL_TIMEx_PWMN_Start+0x52>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005230:	d007      	beq.n	8005242 <HAL_TIMEx_PWMN_Start+0x52>
  {
    __HAL_TIM_ENABLE(htim);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f042 0201 	orr.w	r2, r2, #1
 8005240:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	00010007 	.word	0x00010007

08005250 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005260:	2b01      	cmp	r3, #1
 8005262:	d101      	bne.n	8005268 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005264:	2302      	movs	r3, #2
 8005266:	e04f      	b.n	8005308 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2202      	movs	r2, #2
 8005274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a21      	ldr	r2, [pc, #132]	; (8005314 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d108      	bne.n	80052a4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005298:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a14      	ldr	r2, [pc, #80]	; (8005314 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d009      	beq.n	80052dc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d0:	d004      	beq.n	80052dc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a10      	ldr	r2, [pc, #64]	; (8005318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d10c      	bne.n	80052f6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr
 8005314:	40012c00 	.word	0x40012c00
 8005318:	40014000 	.word	0x40014000

0800531c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005326:	2300      	movs	r3, #0
 8005328:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005330:	2b01      	cmp	r3, #1
 8005332:	d101      	bne.n	8005338 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005334:	2302      	movs	r3, #2
 8005336:	e060      	b.n	80053fa <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	4313      	orrs	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4313      	orrs	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	4313      	orrs	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539e:	4313      	orrs	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	041b      	lsls	r3, r3, #16
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a14      	ldr	r2, [pc, #80]	; (8005408 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d115      	bne.n	80053e8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c6:	051b      	lsls	r3, r3, #20
 80053c8:	4313      	orrs	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	6a1b      	ldr	r3, [r3, #32]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	40012c00 	.word	0x40012c00

0800540c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f003 031f 	and.w	r3, r3, #31
 800545a:	2204      	movs	r2, #4
 800545c:	fa02 f303 	lsl.w	r3, r2, r3
 8005460:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6a1a      	ldr	r2, [r3, #32]
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	43db      	mvns	r3, r3
 800546a:	401a      	ands	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6a1a      	ldr	r2, [r3, #32]
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	f003 031f 	and.w	r3, r3, #31
 800547a:	6879      	ldr	r1, [r7, #4]
 800547c:	fa01 f303 	lsl.w	r3, r1, r3
 8005480:	431a      	orrs	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	621a      	str	r2, [r3, #32]
}
 8005486:	bf00      	nop
 8005488:	371c      	adds	r7, #28
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b082      	sub	sp, #8
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e040      	b.n	8005526 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d106      	bne.n	80054ba <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f7fb fdb7 	bl	8001028 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2224      	movs	r2, #36	; 0x24
 80054be:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f022 0201 	bic.w	r2, r2, #1
 80054ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f987 	bl	80057e4 <UART_SetConfig>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d101      	bne.n	80054e0 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e022      	b.n	8005526 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 fafd 	bl	8005ae8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800550c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f042 0201 	orr.w	r2, r2, #1
 800551c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fb84 	bl	8005c2c <UART_CheckIdleState>
 8005524:	4603      	mov	r3, r0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3708      	adds	r7, #8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
	...

08005530 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b088      	sub	sp, #32
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005550:	69fa      	ldr	r2, [r7, #28]
 8005552:	f640 030f 	movw	r3, #2063	; 0x80f
 8005556:	4013      	ands	r3, r2
 8005558:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d113      	bne.n	8005588 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	f003 0320 	and.w	r3, r3, #32
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00e      	beq.n	8005588 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	f003 0320 	and.w	r3, r3, #32
 8005570:	2b00      	cmp	r3, #0
 8005572:	d009      	beq.n	8005588 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 8114 	beq.w	80057a6 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	4798      	blx	r3
      }
      return;
 8005586:	e10e      	b.n	80057a6 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 80d6 	beq.w	800573c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d105      	bne.n	80055a6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 80cb 	beq.w	800573c <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00e      	beq.n	80055ce <HAL_UART_IRQHandler+0x9e>
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d009      	beq.n	80055ce <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2201      	movs	r2, #1
 80055c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055c6:	f043 0201 	orr.w	r2, r3, #1
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00e      	beq.n	80055f6 <HAL_UART_IRQHandler+0xc6>
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d009      	beq.n	80055f6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2202      	movs	r2, #2
 80055e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055ee:	f043 0204 	orr.w	r2, r3, #4
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	f003 0304 	and.w	r3, r3, #4
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00e      	beq.n	800561e <HAL_UART_IRQHandler+0xee>
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d009      	beq.n	800561e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2204      	movs	r2, #4
 8005610:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005616:	f043 0202 	orr.w	r2, r3, #2
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	f003 0308 	and.w	r3, r3, #8
 8005624:	2b00      	cmp	r3, #0
 8005626:	d013      	beq.n	8005650 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	f003 0320 	and.w	r3, r3, #32
 800562e:	2b00      	cmp	r3, #0
 8005630:	d104      	bne.n	800563c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005638:	2b00      	cmp	r3, #0
 800563a:	d009      	beq.n	8005650 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2208      	movs	r2, #8
 8005642:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005648:	f043 0208 	orr.w	r2, r3, #8
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00f      	beq.n	800567a <HAL_UART_IRQHandler+0x14a>
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00a      	beq.n	800567a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800566c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005672:	f043 0220 	orr.w	r2, r3, #32
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800567e:	2b00      	cmp	r3, #0
 8005680:	f000 8093 	beq.w	80057aa <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00c      	beq.n	80056a8 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	f003 0320 	and.w	r3, r3, #32
 8005694:	2b00      	cmp	r3, #0
 8005696:	d007      	beq.n	80056a8 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056ac:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b8:	2b40      	cmp	r3, #64	; 0x40
 80056ba:	d004      	beq.n	80056c6 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d031      	beq.n	800572a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fb70 	bl	8005dac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d6:	2b40      	cmp	r3, #64	; 0x40
 80056d8:	d123      	bne.n	8005722 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056e8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d013      	beq.n	800571a <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056f6:	4a30      	ldr	r2, [pc, #192]	; (80057b8 <HAL_UART_IRQHandler+0x288>)
 80056f8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fc ff5e 	bl	80025c0 <HAL_DMA_Abort_IT>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d016      	beq.n	8005738 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800570e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005714:	4610      	mov	r0, r2
 8005716:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005718:	e00e      	b.n	8005738 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f858 	bl	80057d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005720:	e00a      	b.n	8005738 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f854 	bl	80057d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005728:	e006      	b.n	8005738 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f850 	bl	80057d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005736:	e038      	b.n	80057aa <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005738:	bf00      	nop
    return;
 800573a:	e036      	b.n	80057aa <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00d      	beq.n	8005762 <HAL_UART_IRQHandler+0x232>
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d008      	beq.n	8005762 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005758:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fb75 	bl	8005e4a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005760:	e026      	b.n	80057b0 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00d      	beq.n	8005788 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005772:	2b00      	cmp	r3, #0
 8005774:	d008      	beq.n	8005788 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800577a:	2b00      	cmp	r3, #0
 800577c:	d017      	beq.n	80057ae <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	4798      	blx	r3
    }
    return;
 8005786:	e012      	b.n	80057ae <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00e      	beq.n	80057b0 <HAL_UART_IRQHandler+0x280>
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005798:	2b00      	cmp	r3, #0
 800579a:	d009      	beq.n	80057b0 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 fb3b 	bl	8005e18 <UART_EndTransmit_IT>
    return;
 80057a2:	bf00      	nop
 80057a4:	e004      	b.n	80057b0 <HAL_UART_IRQHandler+0x280>
      return;
 80057a6:	bf00      	nop
 80057a8:	e002      	b.n	80057b0 <HAL_UART_IRQHandler+0x280>
    return;
 80057aa:	bf00      	nop
 80057ac:	e000      	b.n	80057b0 <HAL_UART_IRQHandler+0x280>
    return;
 80057ae:	bf00      	nop
  }

}
 80057b0:	3720      	adds	r7, #32
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	08005ded 	.word	0x08005ded

080057bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b088      	sub	sp, #32
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80057f0:	2300      	movs	r3, #0
 80057f2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	431a      	orrs	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	431a      	orrs	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	69db      	ldr	r3, [r3, #28]
 8005808:	4313      	orrs	r3, r2
 800580a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	4ba2      	ldr	r3, [pc, #648]	; (8005a9c <UART_SetConfig+0x2b8>)
 8005814:	4013      	ands	r3, r2
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6812      	ldr	r2, [r2, #0]
 800581a:	6939      	ldr	r1, [r7, #16]
 800581c:	430b      	orrs	r3, r1
 800581e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	4313      	orrs	r3, r2
 8005844:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	430a      	orrs	r2, r1
 8005858:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a90      	ldr	r2, [pc, #576]	; (8005aa0 <UART_SetConfig+0x2bc>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d121      	bne.n	80058a8 <UART_SetConfig+0xc4>
 8005864:	4b8f      	ldr	r3, [pc, #572]	; (8005aa4 <UART_SetConfig+0x2c0>)
 8005866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005868:	f003 0303 	and.w	r3, r3, #3
 800586c:	2b03      	cmp	r3, #3
 800586e:	d817      	bhi.n	80058a0 <UART_SetConfig+0xbc>
 8005870:	a201      	add	r2, pc, #4	; (adr r2, 8005878 <UART_SetConfig+0x94>)
 8005872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005876:	bf00      	nop
 8005878:	08005889 	.word	0x08005889
 800587c:	08005895 	.word	0x08005895
 8005880:	0800589b 	.word	0x0800589b
 8005884:	0800588f 	.word	0x0800588f
 8005888:	2300      	movs	r3, #0
 800588a:	77fb      	strb	r3, [r7, #31]
 800588c:	e01e      	b.n	80058cc <UART_SetConfig+0xe8>
 800588e:	2302      	movs	r3, #2
 8005890:	77fb      	strb	r3, [r7, #31]
 8005892:	e01b      	b.n	80058cc <UART_SetConfig+0xe8>
 8005894:	2304      	movs	r3, #4
 8005896:	77fb      	strb	r3, [r7, #31]
 8005898:	e018      	b.n	80058cc <UART_SetConfig+0xe8>
 800589a:	2308      	movs	r3, #8
 800589c:	77fb      	strb	r3, [r7, #31]
 800589e:	e015      	b.n	80058cc <UART_SetConfig+0xe8>
 80058a0:	2310      	movs	r3, #16
 80058a2:	77fb      	strb	r3, [r7, #31]
 80058a4:	bf00      	nop
 80058a6:	e011      	b.n	80058cc <UART_SetConfig+0xe8>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a7e      	ldr	r2, [pc, #504]	; (8005aa8 <UART_SetConfig+0x2c4>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d102      	bne.n	80058b8 <UART_SetConfig+0xd4>
 80058b2:	2300      	movs	r3, #0
 80058b4:	77fb      	strb	r3, [r7, #31]
 80058b6:	e009      	b.n	80058cc <UART_SetConfig+0xe8>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a7b      	ldr	r2, [pc, #492]	; (8005aac <UART_SetConfig+0x2c8>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d102      	bne.n	80058c8 <UART_SetConfig+0xe4>
 80058c2:	2300      	movs	r3, #0
 80058c4:	77fb      	strb	r3, [r7, #31]
 80058c6:	e001      	b.n	80058cc <UART_SetConfig+0xe8>
 80058c8:	2310      	movs	r3, #16
 80058ca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058d4:	f040 8082 	bne.w	80059dc <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80058d8:	7ffb      	ldrb	r3, [r7, #31]
 80058da:	2b08      	cmp	r3, #8
 80058dc:	d85e      	bhi.n	800599c <UART_SetConfig+0x1b8>
 80058de:	a201      	add	r2, pc, #4	; (adr r2, 80058e4 <UART_SetConfig+0x100>)
 80058e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e4:	08005909 	.word	0x08005909
 80058e8:	08005929 	.word	0x08005929
 80058ec:	08005949 	.word	0x08005949
 80058f0:	0800599d 	.word	0x0800599d
 80058f4:	08005965 	.word	0x08005965
 80058f8:	0800599d 	.word	0x0800599d
 80058fc:	0800599d 	.word	0x0800599d
 8005900:	0800599d 	.word	0x0800599d
 8005904:	08005985 	.word	0x08005985
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005908:	f7fe fa1e 	bl	8003d48 <HAL_RCC_GetPCLK1Freq>
 800590c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	005a      	lsls	r2, r3, #1
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	085b      	lsrs	r3, r3, #1
 8005918:	441a      	add	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005922:	b29b      	uxth	r3, r3
 8005924:	61bb      	str	r3, [r7, #24]
        break;
 8005926:	e03c      	b.n	80059a2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005928:	f7fe fa30 	bl	8003d8c <HAL_RCC_GetPCLK2Freq>
 800592c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	005a      	lsls	r2, r3, #1
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	085b      	lsrs	r3, r3, #1
 8005938:	441a      	add	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005942:	b29b      	uxth	r3, r3
 8005944:	61bb      	str	r3, [r7, #24]
        break;
 8005946:	e02c      	b.n	80059a2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	085b      	lsrs	r3, r3, #1
 800594e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005952:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	6852      	ldr	r2, [r2, #4]
 800595a:	fbb3 f3f2 	udiv	r3, r3, r2
 800595e:	b29b      	uxth	r3, r3
 8005960:	61bb      	str	r3, [r7, #24]
        break;
 8005962:	e01e      	b.n	80059a2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005964:	f7fe f97a 	bl	8003c5c <HAL_RCC_GetSysClockFreq>
 8005968:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	005a      	lsls	r2, r3, #1
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	085b      	lsrs	r3, r3, #1
 8005974:	441a      	add	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	fbb2 f3f3 	udiv	r3, r2, r3
 800597e:	b29b      	uxth	r3, r3
 8005980:	61bb      	str	r3, [r7, #24]
        break;
 8005982:	e00e      	b.n	80059a2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	085b      	lsrs	r3, r3, #1
 800598a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	fbb2 f3f3 	udiv	r3, r2, r3
 8005996:	b29b      	uxth	r3, r3
 8005998:	61bb      	str	r3, [r7, #24]
        break;
 800599a:	e002      	b.n	80059a2 <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	75fb      	strb	r3, [r7, #23]
        break;
 80059a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	2b0f      	cmp	r3, #15
 80059a6:	d916      	bls.n	80059d6 <UART_SetConfig+0x1f2>
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ae:	d212      	bcs.n	80059d6 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	f023 030f 	bic.w	r3, r3, #15
 80059b8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	085b      	lsrs	r3, r3, #1
 80059be:	b29b      	uxth	r3, r3
 80059c0:	f003 0307 	and.w	r3, r3, #7
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	897b      	ldrh	r3, [r7, #10]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	897a      	ldrh	r2, [r7, #10]
 80059d2:	60da      	str	r2, [r3, #12]
 80059d4:	e07d      	b.n	8005ad2 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	75fb      	strb	r3, [r7, #23]
 80059da:	e07a      	b.n	8005ad2 <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 80059dc:	7ffb      	ldrb	r3, [r7, #31]
 80059de:	2b08      	cmp	r3, #8
 80059e0:	d866      	bhi.n	8005ab0 <UART_SetConfig+0x2cc>
 80059e2:	a201      	add	r2, pc, #4	; (adr r2, 80059e8 <UART_SetConfig+0x204>)
 80059e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e8:	08005a0d 	.word	0x08005a0d
 80059ec:	08005a2b 	.word	0x08005a2b
 80059f0:	08005a49 	.word	0x08005a49
 80059f4:	08005ab1 	.word	0x08005ab1
 80059f8:	08005a65 	.word	0x08005a65
 80059fc:	08005ab1 	.word	0x08005ab1
 8005a00:	08005ab1 	.word	0x08005ab1
 8005a04:	08005ab1 	.word	0x08005ab1
 8005a08:	08005a83 	.word	0x08005a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a0c:	f7fe f99c 	bl	8003d48 <HAL_RCC_GetPCLK1Freq>
 8005a10:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	085a      	lsrs	r2, r3, #1
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	441a      	add	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	61bb      	str	r3, [r7, #24]
        break;
 8005a28:	e045      	b.n	8005ab6 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a2a:	f7fe f9af 	bl	8003d8c <HAL_RCC_GetPCLK2Freq>
 8005a2e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	085a      	lsrs	r2, r3, #1
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	441a      	add	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	61bb      	str	r3, [r7, #24]
        break;
 8005a46:	e036      	b.n	8005ab6 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	085b      	lsrs	r3, r3, #1
 8005a4e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8005a52:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	6852      	ldr	r2, [r2, #4]
 8005a5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	61bb      	str	r3, [r7, #24]
        break;
 8005a62:	e028      	b.n	8005ab6 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a64:	f7fe f8fa 	bl	8003c5c <HAL_RCC_GetSysClockFreq>
 8005a68:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	085a      	lsrs	r2, r3, #1
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	441a      	add	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	61bb      	str	r3, [r7, #24]
        break;
 8005a80:	e019      	b.n	8005ab6 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	085b      	lsrs	r3, r3, #1
 8005a88:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	61bb      	str	r3, [r7, #24]
        break;
 8005a98:	e00d      	b.n	8005ab6 <UART_SetConfig+0x2d2>
 8005a9a:	bf00      	nop
 8005a9c:	efff69f3 	.word	0xefff69f3
 8005aa0:	40013800 	.word	0x40013800
 8005aa4:	40021000 	.word	0x40021000
 8005aa8:	40004400 	.word	0x40004400
 8005aac:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	75fb      	strb	r3, [r7, #23]
        break;
 8005ab4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	2b0f      	cmp	r3, #15
 8005aba:	d908      	bls.n	8005ace <UART_SetConfig+0x2ea>
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ac2:	d204      	bcs.n	8005ace <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	60da      	str	r2, [r3, #12]
 8005acc:	e001      	b.n	8005ad2 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3720      	adds	r7, #32
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00a      	beq.n	8005b12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00a      	beq.n	8005b34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b38:	f003 0304 	and.w	r3, r3, #4
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00a      	beq.n	8005b56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	f003 0308 	and.w	r3, r3, #8
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00a      	beq.n	8005b78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	f003 0310 	and.w	r3, r3, #16
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00a      	beq.n	8005b9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9e:	f003 0320 	and.w	r3, r3, #32
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00a      	beq.n	8005bbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d01a      	beq.n	8005bfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005be6:	d10a      	bne.n	8005bfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00a      	beq.n	8005c20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	605a      	str	r2, [r3, #4]
  }
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af02      	add	r7, sp, #8
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005c3a:	f7fb fb9b 	bl	8001374 <HAL_GetTick>
 8005c3e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0308 	and.w	r3, r3, #8
 8005c4a:	2b08      	cmp	r3, #8
 8005c4c:	d10e      	bne.n	8005c6c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 f82a 	bl	8005cb6 <UART_WaitOnFlagUntilTimeout>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d001      	beq.n	8005c6c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e020      	b.n	8005cae <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0304 	and.w	r3, r3, #4
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	d10e      	bne.n	8005c98 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c7e:	9300      	str	r3, [sp, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f814 	bl	8005cb6 <UART_WaitOnFlagUntilTimeout>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e00a      	b.n	8005cae <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b084      	sub	sp, #16
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	60f8      	str	r0, [r7, #12]
 8005cbe:	60b9      	str	r1, [r7, #8]
 8005cc0:	603b      	str	r3, [r7, #0]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cc6:	e05d      	b.n	8005d84 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cce:	d059      	beq.n	8005d84 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cd0:	f7fb fb50 	bl	8001374 <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d302      	bcc.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d11b      	bne.n	8005d1e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005cf4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 0201 	bic.w	r2, r2, #1
 8005d04:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2220      	movs	r2, #32
 8005d10:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e042      	b.n	8005da4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0304 	and.w	r3, r3, #4
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d02b      	beq.n	8005d84 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d3a:	d123      	bne.n	8005d84 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d44:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d54:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689a      	ldr	r2, [r3, #8]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 0201 	bic.w	r2, r2, #1
 8005d64:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2220      	movs	r2, #32
 8005d76:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e00f      	b.n	8005da4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	69da      	ldr	r2, [r3, #28]
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	bf0c      	ite	eq
 8005d94:	2301      	moveq	r3, #1
 8005d96:	2300      	movne	r3, #0
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	79fb      	ldrb	r3, [r7, #7]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d092      	beq.n	8005cc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005dc2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689a      	ldr	r2, [r3, #8]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 0201 	bic.w	r2, r2, #1
 8005dd2:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f7ff fce0 	bl	80057d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e10:	bf00      	nop
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e2e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2220      	movs	r2, #32
 8005e34:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7ff fcbd 	bl	80057bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e42:	bf00      	nop
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b083      	sub	sp, #12
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e52:	bf00      	nop
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
	...

08005e60 <__libc_init_array>:
 8005e60:	b570      	push	{r4, r5, r6, lr}
 8005e62:	4e0d      	ldr	r6, [pc, #52]	; (8005e98 <__libc_init_array+0x38>)
 8005e64:	4c0d      	ldr	r4, [pc, #52]	; (8005e9c <__libc_init_array+0x3c>)
 8005e66:	1ba4      	subs	r4, r4, r6
 8005e68:	10a4      	asrs	r4, r4, #2
 8005e6a:	2500      	movs	r5, #0
 8005e6c:	42a5      	cmp	r5, r4
 8005e6e:	d109      	bne.n	8005e84 <__libc_init_array+0x24>
 8005e70:	4e0b      	ldr	r6, [pc, #44]	; (8005ea0 <__libc_init_array+0x40>)
 8005e72:	4c0c      	ldr	r4, [pc, #48]	; (8005ea4 <__libc_init_array+0x44>)
 8005e74:	f000 f820 	bl	8005eb8 <_init>
 8005e78:	1ba4      	subs	r4, r4, r6
 8005e7a:	10a4      	asrs	r4, r4, #2
 8005e7c:	2500      	movs	r5, #0
 8005e7e:	42a5      	cmp	r5, r4
 8005e80:	d105      	bne.n	8005e8e <__libc_init_array+0x2e>
 8005e82:	bd70      	pop	{r4, r5, r6, pc}
 8005e84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e88:	4798      	blx	r3
 8005e8a:	3501      	adds	r5, #1
 8005e8c:	e7ee      	b.n	8005e6c <__libc_init_array+0xc>
 8005e8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e92:	4798      	blx	r3
 8005e94:	3501      	adds	r5, #1
 8005e96:	e7f2      	b.n	8005e7e <__libc_init_array+0x1e>
 8005e98:	08005f08 	.word	0x08005f08
 8005e9c:	08005f08 	.word	0x08005f08
 8005ea0:	08005f08 	.word	0x08005f08
 8005ea4:	08005f0c 	.word	0x08005f0c

08005ea8 <memset>:
 8005ea8:	4402      	add	r2, r0
 8005eaa:	4603      	mov	r3, r0
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d100      	bne.n	8005eb2 <memset+0xa>
 8005eb0:	4770      	bx	lr
 8005eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8005eb6:	e7f9      	b.n	8005eac <memset+0x4>

08005eb8 <_init>:
 8005eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eba:	bf00      	nop
 8005ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ebe:	bc08      	pop	{r3}
 8005ec0:	469e      	mov	lr, r3
 8005ec2:	4770      	bx	lr

08005ec4 <_fini>:
 8005ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ec6:	bf00      	nop
 8005ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eca:	bc08      	pop	{r3}
 8005ecc:	469e      	mov	lr, r3
 8005ece:	4770      	bx	lr
